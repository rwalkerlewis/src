import rsf.doc

sfpsti2d = rsf.doc.rsfprog('sfpsti2d','user/junyan/Mpsti2d.c','''Modeling of pure acoustic wave in 2-D transversely isotropic meida using psuedospectral method ''')
sfpsti2d.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpsti2d.par('sigma',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpsti2d.par('delta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpsti2d.par('seta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpsti2d.par('opt',rsf.doc.rsfpar('int','1','','''if y, determine optimal size for efficiency '''))
sfpsti2d.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfpsti2d.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfpsti2d.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfpsti2d.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfpsti2d.par('nbt',rsf.doc.rsfpar('int','44','',''''''))
sfpsti2d.par('nbb',rsf.doc.rsfpar('int','44','',''''''))
sfpsti2d.par('nxl',rsf.doc.rsfpar('int','44','',''''''))
sfpsti2d.par('nxr',rsf.doc.rsfpar('int','44','','''assume ABC pars are the same '''))
sfpsti2d.par('czt',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfpsti2d.par('czb',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfpsti2d.par('cxl',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfpsti2d.par('cxr',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfpsti2d.par('snap',rsf.doc.rsfpar('int','1','',''''''))
sfpsti2d.version('2.1-git')
sfpsti2d.synopsis('''sfpsti2d > out.rsf vel=vel.rsf sigma=fsigma.rsf delta=fdelta.rsf seta=fseta.rsf < source.rsf opt=1 dt= nt= isx= isz= nbt=44 nbb=44 nxl=44 nxr=44 czt=0.01 czb=0.01 cxl=0.01 cxr=0.01 snap=1''','''''')
rsf.doc.progs['sfpsti2d']=sfpsti2d

sfpamti2d = rsf.doc.rsfprog('sfpamti2d','user/junyan/Mpamti2d.c','''Modeling of pure acoustic wave in 3-D transversely isotropic media with psuedo-analytic method ''')
sfpamti2d.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpamti2d.par('sigma',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpamti2d.par('delta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpamti2d.par('seta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpamti2d.par('opt',rsf.doc.rsfpar('int','1','','''if y, determine optimal size for efficiency '''))
sfpamti2d.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfpamti2d.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfpamti2d.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfpamti2d.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfpamti2d.par('nbt',rsf.doc.rsfpar('int','44','',''''''))
sfpamti2d.par('nbb',rsf.doc.rsfpar('int','44','',''''''))
sfpamti2d.par('nxl',rsf.doc.rsfpar('int','44','',''''''))
sfpamti2d.par('nxr',rsf.doc.rsfpar('int','44','','''assume ABC pars are the same '''))
sfpamti2d.par('czt',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfpamti2d.par('czb',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfpamti2d.par('cxl',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfpamti2d.par('cxr',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfpamti2d.par('snap',rsf.doc.rsfpar('int','1','',''''''))
sfpamti2d.version('2.1-git')
sfpamti2d.synopsis('''sfpamti2d > out.rsf vel=vel.rsf sigma=fsigma.rsf delta=fdelta.rsf seta=fseta.rsf < source.rsf opt=1 dt= nt= isx= isz= nbt=44 nbb=44 nxl=44 nxr=44 czt=0.01 czb=0.01 cxl=0.01 cxr=0.01 snap=1''','''''')
rsf.doc.progs['sfpamti2d']=sfpamti2d

sfopoti2d = rsf.doc.rsfprog('sfopoti2d','user/junyan/Mopoti2d.c','''Modeling of pure acoustic wave in 2-D transversely isotropic meida using optimized pseudo-Laplacian operator ''')
sfopoti2d.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti2d.par('sigma',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti2d.par('delta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti2d.par('seta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti2d.par('Gxxl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti2d.par('Gxxr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti2d.par('Gzzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti2d.par('Gzzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti2d.par('Gxxxxl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti2d.par('Gxxxxr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti2d.par('Gzzzzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti2d.par('Gzzzzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti2d.par('Gxzzzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti2d.par('Gxzzzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti2d.par('Gxxxzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti2d.par('Gxxxzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti2d.par('Gxxzzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti2d.par('Gxxzzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti2d.par('opt',rsf.doc.rsfpar('int','1','','''if y, determine optimal size for efficiency '''))
sfopoti2d.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfopoti2d.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfopoti2d.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfopoti2d.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfopoti2d.par('nbt',rsf.doc.rsfpar('int','30','',''''''))
sfopoti2d.par('nbb',rsf.doc.rsfpar('int','30','',''''''))
sfopoti2d.par('nxl',rsf.doc.rsfpar('int','30','',''''''))
sfopoti2d.par('nxr',rsf.doc.rsfpar('int','30','','''assume ABC pars are the same '''))
sfopoti2d.par('czt',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfopoti2d.par('czb',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfopoti2d.par('cxl',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfopoti2d.par('cxr',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfopoti2d.par('ax',rsf.doc.rsfpar('float','5.0','','''suppress HF parameter'''))
sfopoti2d.par('az',rsf.doc.rsfpar('float','5.0','','''suppress HF parameter'''))
sfopoti2d.par('factor',rsf.doc.rsfpar('float','5.0/6.0','','''suppress HF parameter'''))
sfopoti2d.par('cmplx',rsf.doc.rsfpar('bool','n','','''use complex FFT '''))
sfopoti2d.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfopoti2d.par('snap',rsf.doc.rsfpar('int','1','',''''''))
sfopoti2d.version('2.1-git')
sfopoti2d.synopsis('''sfopoti2d > out.rsf vel=vel.rsf sigma=fsigma.rsf delta=fdelta.rsf seta=fseta.rsf < source.rsf Gxxl=Gxxl.rsf Gxxr=Gxxr.rsf Gzzl=Gzzl.rsf Gzzr=Gzzr.rsf Gxxxxl=Gxxxxl.rsf Gxxxxr=Gxxxxr.rsf Gzzzzl=Gzzzzl.rsf Gzzzzr=Gzzzzr.rsf Gxzzzl=Gxzzzl.rsf Gxzzzr=Gxzzzr.rsf Gxxxzl=Gxxxzl.rsf Gxxxzr=Gxxxzr.rsf Gxxzzl=Gxxzzl.rsf Gxxzzr=Gxxzzr.rsf opt=1 dt= nt= isx= isz= nbt=30 nbb=30 nxl=30 nxr=30 czt=0.01 czb=0.01 cxl=0.01 cxr=0.01 ax=5.0 az=5.0 factor=5.0/6.0 cmplx=n pad1=1 snap=1''','''''')
rsf.doc.progs['sfopoti2d']=sfopoti2d

sfopoti3d = rsf.doc.rsfprog('sfopoti3d','user/junyan/Mopoti3d.c','''Modeling of pure acoustic wave in 3-D transversely isotropic meida using optimized pseudo-Laplacian operator ''')
sfopoti3d.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('sigma',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('delta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('seta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('phi',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxxl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxxr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gyyl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gyyr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gzzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gzzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxyl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxyr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gyzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gyzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxxxxl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxxxxr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gyyyyl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gyyyyr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gzzzzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gzzzzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxxxyl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxxxyr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxxxzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxxxzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxyyyl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxyyyr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gyyyzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gyyyzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxzzzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxzzzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gyzzzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gyzzzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxxyyl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxxyyr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxxzzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxxzzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gyyzzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gyyzzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxxyzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxxyzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxyyzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxyyzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxyzzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('Gxyzzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopoti3d.par('opt',rsf.doc.rsfpar('int','1','','''if y, determine optimal size for efficiency '''))
sfopoti3d.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfopoti3d.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfopoti3d.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfopoti3d.par('isy',rsf.doc.rsfpar('int','','',''''''))
sfopoti3d.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfopoti3d.par('nbt',rsf.doc.rsfpar('int','30','',''''''))
sfopoti3d.par('nbb',rsf.doc.rsfpar('int','30','',''''''))
sfopoti3d.par('nxl',rsf.doc.rsfpar('int','30','',''''''))
sfopoti3d.par('nxr',rsf.doc.rsfpar('int','30','',''''''))
sfopoti3d.par('nyl',rsf.doc.rsfpar('int','30','',''''''))
sfopoti3d.par('nyr',rsf.doc.rsfpar('int','30','','''assume ABC pars are the same '''))
sfopoti3d.par('czt',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfopoti3d.par('czb',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfopoti3d.par('cxl',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfopoti3d.par('cxr',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfopoti3d.par('cmplx',rsf.doc.rsfpar('bool','n','','''use complex FFT '''))
sfopoti3d.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfopoti3d.par('snap',rsf.doc.rsfpar('int','1','',''''''))
sfopoti3d.version('2.1-git')
sfopoti3d.synopsis('''sfopoti3d > out.rsf vel=vel.rsf sigma=fsigma.rsf delta=fdelta.rsf seta=fseta.rsf phi=fphi.rsf < source.rsf Gxxl=Gxxl.rsf Gxxr=Gxxr.rsf Gyyl=Gyyl.rsf Gyyr=Gyyr.rsf Gzzl=Gzzl.rsf Gzzr=Gzzr.rsf Gxyl=Gxyl.rsf Gxyr=Gxyr.rsf Gxzl=Gxzl.rsf Gxzr=Gxzr.rsf Gyzl=Gyzl.rsf Gyzr=Gyzr.rsf Gxxxxl=Gxxxxl.rsf Gxxxxr=Gxxxxr.rsf Gyyyyl=Gyyyyl.rsf Gyyyyr=Gyyyyr.rsf Gzzzzl=Gzzzzl.rsf Gzzzzr=Gzzzzr.rsf Gxxxyl=Gxxxyl.rsf Gxxxyr=Gxxxyr.rsf Gxxxzl=Gxxxzl.rsf Gxxxzr=Gxxxzr.rsf Gxyyyl=Gxyyyl.rsf Gxyyyr=Gxyyyr.rsf Gyyyzl=Gyyyzl.rsf Gyyyzr=Gyyyzr.rsf Gxzzzl=Gxzzzl.rsf Gxzzzr=Gxzzzr.rsf Gyzzzl=Gyzzzl.rsf Gyzzzr=Gyzzzr.rsf Gxxyyl=Gxxyyl.rsf Gxxyyr=Gxxyyr.rsf Gxxzzl=Gxxzzl.rsf Gxxzzr=Gxxzzr.rsf Gyyzzl=Gyyzzl.rsf Gyyzzr=Gyyzzr.rsf Gxxyzl=Gxxyzl.rsf Gxxyzr=Gxxyzr.rsf Gxyyzl=Gxyyzl.rsf Gxyyzr=Gxyyzr.rsf Gxyzzl=Gxyzzl.rsf Gxyzzr=Gxyzzr.rsf opt=1 dt= nt= isx= isy= isz= nbt=30 nbb=30 nxl=30 nxr=30 nyl=30 nyr=30 czt=0.01 czb=0.01 cxl=0.01 cxr=0.01 cmplx=n pad1=1 snap=1''','''''')
rsf.doc.progs['sfopoti3d']=sfopoti3d

sfopame2d = rsf.doc.rsfprog('sfopame2d','user/junyan/Mopame2d.c','''2-D opam for elastic wave modeling and vector field decompostion ''')
sfopame2d.par('vp',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2d.par('vs',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2d.par('wavwp',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfopame2d.par('wavus',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfopame2d.par('wavws',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfopame2d.par('wavu',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfopame2d.par('wavw',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfopame2d.par('Guxxl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2d.par('Guxxr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2d.par('Gwxzpl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2d.par('Gwxzpr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2d.par('Guxzpl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2d.par('Guxzpr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2d.par('Gwzzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2d.par('Gwzzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2d.par('Guzzl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2d.par('Guzzr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2d.par('Gwxzsl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2d.par('Gwxzsr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2d.par('Gwxxl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2d.par('Gwxxr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2d.par('Guxzsl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2d.par('Guxzsr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2d.par('opt',rsf.doc.rsfpar('int','0','','''if y, determine optimal size for efficiency '''))
sfopame2d.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfopame2d.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfopame2d.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfopame2d.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfopame2d.par('nbt',rsf.doc.rsfpar('int','44','',''''''))
sfopame2d.par('nbb',rsf.doc.rsfpar('int','44','',''''''))
sfopame2d.par('nxl',rsf.doc.rsfpar('int','44','',''''''))
sfopame2d.par('nxr',rsf.doc.rsfpar('int','44','','''assume ABC pars are the same '''))
sfopame2d.par('czt',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfopame2d.par('czb',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfopame2d.par('cxl',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfopame2d.par('cxr',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfopame2d.par('cmplx',rsf.doc.rsfpar('bool','n','','''use complex FFT '''))
sfopame2d.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfopame2d.par('snap',rsf.doc.rsfpar('int','1','',''''''))
sfopame2d.version('2.1-git')
sfopame2d.synopsis('''sfopame2d vp=fvelp.rsf vs=fvels.rsf < fsource.rsf > fwavup.rsf wavwp=fwavwp.rsf wavus=fwavus.rsf wavws=fwavws.rsf wavu=fwavu.rsf wavw=fwavw.rsf Guxxl=Guxxl.rsf Guxxr=Guxxr.rsf Gwxzpl=Gwxzpl.rsf Gwxzpr=Gwxzpr.rsf Guxzpl=Guxzpl.rsf Guxzpr=Guxzpr.rsf Gwzzl=Gwzzl.rsf Gwzzr=Gwzzr.rsf Guzzl=Guzzl.rsf Guzzr=Guzzr.rsf Gwxzsl=Gwxzsl.rsf Gwxzsr=Gwxzsr.rsf Gwxxl=Gwxxl.rsf Gwxxr=Gwxxr.rsf Guxzsl=Guxzsl.rsf Guxzsr=Guxzsr.rsf opt=0 dt= nt= isx= isz= nbt=44 nbb=44 nxl=44 nxr=44 czt=0.01 czb=0.01 cxl=0.01 cxr=0.01 cmplx=n pad1=1 snap=1''','''''')
rsf.doc.progs['sfopame2d']=sfopame2d

sfsgelfd2dpml = rsf.doc.rsfprog('sfsgelfd2dpml','user/junyan/Msgelfd2dpml.c','''A k-space staggered-grid lowrank finite-difference for elastic and viscoelastic seismic-wave modeling''')
sfsgelfd2dpml.par('vs',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml.par('rho',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml.par('Gpx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml.par('Gpz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml.par('Gsx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml.par('Gsz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml.par('sxx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml.par('sxz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml.par('szx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml.par('szz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml.par('snapz',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsgelfd2dpml.par('snappx',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsgelfd2dpml.par('snappz',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsgelfd2dpml.par('snapsx',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsgelfd2dpml.par('snapsz',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsgelfd2dpml.par('order',rsf.doc.rsfpar('int','12','','''source '''))
sfsgelfd2dpml.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfsgelfd2dpml.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfsgelfd2dpml.par('fpeak',rsf.doc.rsfpar('float','20.0','',''''''))
sfsgelfd2dpml.par('isrcx',rsf.doc.rsfpar('int','','',''''''))
sfsgelfd2dpml.par('isrcz',rsf.doc.rsfpar('int','','',''''''))
sfsgelfd2dpml.par('npml',rsf.doc.rsfpar('int','30','',''''''))
sfsgelfd2dpml.par('verb',rsf.doc.rsfpar('int','1','','''freesurface '''))
sfsgelfd2dpml.par('freesurface',rsf.doc.rsfpar('int','0','','''recerver '''))
sfsgelfd2dpml.par('igz',rsf.doc.rsfpar('int','1','',''''''))
sfsgelfd2dpml.par('snap',rsf.doc.rsfpar('int','1','',''''''))
sfsgelfd2dpml.version('2.1-git')
sfsgelfd2dpml.synopsis('''sfsgelfd2dpml < vpfp.rsf vs=vsfp.rsf rho=rhofp.rsf Gpx=Gpxfp.rsf Gpz=Gpzfp.rsf Gsx=Gsxfp.rsf Gsz=Gszfp.rsf sxx=sxxfp.rsf sxz=sxzfp.rsf szx=szxfp.rsf szz=szzfp.rsf > snapfpx.rsf snapz=snapfpz.rsf snappx=snapfppx.rsf snappz=snapfppz.rsf snapsx=snapfpsx.rsf snapsz=snapfpsz.rsf order=12 dt= nt= fpeak=20.0 isrcx= isrcz= npml=30 verb=1 freesurface=0 igz=1 snap=1''','''''')
rsf.doc.progs['sfsgelfd2dpml']=sfsgelfd2dpml

sfsgelfd2dpml2 = rsf.doc.rsfprog('sfsgelfd2dpml2','user/junyan/Msgelfd2dpml2.c','''A k-space staggered-grid lowrank finite-difference for elastic and viscoelastic seismic-wave modeling''')
sfsgelfd2dpml2.par('vs',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml2.par('rho',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml2.par('Gpx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml2.par('Gpz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml2.par('Gsx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml2.par('Gsz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml2.par('sxx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml2.par('sxz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml2.par('szx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml2.par('szz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgelfd2dpml2.par('snapz',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsgelfd2dpml2.par('snappx',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsgelfd2dpml2.par('snappz',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsgelfd2dpml2.par('snapsx',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsgelfd2dpml2.par('snapsz',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsgelfd2dpml2.par('order',rsf.doc.rsfpar('int','12','','''source '''))
sfsgelfd2dpml2.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfsgelfd2dpml2.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfsgelfd2dpml2.par('fpeak',rsf.doc.rsfpar('float','20.0','',''''''))
sfsgelfd2dpml2.par('isrcx',rsf.doc.rsfpar('int','','',''''''))
sfsgelfd2dpml2.par('isrcz',rsf.doc.rsfpar('int','','',''''''))
sfsgelfd2dpml2.par('npml',rsf.doc.rsfpar('int','30','',''''''))
sfsgelfd2dpml2.par('verb',rsf.doc.rsfpar('int','1','','''freesurface '''))
sfsgelfd2dpml2.par('freesurface',rsf.doc.rsfpar('int','0','','''recerver '''))
sfsgelfd2dpml2.par('igz',rsf.doc.rsfpar('int','1','',''''''))
sfsgelfd2dpml2.par('snap',rsf.doc.rsfpar('int','1','',''''''))
sfsgelfd2dpml2.version('2.1-git')
sfsgelfd2dpml2.synopsis('''sfsgelfd2dpml2 < vpfp.rsf vs=vsfp.rsf rho=rhofp.rsf Gpx=Gpxfp.rsf Gpz=Gpzfp.rsf Gsx=Gsxfp.rsf Gsz=Gszfp.rsf sxx=sxxfp.rsf sxz=sxzfp.rsf szx=szxfp.rsf szz=szzfp.rsf > snapfpx.rsf snapz=snapfpz.rsf snappx=snapfppx.rsf snappz=snapfppz.rsf snapsx=snapfpsx.rsf snapsz=snapfpsz.rsf order=12 dt= nt= fpeak=20.0 isrcx= isrcz= npml=30 verb=1 freesurface=0 igz=1 snap=1''','''''')
rsf.doc.progs['sfsgelfd2dpml2']=sfsgelfd2dpml2

sfpame2d = rsf.doc.rsfprog('sfpame2d','user/junyan/Mpame2d.c','''2-D elasitc wave modeling and vector field decompostion using pseudo-analytical method ''')
sfpame2d.par('vp',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpame2d.par('vs',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpame2d.par('wavwp',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpame2d.par('wavus',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpame2d.par('wavws',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpame2d.par('wavu',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpame2d.par('wavw',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpame2d.par('opt',rsf.doc.rsfpar('int','0','','''if y, determine optimal size for efficiency '''))
sfpame2d.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfpame2d.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfpame2d.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfpame2d.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfpame2d.par('nbt',rsf.doc.rsfpar('int','44','',''''''))
sfpame2d.par('nbb',rsf.doc.rsfpar('int','44','',''''''))
sfpame2d.par('nxl',rsf.doc.rsfpar('int','44','',''''''))
sfpame2d.par('nxr',rsf.doc.rsfpar('int','44','','''assume ABC pars are the same '''))
sfpame2d.par('czt',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfpame2d.par('czb',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfpame2d.par('cxl',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfpame2d.par('cxr',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfpame2d.par('snap',rsf.doc.rsfpar('int','1','',''''''))
sfpame2d.version('2.1-git')
sfpame2d.synopsis('''sfpame2d vp=fvelp.rsf vs=fvels.rsf < fsource.rsf > fwavup.rsf wavwp=fwavwp.rsf wavus=fwavus.rsf wavws=fwavws.rsf wavu=fwavu.rsf wavw=fwavw.rsf opt=0 dt= nt= isx= isz= nbt=44 nbb=44 nxl=44 nxr=44 czt=0.01 czb=0.01 cxl=0.01 cxr=0.01 snap=1''','''''')
rsf.doc.progs['sfpame2d']=sfpame2d

sfopame2dckxx = rsf.doc.rsfprog('sfopame2dckxx','user/junyan/Mopame2dckxx.cc','''2-D opam for elastic wave modeling and vector field decompostion */''')
sfopame2dckxx.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2dckxx.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfopame2dckxx.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfopame2dckxx.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfopame2dckxx.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfopame2dckxx.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfopame2dckxx.version('2.1-git')
sfopame2dckxx.synopsis('''sfopame2dckxx < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfopame2dckxx']=sfopame2dckxx

sfopame2dckxz = rsf.doc.rsfprog('sfopame2dckxz','user/junyan/Mopame2dckxz.cc','''2-D opam for elastic wave modeling and vector field decompostion */''')
sfopame2dckxz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2dckxz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfopame2dckxz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfopame2dckxz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfopame2dckxz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfopame2dckxz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfopame2dckxz.version('2.1-git')
sfopame2dckxz.synopsis('''sfopame2dckxz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfopame2dckxz']=sfopame2dckxz

sfopame2dckzz = rsf.doc.rsfprog('sfopame2dckzz','user/junyan/Mopame2dckzz.cc','''2-D opam for elastic wave modeling and vector field decompostion */''')
sfopame2dckzz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfopame2dckzz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfopame2dckzz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfopame2dckzz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfopame2dckzz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfopame2dckzz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfopame2dckzz.version('2.1-git')
sfopame2dckzz.synopsis('''sfopame2dckzz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfopame2dckzz']=sfopame2dckzz

sfosam2dckxx = rsf.doc.rsfprog('sfosam2dckxx','user/junyan/Mosam2dckxx.cc','''Lowrank decomposition for 2-D isotropic wave propagation. ''')
sfosam2dckxx.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam2dckxx.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam2dckxx.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam2dckxx.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam2dckxx.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam2dckxx.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam2dckxx.version('2.1-git')
sfosam2dckxx.synopsis('''sfosam2dckxx < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam2dckxx']=sfosam2dckxx

sfosam2dckxxxx = rsf.doc.rsfprog('sfosam2dckxxxx','user/junyan/Mosam2dckxxxx.cc','''Lowrank decomposition for 2-D isotropic wave propagation. ''')
sfosam2dckxxxx.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam2dckxxxx.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam2dckxxxx.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam2dckxxxx.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam2dckxxxx.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam2dckxxxx.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam2dckxxxx.version('2.1-git')
sfosam2dckxxxx.synopsis('''sfosam2dckxxxx < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam2dckxxxx']=sfosam2dckxxxx

sfosam2dckxxxz = rsf.doc.rsfprog('sfosam2dckxxxz','user/junyan/Mosam2dckxxxz.cc','''Lowrank decomposition for 2-D isotropic wave propagation. ''')
sfosam2dckxxxz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam2dckxxxz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam2dckxxxz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam2dckxxxz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam2dckxxxz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam2dckxxxz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam2dckxxxz.version('2.1-git')
sfosam2dckxxxz.synopsis('''sfosam2dckxxxz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam2dckxxxz']=sfosam2dckxxxz

sfosam2dckxxzz = rsf.doc.rsfprog('sfosam2dckxxzz','user/junyan/Mosam2dckxxzz.cc','''Lowrank decomposition for 2-D isotropic wave propagation. ''')
sfosam2dckxxzz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam2dckxxzz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam2dckxxzz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam2dckxxzz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam2dckxxzz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam2dckxxzz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam2dckxxzz.version('2.1-git')
sfosam2dckxxzz.synopsis('''sfosam2dckxxzz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam2dckxxzz']=sfosam2dckxxzz

sfosam2dckxzzz = rsf.doc.rsfprog('sfosam2dckxzzz','user/junyan/Mosam2dckxzzz.cc','''Lowrank decomposition for 2-D isotropic wave propagation. ''')
sfosam2dckxzzz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam2dckxzzz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam2dckxzzz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam2dckxzzz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam2dckxzzz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam2dckxzzz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam2dckxzzz.version('2.1-git')
sfosam2dckxzzz.synopsis('''sfosam2dckxzzz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam2dckxzzz']=sfosam2dckxzzz

sfosam2dckzz = rsf.doc.rsfprog('sfosam2dckzz','user/junyan/Mosam2dckzz.cc','''Lowrank decomposition for 2-D isotropic wave propagation. ''')
sfosam2dckzz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam2dckzz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam2dckzz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam2dckzz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam2dckzz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam2dckzz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam2dckzz.version('2.1-git')
sfosam2dckzz.synopsis('''sfosam2dckzz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam2dckzz']=sfosam2dckzz

sfosam2dckzzzz = rsf.doc.rsfprog('sfosam2dckzzzz','user/junyan/Mosam2dckzzzz.cc','''Lowrank decomposition for 2-D isotropic wave propagation. ''')
sfosam2dckzzzz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam2dckzzzz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam2dckzzzz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam2dckzzzz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam2dckzzzz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam2dckzzzz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam2dckzzzz.version('2.1-git')
sfosam2dckzzzz.synopsis('''sfosam2dckzzzz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam2dckzzzz']=sfosam2dckzzzz

sfosam3dckxx = rsf.doc.rsfprog('sfosam3dckxx','user/junyan/Mosam3dckxx.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckxx.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckxx.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckxx.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckxx.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckxx.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckxx.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckxx.version('2.1-git')
sfosam3dckxx.synopsis('''sfosam3dckxx < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckxx']=sfosam3dckxx

sfosam3dckxxxx = rsf.doc.rsfprog('sfosam3dckxxxx','user/junyan/Mosam3dckxxxx.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckxxxx.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckxxxx.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckxxxx.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckxxxx.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckxxxx.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckxxxx.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckxxxx.version('2.1-git')
sfosam3dckxxxx.synopsis('''sfosam3dckxxxx < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckxxxx']=sfosam3dckxxxx

sfosam3dckxxxy = rsf.doc.rsfprog('sfosam3dckxxxy','user/junyan/Mosam3dckxxxy.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckxxxy.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckxxxy.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckxxxy.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckxxxy.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckxxxy.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckxxxy.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckxxxy.version('2.1-git')
sfosam3dckxxxy.synopsis('''sfosam3dckxxxy < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckxxxy']=sfosam3dckxxxy

sfosam3dckxxxz = rsf.doc.rsfprog('sfosam3dckxxxz','user/junyan/Mosam3dckxxxz.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckxxxz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckxxxz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckxxxz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckxxxz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckxxxz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckxxxz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckxxxz.version('2.1-git')
sfosam3dckxxxz.synopsis('''sfosam3dckxxxz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckxxxz']=sfosam3dckxxxz

sfosam3dckxxyy = rsf.doc.rsfprog('sfosam3dckxxyy','user/junyan/Mosam3dckxxyy.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckxxyy.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckxxyy.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckxxyy.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckxxyy.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckxxyy.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckxxyy.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckxxyy.version('2.1-git')
sfosam3dckxxyy.synopsis('''sfosam3dckxxyy < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckxxyy']=sfosam3dckxxyy

sfosam3dckxxyz = rsf.doc.rsfprog('sfosam3dckxxyz','user/junyan/Mosam3dckxxyz.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckxxyz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckxxyz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckxxyz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckxxyz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckxxyz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckxxyz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckxxyz.version('2.1-git')
sfosam3dckxxyz.synopsis('''sfosam3dckxxyz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckxxyz']=sfosam3dckxxyz

sfosam3dckxy = rsf.doc.rsfprog('sfosam3dckxy','user/junyan/Mosam3dckxy.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckxy.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckxy.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckxy.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckxy.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckxy.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckxy.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckxy.version('2.1-git')
sfosam3dckxy.synopsis('''sfosam3dckxy < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckxy']=sfosam3dckxy

sfosam3dckxyyy = rsf.doc.rsfprog('sfosam3dckxyyy','user/junyan/Mosam3dckxyyy.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckxyyy.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckxyyy.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckxyyy.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckxyyy.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckxyyy.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckxyyy.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckxyyy.version('2.1-git')
sfosam3dckxyyy.synopsis('''sfosam3dckxyyy < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckxyyy']=sfosam3dckxyyy

sfosam3dckxyyz = rsf.doc.rsfprog('sfosam3dckxyyz','user/junyan/Mosam3dckxyyz.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckxyyz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckxyyz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckxyyz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckxyyz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckxyyz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckxyyz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckxyyz.version('2.1-git')
sfosam3dckxyyz.synopsis('''sfosam3dckxyyz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckxyyz']=sfosam3dckxyyz

sfosam3dckxyzz = rsf.doc.rsfprog('sfosam3dckxyzz','user/junyan/Mosam3dckxyzz.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckxyzz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckxyzz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckxyzz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckxyzz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckxyzz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckxyzz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckxyzz.version('2.1-git')
sfosam3dckxyzz.synopsis('''sfosam3dckxyzz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckxyzz']=sfosam3dckxyzz

sfosam3dckxz = rsf.doc.rsfprog('sfosam3dckxz','user/junyan/Mosam3dckxz.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckxz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckxz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckxz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckxz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckxz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckxz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckxz.version('2.1-git')
sfosam3dckxz.synopsis('''sfosam3dckxz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckxz']=sfosam3dckxz

sfosam3dckxzzz = rsf.doc.rsfprog('sfosam3dckxzzz','user/junyan/Mosam3dckxzzz.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckxzzz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckxzzz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckxzzz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckxzzz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckxzzz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckxzzz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckxzzz.version('2.1-git')
sfosam3dckxzzz.synopsis('''sfosam3dckxzzz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckxzzz']=sfosam3dckxzzz

sfosam3dckyy = rsf.doc.rsfprog('sfosam3dckyy','user/junyan/Mosam3dckyy.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckyy.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckyy.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckyy.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckyy.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckyy.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckyy.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckyy.version('2.1-git')
sfosam3dckyy.synopsis('''sfosam3dckyy < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckyy']=sfosam3dckyy

sfosam3dckyyyy = rsf.doc.rsfprog('sfosam3dckyyyy','user/junyan/Mosam3dckyyyy.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckyyyy.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckyyyy.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckyyyy.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckyyyy.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckyyyy.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckyyyy.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckyyyy.version('2.1-git')
sfosam3dckyyyy.synopsis('''sfosam3dckyyyy < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckyyyy']=sfosam3dckyyyy

sfosam3dckyyyz = rsf.doc.rsfprog('sfosam3dckyyyz','user/junyan/Mosam3dckyyyz.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckyyyz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckyyyz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckyyyz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckyyyz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckyyyz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckyyyz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckyyyz.version('2.1-git')
sfosam3dckyyyz.synopsis('''sfosam3dckyyyz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckyyyz']=sfosam3dckyyyz

sfosam3dckyyzz = rsf.doc.rsfprog('sfosam3dckyyzz','user/junyan/Mosam3dckyyzz.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckyyzz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckyyzz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckyyzz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckyyzz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckyyzz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckyyzz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckyyzz.version('2.1-git')
sfosam3dckyyzz.synopsis('''sfosam3dckyyzz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckyyzz']=sfosam3dckyyzz

sfosam3dckyz = rsf.doc.rsfprog('sfosam3dckyz','user/junyan/Mosam3dckyz.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckyz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckyz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckyz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckyz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckyz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckyz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckyz.version('2.1-git')
sfosam3dckyz.synopsis('''sfosam3dckyz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckyz']=sfosam3dckyz

sfosam3dckyzzz = rsf.doc.rsfprog('sfosam3dckyzzz','user/junyan/Mosam3dckyzzz.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckyzzz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckyzzz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckyzzz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckyzzz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckyzzz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckyzzz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckyzzz.version('2.1-git')
sfosam3dckyzzz.synopsis('''sfosam3dckyzzz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckyzzz']=sfosam3dckyzzz

sfosam3dckzz = rsf.doc.rsfprog('sfosam3dckzz','user/junyan/Mosam3dckzz.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckzz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckzz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckzz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckzz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckzz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckzz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckzz.version('2.1-git')
sfosam3dckzz.synopsis('''sfosam3dckzz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckzz']=sfosam3dckzz

sfosam3dckzzzz = rsf.doc.rsfprog('sfosam3dckzzzz','user/junyan/Mosam3dckzzzz.cc','''Lowrank decomposition for 3-D transversely isotropic wave propagation. ''')
sfosam3dckzzzz.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfosam3dckzzzz.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfosam3dckzzzz.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfosam3dckzzzz.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfosam3dckzzzz.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfosam3dckzzzz.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfosam3dckzzzz.version('2.1-git')
sfosam3dckzzzz.synopsis('''sfosam3dckzzzz < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfosam3dckzzzz']=sfosam3dckzzzz

