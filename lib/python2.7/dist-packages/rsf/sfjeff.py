import rsf.doc

sfnorm2 = rsf.doc.rsfprog('sfnorm2','user/jeff/Mnorm2.c','''Computes square of L-2 norm in double precision.''')
sfnorm2.version('2.1-git')
sfnorm2.synopsis('''sfnorm2 < in.rsf''','''''')
rsf.doc.progs['sfnorm2']=sfnorm2

sfreciprocity = rsf.doc.rsfprog('sfreciprocity','user/jeff/Mreciprocity.c','''Create a dipping layer model for HTI testing purposes.  Has fixed velocity structure, but can change dip of layer and degree of anisotropy.''')
sfreciprocity.version('2.1-git')
sfreciprocity.synopsis('''sfreciprocity < Fin.rsf > Fout.rsf''','''''')
rsf.doc.progs['sfreciprocity']=sfreciprocity

sfaxplusy = rsf.doc.rsfprog('sfaxplusy','user/jeff/Maxplusy.c','''Computes a*x + y, where x and y are datasets, and a is scalar''')
sfaxplusy.par('y',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfaxplusy.par('afile',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfaxplusy.par('a',rsf.doc.rsfpar('double','1','','''Scaling factor '''))
sfaxplusy.par('verb',rsf.doc.rsfpar('bool','n','','''Verbosity flag '''))
sfaxplusy.version('2.1-git')
sfaxplusy.synopsis('''sfaxplusy < in.rsf y=yfile.rsf > out.rsf afile=fa.rsf a=1 verb=n''','''x and y are floats or sf_complex, single precision
x is the stdin
a is double precision
Computations are done in double precision. ''')
rsf.doc.progs['sfaxplusy']=sfaxplusy

sfadjgradient2d = rsf.doc.rsfprog('sfadjgradient2d','user/jeff/Madjgradient2d.c','''Gradient adjoint-state calculation for image-domain WET ''')
sfadjgradient2d.par('xig',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfadjgradient2d.par('swf',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfadjgradient2d.par('rwf',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfadjgradient2d.par('nxtap',rsf.doc.rsfpar('int','40','','''TAPER size '''))
sfadjgradient2d.par('verbose',rsf.doc.rsfpar('bool','n','','''VERBOSITY flag '''))
sfadjgradient2d.version('2.1-git')
sfadjgradient2d.synopsis('''sfadjgradient2d < Fvel.rsf xig=Fxig.rsf swf=Fswf.rsf rwf=Frwf.rsf > Fgrd.rsf nxtap=40 verbose=n''','''''')
rsf.doc.progs['sfadjgradient2d']=sfadjgradient2d

sfadjgradient2d_coupled = rsf.doc.rsfprog('sfadjgradient2d_coupled','user/jeff/Madjgradient2d_coupled.c','''Gradient adjoint-state calculation for image-domain WET ''')
sfadjgradient2d_coupled.par('xig1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfadjgradient2d_coupled.par('us1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfadjgradient2d_coupled.par('ur1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfadjgradient2d_coupled.par('vel2',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfadjgradient2d_coupled.par('xig2',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfadjgradient2d_coupled.par('us2',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfadjgradient2d_coupled.par('ur2',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfadjgradient2d_coupled.par('gr2',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfadjgradient2d_coupled.par('nxtap',rsf.doc.rsfpar('int','40','','''TAPER size '''))
sfadjgradient2d_coupled.par('verbose',rsf.doc.rsfpar('bool','n','','''VERBOSITY flag '''))
sfadjgradient2d_coupled.version('2.1-git')
sfadjgradient2d_coupled.synopsis('''sfadjgradient2d_coupled < Fvel1.rsf xig1=Fxig1.rsf us1=Fus1.rsf ur1=Fur1.rsf > Fgr1.rsf vel2=Fvel2.rsf xig2=Fxig2.rsf us2=Fus2.rsf ur2=Fur2.rsf gr2=Fgr2.rsf nxtap=40 verbose=n''','''''')
rsf.doc.progs['sfadjgradient2d_coupled']=sfadjgradient2d_coupled

sfwem2d_iso = rsf.doc.rsfprog('sfwem2d_iso','user/jeff/Mwem2d_iso.c','''2D ISOTROPIC wave-equation finite-difference migration ''')
sfwem2d_iso.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwem2d_iso.par('swf',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwem2d_iso.par('rwf',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwem2d_iso.par('swfout',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwem2d_iso.par('rwfout',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwem2d_iso.par('nxtap',rsf.doc.rsfpar('int','40','','''TAPER size '''))
sfwem2d_iso.par('verbose',rsf.doc.rsfpar('bool','n','','''VERBOSITY flag '''))
sfwem2d_iso.par('adj',rsf.doc.rsfpar('bool','y','','''ADJOINT flag '''))
sfwem2d_iso.par('add',rsf.doc.rsfpar('bool','n','',''''''))
sfwem2d_iso.par('wantwf',rsf.doc.rsfpar('bool','n','','''Want output wavefields '''))
sfwem2d_iso.par('nh',rsf.doc.rsfpar('int','0','',''''''))
sfwem2d_iso.version('2.1-git')
sfwem2d_iso.synopsis('''sfwem2d_iso vel=Fvel.rsf < Fxig.rsf swf=Fswf.rsf rwf=Frwf.rsf > Fxigo.rsf swfout=Fswfo.rsf rwfout=Frwfo.rsf nxtap=40 verbose=n adj=y add=n wantwf=n nh=0''','''''')
rsf.doc.progs['sfwem2d_iso']=sfwem2d_iso

sfmodelcreate = rsf.doc.rsfprog('sfmodelcreate','user/jeff/Mmodelcreate.c','''Create a dipping layer model for HTI testing purposes.  Has fixed velocity structure, but can change dip of layer and degree of anisotropy.''')
sfmodelcreate.par('ompchunk',rsf.doc.rsfpar('int','1','','''set the omp chunk size '''))
sfmodelcreate.par('verb',rsf.doc.rsfpar('bool','y','','''verbose or note (Y/n) '''))
sfmodelcreate.par('aniso',rsf.doc.rsfpar('bool','n','','''flag (y/N) for anisotropic layer #2 '''))
sfmodelcreate.par('allaniso',rsf.doc.rsfpar('bool','n','','''flag (y/N) whether entire model is anisotropic '''))
sfmodelcreate.par('ein',rsf.doc.rsfpar('float','.1','','''epsilon anisotropy parameter '''))
sfmodelcreate.par('din',rsf.doc.rsfpar('float','.1','','''delta anisotropy parameter '''))
sfmodelcreate.par('gin',rsf.doc.rsfpar('float','.2','','''gamma anisotropy parameter '''))
sfmodelcreate.par('rho',rsf.doc.rsfpar('float','2.','','''Background Density model '''))
sfmodelcreate.par('d',rsf.doc.rsfpar('float','n3/6.','','''Parameter in dipping plane: ax+by+cz+d=0 '''))
sfmodelcreate.par('a',rsf.doc.rsfpar('float','1','','''Parameter in dipping plane: ax+by+cz+d=0 '''))
sfmodelcreate.par('b',rsf.doc.rsfpar('float','1','','''Parameter in dipping plane: ax+by+cz+d=0 '''))
sfmodelcreate.version('2.1-git')
sfmodelcreate.synopsis('''sfmodelcreate < Fu.rsf > Fc.rsf ompchunk=1 verb=y aniso=n allaniso=n ein=.1 din=.1 gin=.2 rho=2. d=n3/6. a=1 b=1''','''''')
rsf.doc.progs['sfmodelcreate']=sfmodelcreate

sfewefd2d_omp = rsf.doc.rsfprog('sfewefd2d_omp','user/jeff/Mewefd2d_omp.c','''2D elastic time-domain FD modeling ''')
sfewefd2d_omp.par('ccc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd2d_omp.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd2d_omp.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd2d_omp.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd2d_omp.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfewefd2d_omp.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfewefd2d_omp.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sfewefd2d_omp.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sfewefd2d_omp.par('ssou',rsf.doc.rsfpar('bool','n','','''stress source '''))
sfewefd2d_omp.par('dabc',rsf.doc.rsfpar('bool','n','','''absorbing BC '''))
sfewefd2d_omp.par('opot',rsf.doc.rsfpar('bool','n','','''output potentials '''))
sfewefd2d_omp.par('nbell',rsf.doc.rsfpar('int','5','','''bell size '''))
sfewefd2d_omp.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sfewefd2d_omp.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfewefd2d_omp.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfewefd2d_omp.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfewefd2d_omp.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfewefd2d_omp.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfewefd2d_omp.version('2.1-git')
sfewefd2d_omp.synopsis('''sfewefd2d_omp < Fwav.rsf ccc=Fccc.rsf den=Fden.rsf sou=Fsou.rsf rec=Frec.rsf > Fdat.rsf wfl=Fwfl.rsf verb=n snap=n free=n ssou=n dabc=n opot=n nbell=5 jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) oqz=sf_o(az) oqx=sf_o(ax)''','''''')
rsf.doc.progs['sfewefd2d_omp']=sfewefd2d_omp

sfewefd3d_omp = rsf.doc.rsfprog('sfewefd3d_omp','user/jeff/Mewefd3d_omp.c','''3D elastic time-domain FD modeling ''')
sfewefd3d_omp.par('ccc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd3d_omp.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd3d_omp.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd3d_omp.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd3d_omp.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfewefd3d_omp.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfewefd3d_omp.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sfewefd3d_omp.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sfewefd3d_omp.par('ssou',rsf.doc.rsfpar('bool','n','','''stress source '''))
sfewefd3d_omp.par('dabc',rsf.doc.rsfpar('bool','n','','''absorbing BC '''))
sfewefd3d_omp.par('opot',rsf.doc.rsfpar('bool','n','','''output potentials '''))
sfewefd3d_omp.par('nbell',rsf.doc.rsfpar('int','5','','''bell size '''))
sfewefd3d_omp.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sfewefd3d_omp.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfewefd3d_omp.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfewefd3d_omp.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfewefd3d_omp.par('nqy',rsf.doc.rsfpar('int','sf_n(ay)','',''''''))
sfewefd3d_omp.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfewefd3d_omp.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfewefd3d_omp.par('oqy',rsf.doc.rsfpar('float','sf_o(ay)','',''''''))
sfewefd3d_omp.version('2.1-git')
sfewefd3d_omp.synopsis('''sfewefd3d_omp < Fwav.rsf ccc=Fccc.rsf den=Fden.rsf sou=Fsou.rsf rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n snap=n free=n ssou=n dabc=n opot=n nbell=5 jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) nqy=sf_n(ay) oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)''','''''')
rsf.doc.progs['sfewefd3d_omp']=sfewefd3d_omp

sfstf2telewfld = rsf.doc.rsfprog('sfstf2telewfld','user/jeff/Mstf2telewfld.f90','''None''')
sfstf2telewfld.par('stf',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfstf2telewfld.par('old',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfstf2telewfld.par('p1',rsf.doc.rsfpar('','0.','',''''''))
sfstf2telewfld.par('z0',rsf.doc.rsfpar('','40.','',''''''))
sfstf2telewfld.par('v0',rsf.doc.rsfpar('','8.0','',''''''))
sfstf2telewfld.par('dt',rsf.doc.rsfpar('','0.001','',''''''))
sfstf2telewfld.version('2.1-git')
sfstf2telewfld.synopsis('''sfstf2telewfld < infile.rsf stf=stffile.rsf > outfile.rsf old=oldfile.rsf p1=0. z0=40. v0=8.0 dt=0.001''','''''')
rsf.doc.progs['sfstf2telewfld']=sfstf2telewfld

sfrfspecdiv = rsf.doc.rsfprog('sfrfspecdiv','user/jeff/Mrfspecdiv.f90','''None''')
sfrfspecdiv.par('file1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfrfspecdiv.par('a',rsf.doc.rsfpar('','1.25','',''''''))
sfrfspecdiv.par('c',rsf.doc.rsfpar('','0.01','',''''''))
sfrfspecdiv.par('pd',rsf.doc.rsfpar('','10.','','''phase delay'''))
sfrfspecdiv.version('2.1-git')
sfrfspecdiv.synopsis('''sfrfspecdiv < infile.rsf file1=file1.rsf > outfile.rsf a=1.25 c=0.01 pd=10.''','''''')
rsf.doc.progs['sfrfspecdiv']=sfrfspecdiv

sftracealign = rsf.doc.rsfprog('sftracealign','user/jeff/Mtracealign.f90','''None''')
sftracealign.par('monitor',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftracealign.par('times',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sftracealign.par('maxshift',rsf.doc.rsfpar('','','','''Maximum allowed time shift'''))
sftracealign.par('nlen',rsf.doc.rsfpar('','','','''Window length of shift vector (in samples)'''))
sftracealign.par('vel',rsf.doc.rsfpar('','1500.','','''Rupture speed for linear shift'''))
sftracealign.version('2.1-git')
sftracealign.synopsis('''sftracealign < infile.rsf monitor=monitorfile.rsf > outfile.rsf times=timefile.rsf maxshift= nlen= vel=1500.''','''''')
rsf.doc.progs['sftracealign']=sftracealign

sfrfccp = rsf.doc.rsfprog('sfrfccp','user/jeff/Mrfccp.f90','''None''')
sfrfccp.par('vp',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfrfccp.par('vs',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfrfccp.version('2.1-git')
sfrfccp.synopsis('''sfrfccp < infile.rsf vp=vpfile.rsf vs=vsfile.rsf > outfile.rsf''','''''')
rsf.doc.progs['sfrfccp']=sfrfccp

sfMCCCnew = rsf.doc.rsfprog('sfMCCCnew','user/jeff/MMCCCnew.f90','''None''')
sfMCCCnew.par('times',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfMCCCnew.par('maxshift',rsf.doc.rsfpar('','','','''Maximum allowed time shift'''))
sfMCCCnew.par('nlen',rsf.doc.rsfpar('','','','''Window length of shift vector (in samples)'''))
sfMCCCnew.par('vel',rsf.doc.rsfpar('','1500.','','''Rupture speed for linear shift'''))
sfMCCCnew.version('2.1-git')
sfMCCCnew.synopsis('''sfMCCCnew < infile.rsf > outfile.rsf times=timefile.rsf maxshift= nlen= vel=1500.''','''''')
rsf.doc.progs['sfMCCCnew']=sfMCCCnew

sfrwe2d = rsf.doc.rsfprog('sfrwe2d','user/jeff/Mrwe2d.f90','''None''')
sfrwe2d.par('rwf',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfrwe2d.par('swf',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfrwe2d.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfrwe2d.par('rays',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfrwe2d.par('image',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfrwe2d.par('Rimage',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfrwe2d.par('forward',rsf.doc.rsfpar('','0.','','''Forward scattering option'''))
sfrwe2d.par('nref',rsf.doc.rsfpar('','256','','''starting number of points for calculating reference velocities'''))
sfrwe2d.par('verbose',rsf.doc.rsfpar('','n','','''level of verbosity'''))
sfrwe2d.par('kinematic',rsf.doc.rsfpar('','y','','''Kinematic approximation'''))
sfrwe2d.par('norm',rsf.doc.rsfpar('','1','','''Whether (1) or not (0) to normalize by gnorm'''))
sfrwe2d.par('nsx',rsf.doc.rsfpar('','3','',''''''))
sfrwe2d.par('nsz',rsf.doc.rsfpar('','3','',''''''))
sfrwe2d.par('xmin',rsf.doc.rsfpar('','ax%o','','''call from_par("zmin",zmin,az%o)'''))
sfrwe2d.par('xmax',rsf.doc.rsfpar('','(ax%n-1','',''''''))
sfrwe2d.par('zmax',rsf.doc.rsfpar('','(az%n-1','',''''''))
sfrwe2d.par('dxx',rsf.doc.rsfpar('','ax%d','','''call from_par("dzz",dzz,az%d)'''))
sfrwe2d.version('2.1-git')
sfrwe2d.synopsis('''sfrwe2d rwf=rwfile.rsf swf=swfile.rsf vel=velfile.rsf rays=rays.rsf image=imfile.rsf Rimage=Rimage.rsf forward=0. nref=256 verbose=n kinematic=y norm=1 nsx=3 nsz=3 xmin=ax%o xmax=(ax%n-1 zmax=(az%n-1 dxx=ax%d''','''''')
rsf.doc.progs['sfrwe2d']=sfrwe2d

sftelemig2d = rsf.doc.rsfprog('sftelemig2d','user/jeff/Mtelemig2d.f90','''None''')
sftelemig2d.par('Svel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftelemig2d.par('rwf',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftelemig2d.par('swf',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftelemig2d.par('cig',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sftelemig2d.par('nh',rsf.doc.rsfpar('','0','','''Number of subsurface offsets (between 1 and 128)'''))
sftelemig2d.par('source_norm',rsf.doc.rsfpar('','n','','''Normalize the image by the power of the SWF (T/F)'''))
sftelemig2d.par('verbose',rsf.doc.rsfpar('','n','','''Verbose (T/F)'''))
sftelemig2d.par('forward',rsf.doc.rsfpar('','n','','''Forward scattering (T/F)'''))
sftelemig2d.par('ntaper',rsf.doc.rsfpar('','40','','''Taper on the side boundaries (npts)'''))
sftelemig2d.par('eps',rsf.doc.rsfpar('','0.01','','''Taper on the side boundaries (npts)'''))
sftelemig2d.version('2.1-git')
sftelemig2d.synopsis('''sftelemig2d < infile.rsf Svel=Svelfile.rsf rwf=rwffile.rsf swf=swffile.rsf > outfile.rsf cig=cigfile.rsf nh=0 source_norm=n verbose=n forward=n ntaper=40 eps=0.01''','''''')
rsf.doc.progs['sftelemig2d']=sftelemig2d

sfrec2ps = rsf.doc.rsfprog('sfrec2ps','user/jeff/Mrec2ps.f90','''None''')
sfrec2ps.par('alpha',rsf.doc.rsfpar('','6.2','','''P-wave Velocity at surface'''))
sfrec2ps.par('beta',rsf.doc.rsfpar('','3.5','','''S-wave velocity at surface'''))
sfrec2ps.par('irot',rsf.doc.rsfpar('','0.','','''Rotation of array w.r.t. 1st axis'''))
sfrec2ps.par('adj',rsf.doc.rsfpar('','y','',''''''))
sfrec2ps.version('2.1-git')
sfrec2ps.synopsis('''sfrec2ps < infile.rsf > outfile.rsf alpha=6.2 beta=3.5 irot=0. adj=y''','''''')
rsf.doc.progs['sfrec2ps']=sfrec2ps

sfbackus = rsf.doc.rsfprog('sfbackus','user/jeff/Mbackus.f90','''None''')
sfbackus.par('navg',rsf.doc.rsfpar('','201','','''Number of samples to average over'''))
sfbackus.par('all',rsf.doc.rsfpar('','n','','''Print extra information'''))
sfbackus.par('ang',rsf.doc.rsfpar('','30.','','''Input angle'''))
sfbackus.version('2.1-git')
sfbackus.synopsis('''sfbackus < infile.rsf > outfile.rsf navg=201 all=n ang=30.''','''''')
rsf.doc.progs['sfbackus']=sfbackus

