import rsf.doc

sfoff2abs = rsf.doc.rsfprog('sfoff2abs','user/psava/Moff2abs.c','''Transform vector-offset to absolute-offset ''')
sfoff2abs.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfoff2abs.par('nw',rsf.doc.rsfpar('int','4','','''spline order '''))
sfoff2abs.par('nh',rsf.doc.rsfpar('int','nhx + ohx/dhx','',''''''))
sfoff2abs.par('oh',rsf.doc.rsfpar('float','0','',''''''))
sfoff2abs.par('dh',rsf.doc.rsfpar('float','dhx','',''''''))
sfoff2abs.version('2.1-git')
sfoff2abs.synopsis('''sfoff2abs < Fd.rsf > Fm.rsf verb=n nw=4 nh=nhx + ohx/dhx oh=0 dh=dhx''','''h = sqrt(hx^2+hy^2+hz^2)
pcs 2005 
''')
rsf.doc.progs['sfoff2abs']=sfoff2abs

sfoff2abs3 = rsf.doc.rsfprog('sfoff2abs3','user/psava/Moff2abs3.c','''Transform vector-offset to absolute-offset ''')
sfoff2abs3.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfoff2abs3.par('nw',rsf.doc.rsfpar('int','4','','''spline order '''))
sfoff2abs3.par('nh',rsf.doc.rsfpar('int','nhx + ohx/dhx','',''''''))
sfoff2abs3.par('oh',rsf.doc.rsfpar('float','0','',''''''))
sfoff2abs3.par('dh',rsf.doc.rsfpar('float','dhx','',''''''))
sfoff2abs3.par('na',rsf.doc.rsfpar('int','180','',''''''))
sfoff2abs3.par('oa',rsf.doc.rsfpar('float','0.','',''''''))
sfoff2abs3.par('da',rsf.doc.rsfpar('float','2.','',''''''))
sfoff2abs3.par('nb',rsf.doc.rsfpar('int','180','',''''''))
sfoff2abs3.par('ob',rsf.doc.rsfpar('float','0.','',''''''))
sfoff2abs3.par('db',rsf.doc.rsfpar('float','2.','',''''''))
sfoff2abs3.version('2.1-git')
sfoff2abs3.synopsis('''sfoff2abs3 < Fm.rsf > Fd.rsf verb=n nw=4 nh=nhx + ohx/dhx oh=0 dh=dhx na=180 oa=0. da=2. nb=180 ob=0. db=2.''','''h = sqrt(hx^2+hy^2+hz^2)
pcs 2005 
''')
rsf.doc.progs['sfoff2abs3']=sfoff2abs3

sficor = rsf.doc.rsfprog('sficor','user/psava/Micor.c','''Interferometric cross-correlation of time series (zero-lag output) ''')
sficor.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sficor.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sficor.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sficor.par('nhz',rsf.doc.rsfpar('int','0','',''''''))
sficor.par('nhx',rsf.doc.rsfpar('int','0','',''''''))
sficor.par('nht',rsf.doc.rsfpar('int','1','',''''''))
sficor.version('2.1-git')
sficor.synopsis('''sficor < Fs.rsf ur=Fr.rsf > Fi.rsf ompchunk=1 verb=n nhz=0 nhx=0 nht=1''','''''')
rsf.doc.progs['sficor']=sficor

sfxcor2d = rsf.doc.rsfprog('sfxcor2d','user/psava/Mxcor2d.c','''OpenMP time- or freq-domain cross-correlation on axes 1,2,3 ''')
sfxcor2d.par('uu',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfxcor2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfxcor2d.par('axis',rsf.doc.rsfpar('int','2','','''stack axis '''))
sfxcor2d.par('nbuf',rsf.doc.rsfpar('int','1','','''buffer size '''))
sfxcor2d.version('2.1-git')
sfxcor2d.synopsis('''sfxcor2d < Fs.rsf uu=Fr.rsf > Fi.rsf verb=n axis=2 nbuf=1''','''''')
rsf.doc.progs['sfxcor2d']=sfxcor2d

sftcor = rsf.doc.rsfprog('sftcor','user/psava/Mtcor.c','''Interferometric cross-correlation of time series (zero-lag output) ''')
sftcor.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftcor.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sftcor.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sftcor.par('nhz',rsf.doc.rsfpar('int','0','',''''''))
sftcor.par('nhx',rsf.doc.rsfpar('int','0','',''''''))
sftcor.par('nht',rsf.doc.rsfpar('int','1','',''''''))
sftcor.version('2.1-git')
sftcor.synopsis('''sftcor < Fs.rsf ur=Fr.rsf > Fi.rsf ompchunk=1 verb=n nhz=0 nhx=0 nht=1''','''''')
rsf.doc.progs['sftcor']=sftcor

sfucor = rsf.doc.rsfprog('sfucor','user/psava/Mucor.c','''Interferometric cross-correlation of time series (zero-lag output) ''')
sfucor.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfucor.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfucor.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfucor.par('nhz',rsf.doc.rsfpar('int','0','',''''''))
sfucor.par('nhx',rsf.doc.rsfpar('int','0','',''''''))
sfucor.par('nht',rsf.doc.rsfpar('int','1','',''''''))
sfucor.version('2.1-git')
sfucor.synopsis('''sfucor < Fs.rsf ur=Fr.rsf > Fi.rsf ompchunk=1 verb=n nhz=0 nhx=0 nht=1''','''''')
rsf.doc.progs['sfucor']=sfucor

sfcicold2d = rsf.doc.rsfprog('sfcicold2d','user/psava/Mcicold2d.c','''Conventional IC 2D ''')
sfcicold2d.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcicold2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfcicold2d.par('isreversed',rsf.doc.rsfpar('bool','n','','''received wavefield '''))
sfcicold2d.version('2.1-git')
sfcicold2d.synopsis('''sfcicold2d < Fs.rsf ur=Fr.rsf > Fi.rsf verb=n isreversed=n''','''''')
rsf.doc.progs['sfcicold2d']=sfcicold2d

sfeicold2d = rsf.doc.rsfprog('sfeicold2d','user/psava/Meicold2d.c','''Extended IC 3D ''')
sfeicold2d.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfeicold2d.par('cc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfeicold2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfeicold2d.par('isreversed',rsf.doc.rsfpar('bool','n','','''reversed rec wfld? '''))
sfeicold2d.par('nhz',rsf.doc.rsfpar('int','0','',''''''))
sfeicold2d.par('nhx',rsf.doc.rsfpar('int','0','',''''''))
sfeicold2d.par('nht',rsf.doc.rsfpar('int','0','',''''''))
sfeicold2d.par('gaus',rsf.doc.rsfpar('bool','n','','''Gaussian taper flag '''))
sfeicold2d.par('gsx',rsf.doc.rsfpar('float','nhx*sf_d(ax)','',''''''))
sfeicold2d.par('gsz',rsf.doc.rsfpar('float','nhz*sf_d(az)','',''''''))
sfeicold2d.par('gst',rsf.doc.rsfpar('float','nht*sf_d(at)','',''''''))
sfeicold2d.version('2.1-git')
sfeicold2d.synopsis('''sfeicold2d < Fs.rsf ur=Fr.rsf cc=Fc.rsf > Fi.rsf verb=n isreversed=n nhz=0 nhx=0 nht=0 gaus=n gsx=nhx*sf_d(ax) gsz=nhz*sf_d(az) gst=nht*sf_d(at)''','''''')
rsf.doc.progs['sfeicold2d']=sfeicold2d

sflaps2d = rsf.doc.rsfprog('sflaps2d','user/psava/Mlaps2d.c','''OpenMP lagged-products in the time-domain ''')
sflaps2d.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflaps2d.par('cc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflaps2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sflaps2d.par('buf',rsf.doc.rsfpar('bool','n','',''''''))
sflaps2d.par('nhz',rsf.doc.rsfpar('int','0','','''number of lags on the z axis '''))
sflaps2d.par('nhx',rsf.doc.rsfpar('int','0','','''number of lags on the x axis '''))
sflaps2d.par('nht',rsf.doc.rsfpar('int','0','','''number of lags on the t axis '''))
sflaps2d.version('2.1-git')
sflaps2d.synopsis('''sflaps2d < Fs.rsf ur=Fr.rsf cc=Fc.rsf > Fi.rsf verb=n buf=n nhz=0 nhx=0 nht=0''','''''')
rsf.doc.progs['sflaps2d']=sflaps2d

sflaps3d = rsf.doc.rsfprog('sflaps3d','user/psava/Mlaps3d.c','''OpenMP lagged-products in the time-domain ''')
sflaps3d.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflaps3d.par('cc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflaps3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sflaps3d.par('buf',rsf.doc.rsfpar('bool','n','',''''''))
sflaps3d.par('nhx',rsf.doc.rsfpar('int','0','','''number of lags on the x axis '''))
sflaps3d.par('nhy',rsf.doc.rsfpar('int','0','','''number of lags on the y axis '''))
sflaps3d.par('nhz',rsf.doc.rsfpar('int','0','','''number of lags on the z axis '''))
sflaps3d.par('nht',rsf.doc.rsfpar('int','0','','''number of lags on the t axis '''))
sflaps3d.version('2.1-git')
sflaps3d.synopsis('''sflaps3d < Fs.rsf ur=Fr.rsf cc=Fc.rsf > Fi.rsf verb=n buf=n nhx=0 nhy=0 nhz=0 nht=0''','''''')
rsf.doc.progs['sflaps3d']=sflaps3d

sfic = rsf.doc.rsfprog('sfic','user/psava/Mic.c','''Imaging condition ''')
sfic.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfic.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfic.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfic.par('nbuf',rsf.doc.rsfpar('int','1','','''buffer size '''))
sfic.par('version',rsf.doc.rsfpar('int','0','','''I.C. version (see paper) '''))
sfic.par('eps',rsf.doc.rsfpar('float','1e-6','','''epsilon '''))
sfic.version('2.1-git')
sfic.synopsis('''sfic < Fs.rsf ur=Fr.rsf > Fi.rsf ompchunk=1 verb=n nbuf=1 version=0 eps=1e-6''','''''')
rsf.doc.progs['sfic']=sfic

sfsic = rsf.doc.rsfprog('sfsic','user/psava/Msic.c','''Local slant stacks I.C. ''')
sfsic.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsic.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfsic.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfsic.par('nbuf',rsf.doc.rsfpar('int','1','','''buffer size '''))
sfsic.par('sig',rsf.doc.rsfpar('float','1.0','',''''''))
sfsic.par('na',rsf.doc.rsfpar('int','1','',''''''))
sfsic.par('oa',rsf.doc.rsfpar('float','0.0','',''''''))
sfsic.par('da',rsf.doc.rsfpar('float','1.0','',''''''))
sfsic.par('nl',rsf.doc.rsfpar('int','1','',''''''))
sfsic.par('dl',rsf.doc.rsfpar('float','1.','',''''''))
sfsic.par('ol',rsf.doc.rsfpar('float','0.','',''''''))
sfsic.version('2.1-git')
sfsic.synopsis('''sfsic < Fs.rsf ur=Fr.rsf > Fi.rsf ompchunk=1 verb=n nbuf=1 sig=1.0 na=1 oa=0.0 da=1.0 nl=1 dl=1. ol=0.''','''''')
rsf.doc.progs['sfsic']=sfsic

sfsic3d = rsf.doc.rsfprog('sfsic3d','user/psava/Msic3d.c','''Local slant stacks I.C. ''')
sfsic3d.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsic3d.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfsic3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfsic3d.par('stack',rsf.doc.rsfpar('bool','n','',''''''))
sfsic3d.par('sig',rsf.doc.rsfpar('float','1.0','',''''''))
sfsic3d.par('nanga',rsf.doc.rsfpar('int','1','',''''''))
sfsic3d.par('oanga',rsf.doc.rsfpar('float','0.0','',''''''))
sfsic3d.par('danga',rsf.doc.rsfpar('float','1.0','',''''''))
sfsic3d.par('nangb',rsf.doc.rsfpar('int','1','',''''''))
sfsic3d.par('oangb',rsf.doc.rsfpar('float','0.0','',''''''))
sfsic3d.par('dangb',rsf.doc.rsfpar('float','1.0','',''''''))
sfsic3d.par('nl',rsf.doc.rsfpar('int','1','',''''''))
sfsic3d.par('dl',rsf.doc.rsfpar('float','1.','',''''''))
sfsic3d.par('ol',rsf.doc.rsfpar('float','0.','',''''''))
sfsic3d.version('2.1-git')
sfsic3d.synopsis('''sfsic3d < Fs.rsf ur=Fr.rsf > Fi.rsf ompchunk=1 verb=n stack=n sig=1.0 nanga=1 oanga=0.0 danga=1.0 nangb=1 oangb=0.0 dangb=1.0 nl=1 dl=1. ol=0.''','''''')
rsf.doc.progs['sfsic3d']=sfsic3d

sflstk = rsf.doc.rsfprog('sflstk','user/psava/Mlstk.c','''Local slant stacks (2D) ''')
sflstk.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sflstk.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sflstk.par('sig',rsf.doc.rsfpar('float','1.0','',''''''))
sflstk.par('na',rsf.doc.rsfpar('int','1','',''''''))
sflstk.par('oa',rsf.doc.rsfpar('float','0.0','',''''''))
sflstk.par('da',rsf.doc.rsfpar('float','1.0','',''''''))
sflstk.par('nl',rsf.doc.rsfpar('int','0','',''''''))
sflstk.par('dl',rsf.doc.rsfpar('float','1.','',''''''))
sflstk.par('ol',rsf.doc.rsfpar('float','0.','',''''''))
sflstk.version('2.1-git')
sflstk.synopsis('''sflstk < Fi.rsf > Fo.rsf ompchunk=1 verb=n sig=1.0 na=1 oa=0.0 da=1.0 nl=0 dl=1. ol=0.''','''''')
rsf.doc.progs['sflstk']=sflstk

sfwigner = rsf.doc.rsfprog('sfwigner','user/psava/Mwigner.c','''Assymptotic Wigner distribution in space-time ''')
sfwigner.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfwigner.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfwigner.par('nh1',rsf.doc.rsfpar('int','0','',''''''))
sfwigner.par('nh2',rsf.doc.rsfpar('int','0','',''''''))
sfwigner.par('nh3',rsf.doc.rsfpar('int','0','',''''''))
sfwigner.par('wk',rsf.doc.rsfpar('float','0.0','',''''''))
sfwigner.version('2.1-git')
sfwigner.synopsis('''sfwigner < Fu.rsf > Fw.rsf ompchunk=1 verb=n nh1=0 nh2=0 nh3=0 wk=0.0''','''''')
rsf.doc.progs['sfwigner']=sfwigner

sfwdf = rsf.doc.rsfprog('sfwdf','user/psava/Mwdf.c','''Assymptotic Wigner distribution ''')
sfwdf.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfwdf.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfwdf.par('nh1',rsf.doc.rsfpar('int','0','',''''''))
sfwdf.par('nh2',rsf.doc.rsfpar('int','0','',''''''))
sfwdf.par('nh3',rsf.doc.rsfpar('int','0','',''''''))
sfwdf.version('2.1-git')
sfwdf.synopsis('''sfwdf < Fu.rsf > Fw.rsf ompchunk=1 verb=n nh1=0 nh2=0 nh3=0''','''''')
rsf.doc.progs['sfwdf']=sfwdf

sfsrmig3 = rsf.doc.rsfprog('sfsrmig3','user/psava/Msrmig3.c','''3-D S/R migration with extended SSF ''')
sfsrmig3.par('slo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsrmig3.par('sls',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsrmig3.par('rwf',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsrmig3.par('cig',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsrmig3.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfsrmig3.par('ompnth',rsf.doc.rsfpar('int','0','','''OpenMP available threads '''))
sfsrmig3.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity flag '''))
sfsrmig3.par('eps',rsf.doc.rsfpar('float','0.01','','''stability parameter '''))
sfsrmig3.par('twoway',rsf.doc.rsfpar('bool','n','','''two-way traveltime '''))
sfsrmig3.par('nrmax',rsf.doc.rsfpar('int','1','','''max number of refs '''))
sfsrmig3.par('dtmax',rsf.doc.rsfpar('float','0.004','','''max time error '''))
sfsrmig3.par('pmx',rsf.doc.rsfpar('int','0','','''padding on x '''))
sfsrmig3.par('pmy',rsf.doc.rsfpar('int','0','','''padding on y '''))
sfsrmig3.par('tmx',rsf.doc.rsfpar('int','0','','''taper on x   '''))
sfsrmig3.par('tmy',rsf.doc.rsfpar('int','0','','''taper on y   '''))
sfsrmig3.par('vpvs',rsf.doc.rsfpar('float','1.','','''Vp/Vs ratio '''))
sfsrmig3.par('hsym',rsf.doc.rsfpar('bool','n','',''''''))
sfsrmig3.par('nht',rsf.doc.rsfpar('int','1','',''''''))
sfsrmig3.par('oht',rsf.doc.rsfpar('float','0','',''''''))
sfsrmig3.par('dht',rsf.doc.rsfpar('float','0.1','',''''''))
sfsrmig3.par('nht',rsf.doc.rsfpar('int','1','',''''''))
sfsrmig3.par('oht',rsf.doc.rsfpar('float','0','',''''''))
sfsrmig3.par('dht',rsf.doc.rsfpar('float','0.1','',''''''))
sfsrmig3.par('hsym',rsf.doc.rsfpar('bool','n','',''''''))
sfsrmig3.par('nhh',rsf.doc.rsfpar('int','1','',''''''))
sfsrmig3.par('ohh',rsf.doc.rsfpar('float','0','',''''''))
sfsrmig3.par('dhh',rsf.doc.rsfpar('float','0.1','',''''''))
sfsrmig3.par('nha',rsf.doc.rsfpar('int','180','',''''''))
sfsrmig3.par('oha',rsf.doc.rsfpar('float','0','',''''''))
sfsrmig3.par('dha',rsf.doc.rsfpar('float','2.0','',''''''))
sfsrmig3.par('nhb',rsf.doc.rsfpar('int','180','',''''''))
sfsrmig3.par('ohb',rsf.doc.rsfpar('float','0','',''''''))
sfsrmig3.par('dhb',rsf.doc.rsfpar('float','2.0','',''''''))
sfsrmig3.par('sls',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfsrmig3.par('itype',rsf.doc.rsfpar('string ',desc='''imaging condition type
       o = zero lag (default)
       e = extended
       x = space-lags
       h = space-lags magnitude
       t = time-lag
    '''))
sfsrmig3.weblink('http://ahay.org/wiki/Guide_to_madagascar_programs#sfsrmig3')
sfsrmig3.version('2.1-git')
sfsrmig3.synopsis('''sfsrmig3 slo=Fs_s.rsf sls=Fs_r.rsf < Fw_s.rsf rwf=Fw_r.rsf > Fi.rsf cig=Fc.rsf ompchunk=1 ompnth=0 verb=y eps=0.01 twoway=n nrmax=1 dtmax=0.004 pmx=0 pmy=0 tmx=0 tmy=0 vpvs=1. hsym=n nht=1 oht=0 dht=0.1 nht=1 oht=0 dht=0.1 hsym=n nhh=1 ohh=0 dhh=0.1 nha=180 oha=0 dha=2.0 nhb=180 ohb=0 dhb=2.0 itype=''','''''')
rsf.doc.progs['sfsrmig3']=sfsrmig3

sfsrmod3 = rsf.doc.rsfprog('sfsrmod3','user/psava/Msrmod3.c','''3-D S/R modeling with extended split-step ''')
sfsrmod3.par('slo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsrmod3.par('sls',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsrmod3.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsrmod3.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfsrmod3.par('ompnth',rsf.doc.rsfpar('int','0','','''OpenMP available threads '''))
sfsrmod3.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity flag '''))
sfsrmod3.par('eps',rsf.doc.rsfpar('float','0.01','','''stability parameter '''))
sfsrmod3.par('nrmax',rsf.doc.rsfpar('int','1','','''maximum number of refs '''))
sfsrmod3.par('dtmax',rsf.doc.rsfpar('float','0.004','','''time error '''))
sfsrmod3.par('pmx',rsf.doc.rsfpar('int','0','','''padding on x '''))
sfsrmod3.par('pmy',rsf.doc.rsfpar('int','0','','''padding on y '''))
sfsrmod3.par('tmx',rsf.doc.rsfpar('int','0','','''taper on x   '''))
sfsrmod3.par('tmy',rsf.doc.rsfpar('int','0','','''taper on y   '''))
sfsrmod3.par('twoway',rsf.doc.rsfpar('bool','n','','''two-way traveltime '''))
sfsrmod3.par('sls',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfsrmod3.version('2.1-git')
sfsrmod3.synopsis('''sfsrmod3 slo=Fs_s.rsf sls=Fs_r.rsf < Fw_s.rsf > Fw_r.rsf ref=Fr.rsf ompchunk=1 ompnth=0 verb=y eps=0.01 nrmax=1 dtmax=0.004 pmx=0 pmy=0 tmx=0 tmy=0 twoway=n''','''''')
rsf.doc.progs['sfsrmod3']=sfsrmod3

sfzomig3 = rsf.doc.rsfprog('sfzomig3','user/psava/Mzomig3.c','''3-D zero-offset modeling/migration with extended SSF ''')
sfzomig3.par('slo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzomig3.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfzomig3.par('ompnth',rsf.doc.rsfpar('int','0','','''OpenMP available threads '''))
sfzomig3.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfzomig3.par('eps',rsf.doc.rsfpar('float','0.01','','''stability parameter '''))
sfzomig3.par('inv',rsf.doc.rsfpar('bool','n','','''y=modeling; n=migration '''))
sfzomig3.par('causal',rsf.doc.rsfpar('bool','n','','''y=causal; n=anti-causal '''))
sfzomig3.par('twoway',rsf.doc.rsfpar('bool','y','','''two-way traveltime '''))
sfzomig3.par('nrmax',rsf.doc.rsfpar('int','1','','''maximum references '''))
sfzomig3.par('dtmax',rsf.doc.rsfpar('float','0.004','','''time error '''))
sfzomig3.par('pmx',rsf.doc.rsfpar('int','0','','''padding on x '''))
sfzomig3.par('pmy',rsf.doc.rsfpar('int','0','','''padding on y'''))
sfzomig3.par('tmx',rsf.doc.rsfpar('int','0','','''taper on x'''))
sfzomig3.par('tmy',rsf.doc.rsfpar('int','0','','''taper on y '''))
sfzomig3.par('nw',rsf.doc.rsfpar('int','','',''''''))
sfzomig3.par('dw',rsf.doc.rsfpar('float','','',''''''))
sfzomig3.par('ow',rsf.doc.rsfpar('float','0.','',''''''))
sfzomig3.par('mode',rsf.doc.rsfpar('string ',desc=''''''))
sfzomig3.version('2.1-git')
sfzomig3.synopsis('''sfzomig3 slo=Fs.rsf < Fd.rsf > Fw.rsf < Fi.rsf ompchunk=1 ompnth=0 verb=n eps=0.01 inv=n causal=n twoway=y nrmax=1 dtmax=0.004 pmx=0 pmy=0 tmx=0 tmy=0 nw= dw= ow=0. mode=''','''''')
rsf.doc.progs['sfzomig3']=sfzomig3

sfcamig3 = rsf.doc.rsfprog('sfcamig3','user/psava/Mcamig3.c','''3-D common-azimuth modeling/migration with extended SSF ''')
sfcamig3.par('slo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcamig3.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfcamig3.par('ompnth',rsf.doc.rsfpar('int','0','','''OpenMP available threads '''))
sfcamig3.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfcamig3.par('eps',rsf.doc.rsfpar('float','0.01','','''stability parameter '''))
sfcamig3.par('inv',rsf.doc.rsfpar('bool','n','','''y=modeling; n=migration '''))
sfcamig3.par('twoway',rsf.doc.rsfpar('bool','n','','''two-way traveltime '''))
sfcamig3.par('nrmax',rsf.doc.rsfpar('int','1','','''maximum number of refs '''))
sfcamig3.par('dtmax',rsf.doc.rsfpar('float','0.004','','''time error '''))
sfcamig3.par('pmx',rsf.doc.rsfpar('int','0','','''padding mx'''))
sfcamig3.par('pmy',rsf.doc.rsfpar('int','0','','''padding my'''))
sfcamig3.par('phx',rsf.doc.rsfpar('int','0','','''padding hx'''))
sfcamig3.par('tmx',rsf.doc.rsfpar('int','0','','''taper mx '''))
sfcamig3.par('tmy',rsf.doc.rsfpar('int','0','','''taper my '''))
sfcamig3.par('thx',rsf.doc.rsfpar('int','0','','''taper hx '''))
sfcamig3.par('nw',rsf.doc.rsfpar('int','','',''''''))
sfcamig3.par('dw',rsf.doc.rsfpar('float','','',''''''))
sfcamig3.par('ow',rsf.doc.rsfpar('float','0.','',''''''))
sfcamig3.par('mode',rsf.doc.rsfpar('string ',desc=''''''))
sfcamig3.version('2.1-git')
sfcamig3.synopsis('''sfcamig3 slo=Fs.rsf < Fd.rsf > Fw.rsf < Fi.rsf ompchunk=1 ompnth=0 verb=n eps=0.01 inv=n twoway=n nrmax=1 dtmax=0.004 pmx=0 pmy=0 phx=0 tmx=0 tmy=0 thx=0 nw= dw= ow=0. mode=''','''''')
rsf.doc.progs['sfcamig3']=sfcamig3

sfstack3 = rsf.doc.rsfprog('sfstack3','user/psava/Mstack3.c','''OpenMP stack on axis 1,2 or 3 ''')
sfstack3.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfstack3.par('axis',rsf.doc.rsfpar('int','2','','''stack axis '''))
sfstack3.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity flag '''))
sfstack3.par('nbuf',rsf.doc.rsfpar('int','1','','''buffer size '''))
sfstack3.version('2.1-git')
sfstack3.synopsis('''sfstack3 < Fi.rsf > Fo.rsf verb=n axis=2 verb=y nbuf=1''','''''')
rsf.doc.progs['sfstack3']=sfstack3

sfhwt3d = rsf.doc.rsfprog('sfhwt3d','user/psava/Mhwt3d.c','''''')
sfhwt3d.par('verb',rsf.doc.rsfpar('bool','n','',''''''))
sfhwt3d.par('forceray',rsf.doc.rsfpar('bool','n','',''''''))
sfhwt3d.par('scaleray',rsf.doc.rsfpar('int','1.','','''velocity file '''))
sfhwt3d.par('xsou',rsf.doc.rsfpar('float','sf_o(ax) + sf_n(ax)*sf_d(ax)/2','',''''''))
sfhwt3d.par('ysou',rsf.doc.rsfpar('float','sf_o(ay) + sf_n(ay)*sf_d(ay)/2','',''''''))
sfhwt3d.par('zsou',rsf.doc.rsfpar('float','sf_o(az) + sf_n(az)*sf_d(az)/2','',''''''))
sfhwt3d.par('nt',rsf.doc.rsfpar('int','100','',''''''))
sfhwt3d.par('ot',rsf.doc.rsfpar('float','0','',''''''))
sfhwt3d.par('dt',rsf.doc.rsfpar('float','0.001','',''''''))
sfhwt3d.par('ng',rsf.doc.rsfpar('int','360','',''''''))
sfhwt3d.par('og',rsf.doc.rsfpar('float','-180','',''''''))
sfhwt3d.par('dg',rsf.doc.rsfpar('float','1','',''''''))
sfhwt3d.par('nh',rsf.doc.rsfpar('int','360','',''''''))
sfhwt3d.par('oh',rsf.doc.rsfpar('float','-180','',''''''))
sfhwt3d.par('dh',rsf.doc.rsfpar('float','1','',''''''))
sfhwt3d.version('2.1-git')
sfhwt3d.synopsis('''sfhwt3d < Fv.rsf > Fw.rsf verb=n forceray=n scaleray=1. xsou=sf_o(ax) + sf_n(ax)*sf_d(ax)/2 ysou=sf_o(ay) + sf_n(ay)*sf_d(ay)/2 zsou=sf_o(az) + sf_n(az)*sf_d(az)/2 nt=100 ot=0 dt=0.001 ng=360 og=-180 dg=1 nh=360 oh=-180 dh=1''','''* 3-D Huygens wavefront tracing traveltimes 
* pcs 2005
''')
rsf.doc.progs['sfhwt3d']=sfhwt3d

sfint3d = rsf.doc.rsfprog('sfint3d','user/psava/Mint3d.c','''''')
sfint3d.par('verb',rsf.doc.rsfpar('bool','n','',''''''))
sfint3d.par('pick',rsf.doc.rsfpar('int','2','',''''''))
sfint3d.par('fill',rsf.doc.rsfpar('int','1','','''wavefronts file (a,g,h,t) '''))
sfint3d.par('nz',rsf.doc.rsfpar('int','100','',''''''))
sfint3d.par('oz',rsf.doc.rsfpar('float','0.','',''''''))
sfint3d.par('dz',rsf.doc.rsfpar('float','1.','',''''''))
sfint3d.par('nx',rsf.doc.rsfpar('int','100','',''''''))
sfint3d.par('ox',rsf.doc.rsfpar('float','0.','',''''''))
sfint3d.par('dx',rsf.doc.rsfpar('float','1.','',''''''))
sfint3d.par('ny',rsf.doc.rsfpar('int','1','',''''''))
sfint3d.par('oy',rsf.doc.rsfpar('float','0.','',''''''))
sfint3d.par('dy',rsf.doc.rsfpar('float','1.','',''''''))
sfint3d.version('2.1-git')
sfint3d.synopsis('''sfint3d < Fw.rsf > Ft.rsf verb=n pick=2 fill=1 nz=100 oz=0. dz=1. nx=100 ox=0. dx=1. ny=1 oy=0. dy=1.''','''* 3-D traveltime interpolation (from rays to Cartesian cube)
* pcs 2005
''')
rsf.doc.progs['sfint3d']=sfint3d

sfrrt3d = rsf.doc.rsfprog('sfrrt3d','user/psava/Mrrt3d.c','''''')
sfrrt3d.par('verb',rsf.doc.rsfpar('bool','n','',''''''))
sfrrt3d.par('pick',rsf.doc.rsfpar('int','2','',''''''))
sfrrt3d.par('fill',rsf.doc.rsfpar('int','1','',''''''))
sfrrt3d.par('scaleray',rsf.doc.rsfpar('int','1.','',''''''))
sfrrt3d.par('nray',rsf.doc.rsfpar('int','1','',''''''))
sfrrt3d.par('jray',rsf.doc.rsfpar('int','1','',''''''))
sfrrt3d.par('gmin',rsf.doc.rsfpar('float','-90','',''''''))
sfrrt3d.par('gmax',rsf.doc.rsfpar('float','+90','',''''''))
sfrrt3d.par('hmin',rsf.doc.rsfpar('float','0','',''''''))
sfrrt3d.par('hmax',rsf.doc.rsfpar('float','180','',''''''))
sfrrt3d.par('nt',rsf.doc.rsfpar('int','100','',''''''))
sfrrt3d.par('ot',rsf.doc.rsfpar('float','0','',''''''))
sfrrt3d.par('dt',rsf.doc.rsfpar('float','0.001','',''''''))
sfrrt3d.par('xsou',rsf.doc.rsfpar('float','sf_o(ax) + sf_n(ax)*sf_d(ax)/2','',''''''))
sfrrt3d.par('ysou',rsf.doc.rsfpar('float','sf_o(ay) + sf_n(ay)*sf_d(ay)/2','',''''''))
sfrrt3d.par('zsou',rsf.doc.rsfpar('float','sf_o(az) + sf_n(az)*sf_d(az)/2','',''''''))
sfrrt3d.par('seed',rsf.doc.rsfpar('int','time(NULL)','','''random seed '''))
sfrrt3d.version('2.1-git')
sfrrt3d.synopsis('''sfrrt3d < Fv.rsf > Ft.rsf verb=n pick=2 fill=1 scaleray=1. nray=1 jray=1 gmin=-90 gmax=+90 hmin=0 hmax=180 nt=100 ot=0 dt=0.001 xsou=sf_o(ax) + sf_n(ax)*sf_d(ax)/2 ysou=sf_o(ay) + sf_n(ay)*sf_d(ay)/2 zsou=sf_o(az) + sf_n(az)*sf_d(az)/2 seed=time(NULL)''','''* 3-D ray tracing w/ random shooting directions
* pcs 2005
''')
rsf.doc.progs['sfrrt3d']=sfrrt3d

sfshift = rsf.doc.rsfprog('sfshift','user/psava/Mshift.c','''Fourier-domain shift in 1,2 and 3 dimensions ''')
sfshift.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfshift.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfshift.par('del1',rsf.doc.rsfpar('float','0.','','''delay on axis 1 '''))
sfshift.par('del2',rsf.doc.rsfpar('float','0.','','''delay on axis 2 '''))
sfshift.par('del3',rsf.doc.rsfpar('float','0.','','''delay on axis 3 '''))
sfshift.version('2.1-git')
sfshift.synopsis('''sfshift < Fi.rsf > Fo.rsf ompchunk=1 verb=n del1=0. del2=0. del3=0.''','''''')
rsf.doc.progs['sfshift']=sfshift

sffft3d = rsf.doc.rsfprog('sffft3d','user/psava/Mfft3d.c','''3D FFT with centering and Hermitian scaling  ''')
sffft3d.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sffft3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sffft3d.par('inv',rsf.doc.rsfpar('bool','n','','''forward/inverse '''))
sffft3d.par('cnt',rsf.doc.rsfpar('bool','n','','''centering '''))
sffft3d.par('axis',rsf.doc.rsfpar('int','0','','''FFT axis or axes '''))
sffft3d.version('2.1-git')
sffft3d.synopsis('''sffft3d < Fi.rsf > Fo.rsf ompchunk=1 verb=n inv=n cnt=n axis=0''','''''')
rsf.doc.progs['sffft3d']=sffft3d

sfrandcut = rsf.doc.rsfprog('sfrandcut','user/psava/Mrandcut.c','''cut a random dataset from a 3D cube ''')
sfrandcut.par('rr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfrandcut.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfrandcut.par('axis',rsf.doc.rsfpar('int','2','','''stack axis '''))
sfrandcut.version('2.1-git')
sfrandcut.synopsis('''sfrandcut < Fi.rsf > Fo.rsf rr=Fr.rsf verb=n axis=2''','''''')
rsf.doc.progs['sfrandcut']=sfrandcut

sfencode = rsf.doc.rsfprog('sfencode','user/psava/Mencode.c','''shot encoding with arbitrary delays ''')
sfencode.par('del',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfencode.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sfencode.par('ompnth',rsf.doc.rsfpar('int','0','','''OpenMP available threads '''))
sfencode.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfencode.version('2.1-git')
sfencode.synopsis('''sfencode < Fi.rsf del=Fd.rsf > Fo.rsf ompchunk=1 ompnth=0 verb=n''','''''')
rsf.doc.progs['sfencode']=sfencode

sfshot2grid = rsf.doc.rsfprog('sfshot2grid','user/psava/Mshot2grid.c','''Synthesize shot/receiver wavefields for 3-D SR migration ''')
sfshot2grid.par('wav',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfshot2grid.par('swf',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfshot2grid.par('nx',rsf.doc.rsfpar('int','','','''x samples '''))
sfshot2grid.par('dx',rsf.doc.rsfpar('float','','','''x sampling '''))
sfshot2grid.par('ox',rsf.doc.rsfpar('float','','','''x origin '''))
sfshot2grid.par('ny',rsf.doc.rsfpar('int','1','','''y samples '''))
sfshot2grid.par('dy',rsf.doc.rsfpar('float','1','','''y sampling '''))
sfshot2grid.par('oy',rsf.doc.rsfpar('float','0','','''y origin '''))
sfshot2grid.version('2.1-git')
sfshot2grid.synopsis('''sfshot2grid < Fr.rsf wav=Fs.rsf swf=Fsou.rsf > Frec.rsf nx= dx= ox= ny=1 dy=1 oy=0''','''''')
rsf.doc.progs['sfshot2grid']=sfshot2grid

sfboxfilter = rsf.doc.rsfprog('sfboxfilter','user/psava/Mboxfilter.c','''3D convolution with arbitrary filter ''')
sfboxfilter.par('flt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfboxfilter.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfboxfilter.par('stat',rsf.doc.rsfpar('bool','y','','''stationary flag '''))
sfboxfilter.version('2.1-git')
sfboxfilter.synopsis('''sfboxfilter < Fx.rsf > Fy.rsf flt=Ff.rsf verb=n stat=y''','''''')
rsf.doc.progs['sfboxfilter']=sfboxfilter

sflwefd2d = rsf.doc.rsfprog('sflwefd2d','user/psava/Mlwefd2d.c','''linearized acoustic time-domain FD modeling ''')
sflwefd2d.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflwefd2d.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflwefd2d.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflwefd2d.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflwefd2d.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflwefd2d.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflwefd2d.par('liw',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflwefd2d.par('lid',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflwefd2d.par('ompchunk',rsf.doc.rsfpar('int','1','','''OpenMP data chunk size '''))
sflwefd2d.par('ompnth',rsf.doc.rsfpar('int','0','','''OpenMP available threads '''))
sflwefd2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sflwefd2d.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sflwefd2d.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sflwefd2d.par('expl',rsf.doc.rsfpar('bool','n','','''"exploding reflector" '''))
sflwefd2d.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sflwefd2d.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sflwefd2d.par('nqz',rsf.doc.rsfpar('int','sf_n(a1)','',''''''))
sflwefd2d.par('nqx',rsf.doc.rsfpar('int','sf_n(a2)','',''''''))
sflwefd2d.par('oqz',rsf.doc.rsfpar('float','sf_o(a1)','',''''''))
sflwefd2d.par('oqx',rsf.doc.rsfpar('float','sf_o(a2)','',''''''))
sflwefd2d.version('2.1-git')
sflwefd2d.synopsis('''sflwefd2d < Fwav.rsf sou=Fsou.rsf rec=Frec.rsf vel=Fvel.rsf den=Fden.rsf ref=Fref.rsf wfl=Fwfl.rsf > Fdat.rsf liw=Fliw.rsf lid=Flid.rsf ompchunk=1 ompnth=0 verb=n snap=n free=n expl=n jdata=1 jsnap=nt nqz=sf_n(a1) nqx=sf_n(a2) oqz=sf_o(a1) oqx=sf_o(a2)''','''''')
rsf.doc.progs['sflwefd2d']=sflwefd2d

sfewefd2d = rsf.doc.rsfprog('sfewefd2d','user/psava/Mewefd2d.c','''2D elastic time-domain FD modeling ''')
sfewefd2d.par('ccc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd2d.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd2d.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd2d.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd2d.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfewefd2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfewefd2d.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sfewefd2d.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sfewefd2d.par('ssou',rsf.doc.rsfpar('bool','n','','''stress source '''))
sfewefd2d.par('dabc',rsf.doc.rsfpar('bool','n','','''absorbing BC '''))
sfewefd2d.par('opot',rsf.doc.rsfpar('bool','n','','''output potentials '''))
sfewefd2d.par('nbell',rsf.doc.rsfpar('int','5','','''bell size '''))
sfewefd2d.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sfewefd2d.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfewefd2d.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfewefd2d.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfewefd2d.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfewefd2d.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfewefd2d.version('2.1-git')
sfewefd2d.synopsis('''sfewefd2d < Fwav.rsf ccc=Fccc.rsf den=Fden.rsf sou=Fsou.rsf rec=Frec.rsf > Fdat.rsf wfl=Fwfl.rsf verb=n snap=n free=n ssou=n dabc=n opot=n nbell=5 jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) oqz=sf_o(az) oqx=sf_o(ax)''','''''')
rsf.doc.progs['sfewefd2d']=sfewefd2d

sfewefd3d = rsf.doc.rsfprog('sfewefd3d','user/psava/Mewefd3d.c','''3D elastic time-domain FD modeling ''')
sfewefd3d.par('ccc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd3d.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd3d.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd3d.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewefd3d.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfewefd3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfewefd3d.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sfewefd3d.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sfewefd3d.par('ssou',rsf.doc.rsfpar('bool','n','','''stress source '''))
sfewefd3d.par('dabc',rsf.doc.rsfpar('bool','n','','''absorbing BC '''))
sfewefd3d.par('opot',rsf.doc.rsfpar('bool','n','','''output potentials '''))
sfewefd3d.par('nbell',rsf.doc.rsfpar('int','5','','''bell size '''))
sfewefd3d.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sfewefd3d.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfewefd3d.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfewefd3d.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfewefd3d.par('nqy',rsf.doc.rsfpar('int','sf_n(ay)','',''''''))
sfewefd3d.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfewefd3d.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfewefd3d.par('oqy',rsf.doc.rsfpar('float','sf_o(ay)','',''''''))
sfewefd3d.version('2.1-git')
sfewefd3d.synopsis('''sfewefd3d < Fwav.rsf ccc=Fccc.rsf den=Fden.rsf sou=Fsou.rsf rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n snap=n free=n ssou=n dabc=n opot=n nbell=5 jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) nqy=sf_n(ay) oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)''','''''')
rsf.doc.progs['sfewefd3d']=sfewefd3d

sfhdefd = rsf.doc.rsfprog('sfhdefd','user/psava/Mhdefd.c','''Heat diffusion equation FD modeling ''')
sfhdefd.par('con',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhdefd.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhdefd.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhdefd.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfhdefd.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfhdefd.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sfhdefd.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag'''))
sfhdefd.par('jdata',rsf.doc.rsfpar('int','1','','''# of t steps at which to save receiver data '''))
sfhdefd.par('jsnap',rsf.doc.rsfpar('int','nt','','''# of t steps at which to save wavefield '''))
sfhdefd.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfhdefd.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfhdefd.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfhdefd.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfhdefd.version('2.1-git')
sfhdefd.synopsis('''sfhdefd < Fwav.rsf con=Fcon.rsf sou=Fsou.rsf rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n snap=n free=n jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) oqz=sf_o(az) oqx=sf_o(ax)''','''''')
rsf.doc.progs['sfhdefd']=sfhdefd

sfemfdm2d = rsf.doc.rsfprog('sfemfdm2d','user/psava/Memfdm2d.c','''2D EM FD modeling ''')
sfemfdm2d.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfemfdm2d.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfemfdm2d.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfemfdm2d.par('mag',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfemfdm2d.par('ele',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfemfdm2d.par('cdt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfemfdm2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfemfdm2d.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sfemfdm2d.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sfemfdm2d.par('expl',rsf.doc.rsfpar('bool','n','','''"exploding reflector" '''))
sfemfdm2d.par('dabc',rsf.doc.rsfpar('bool','n','','''absorbing BC '''))
sfemfdm2d.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sfemfdm2d.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfemfdm2d.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfemfdm2d.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfemfdm2d.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfemfdm2d.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfemfdm2d.version('2.1-git')
sfemfdm2d.synopsis('''sfemfdm2d < Fwav.rsf sou=Fsou.rsf rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf mag=Fmag.rsf ele=Fele.rsf cdt=Fcdt.rsf verb=n snap=n free=n expl=n dabc=n jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) oqz=sf_o(az) oqx=sf_o(ax)''','''''')
rsf.doc.progs['sfemfdm2d']=sfemfdm2d

sfhic2ang = rsf.doc.rsfprog('sfhic2ang','user/psava/Mhic2ang.c','''angle decomposition of CIPs ''')
sfhic2ang.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhic2ang.par('nor',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhic2ang.par('tlt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhic2ang.par('ani',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhic2ang.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfhic2ang.par('anis',rsf.doc.rsfpar('bool','n','','''anisotropy flag '''))
sfhic2ang.par('adj',rsf.doc.rsfpar('bool','y','','''adj flag '''))
sfhic2ang.par('nth',rsf.doc.rsfpar('int','90','',''''''))
sfhic2ang.par('oth',rsf.doc.rsfpar('float','0','',''''''))
sfhic2ang.par('dth',rsf.doc.rsfpar('float','1.','',''''''))
sfhic2ang.par('nph',rsf.doc.rsfpar('int','360','',''''''))
sfhic2ang.par('oph',rsf.doc.rsfpar('float','-180','',''''''))
sfhic2ang.par('dph',rsf.doc.rsfpar('float','1.','',''''''))
sfhic2ang.par('nhx',rsf.doc.rsfpar('int','1','',''''''))
sfhic2ang.par('ohx',rsf.doc.rsfpar('float','0','',''''''))
sfhic2ang.par('dhx',rsf.doc.rsfpar('float','1.','',''''''))
sfhic2ang.par('nhy',rsf.doc.rsfpar('int','1','',''''''))
sfhic2ang.par('ohy',rsf.doc.rsfpar('float','0','',''''''))
sfhic2ang.par('dhy',rsf.doc.rsfpar('float','1.','',''''''))
sfhic2ang.par('nht',rsf.doc.rsfpar('int','1','',''''''))
sfhic2ang.par('oht',rsf.doc.rsfpar('float','0.','',''''''))
sfhic2ang.par('dht',rsf.doc.rsfpar('float','1.','',''''''))
sfhic2ang.par('nps',rsf.doc.rsfpar('int','251','',''''''))
sfhic2ang.par('ops',rsf.doc.rsfpar('float','-25','',''''''))
sfhic2ang.par('dps',rsf.doc.rsfpar('float','0.2','',''''''))
sfhic2ang.version('2.1-git')
sfhic2ang.synopsis('''sfhic2ang < Fcip.rsf > Fang.rsf vel=Fvel.rsf nor=Fnor.rsf tlt=Ftlt.rsf ani=Fani.rsf verb=n anis=n adj=y nth=90 oth=0 dth=1. nph=360 oph=-180 dph=1. nhx=1 ohx=0 dhx=1. nhy=1 ohy=0 dhy=1. nht=1 oht=0. dht=1. nps=251 ops=-25 dps=0.2''','''''')
rsf.doc.progs['sfhic2ang']=sfhic2ang

sfzowei = rsf.doc.rsfprog('sfzowei','user/psava/Mzowei.c','''3-D zero-offset modeling/migration ''')
sfzowei.par('slo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzowei.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzowei.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfzowei.par('adj',rsf.doc.rsfpar('bool','y','','''adjoint flag, true for migration, false for modeling '''))
sfzowei.version('2.1-git')
sfzowei.synopsis('''sfzowei slo=Fslo.rsf < Fdat.rsf > Fcic.rsf sou=Fsou.rsf verb=n adj=y''','''''')
rsf.doc.progs['sfzowei']=sfzowei

sfwei = rsf.doc.rsfprog('sfwei','user/psava/Mwei.c','''3-D modeling/migration with extended SSF ''')
sfwei.par('slo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwei.par('dat',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwei.par('coo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwei.par('cip',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwei.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfwei.par('causal',rsf.doc.rsfpar('bool','n','','''causality '''))
sfwei.par('causal',rsf.doc.rsfpar('bool','n','','''causality '''))
sfwei.par('irun',rsf.doc.rsfpar('string ',desc=''''''))
sfwei.version('2.1-git')
sfwei.synopsis('''sfwei slo=Fslo.rsf < Fsou.rsf dat=Frec.rsf > Fcic.rsf coo=Fcoo.rsf cip=Feic.rsf > Fwfl.rsf verb=n causal=n causal=n irun=''','''''')
rsf.doc.progs['sfwei']=sfwei

sfweigwf = rsf.doc.rsfprog('sfweigwf','user/psava/Mweigwf.c','''3-D wave-equation wavefield continuation with adjoint-source ''')
sfweigwf.par('slo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfweigwf.par('coo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfweigwf.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfweigwf.par('down',rsf.doc.rsfpar('bool','y','','''up/down   flag '''))
sfweigwf.par('causal',rsf.doc.rsfpar('bool','n','','''causality flag '''))
sfweigwf.version('2.1-git')
sfweigwf.synopsis('''sfweigwf slo=Fslo.rsf < Fsou.rsf coo=Fcoo.rsf > Fwfl.rsf verb=n down=y causal=n''','''''')
rsf.doc.progs['sfweigwf']=sfweigwf

sfweiajs = rsf.doc.rsfprog('sfweiajs','user/psava/Mweiajs.c','''Adjoint source construction for image-domain waveform tomography ''')
sfweiajs.par('bwf',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfweiajs.par('coo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfweiajs.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfweiajs.par('conj',rsf.doc.rsfpar('bool','','','''flag '''))
sfweiajs.par('irun',rsf.doc.rsfpar('string ',desc=''''''))
sfweiajs.version('2.1-git')
sfweiajs.synopsis('''sfweiajs bwf=Fbwf.rsf < Feic.rsf coo=Fcoo.rsf > Faso.rsf verb=n conj= irun=''','''''')
rsf.doc.progs['sfweiajs']=sfweiajs

sfweiajw = rsf.doc.rsfprog('sfweiajw','user/psava/Mweiajw.c','''3-D wave-equation wavefield continuation with adjoint-source ''')
sfweiajw.par('slo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfweiajw.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfweiajw.par('down',rsf.doc.rsfpar('bool','y','','''up/down   flag '''))
sfweiajw.par('causal',rsf.doc.rsfpar('bool','','','''causality flag '''))
sfweiajw.version('2.1-git')
sfweiajw.synopsis('''sfweiajw slo=Fslo.rsf < Fsou.rsf > Fwfl.rsf verb=n down=y causal=''','''''')
rsf.doc.progs['sfweiajw']=sfweiajw

sfttifd2d = rsf.doc.rsfprog('sfttifd2d','user/psava/Mttifd2d.c','''2D TTI time-domain FD modeling ''')
sfttifd2d.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfttifd2d.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfttifd2d.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfttifd2d.par('ang',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfttifd2d.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfttifd2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfttifd2d.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots '''))
sfttifd2d.par('free',rsf.doc.rsfpar('bool','n','','''free surface '''))
sfttifd2d.par('expl',rsf.doc.rsfpar('bool','n','','''"exploding reflector" '''))
sfttifd2d.par('dabc',rsf.doc.rsfpar('bool','n','','''absorbing BC '''))
sfttifd2d.par('sout',rsf.doc.rsfpar('bool','n','','''stress output '''))
sfttifd2d.par('uses',rsf.doc.rsfpar('bool','n','','''use vsz '''))
sfttifd2d.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sfttifd2d.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfttifd2d.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfttifd2d.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfttifd2d.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfttifd2d.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfttifd2d.par('atype',rsf.doc.rsfpar('string ',desc=''''''))
sfttifd2d.version('2.1-git')
sfttifd2d.synopsis('''sfttifd2d < Fwav.rsf vel=Fvel.rsf sou=Fsou.rsf rec=Frec.rsf ang=Fang.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n snap=n free=n expl=n dabc=n sout=n uses=n jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) oqz=sf_o(az) oqx=sf_o(ax) atype=''','''''')
rsf.doc.progs['sfttifd2d']=sfttifd2d

sfttifd3d = rsf.doc.rsfprog('sfttifd3d','user/psava/Mttifd3d.c','''3D TTI time-domain FD modeling ''')
sfttifd3d.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfttifd3d.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfttifd3d.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfttifd3d.par('ang',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfttifd3d.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfttifd3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfttifd3d.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots '''))
sfttifd3d.par('free',rsf.doc.rsfpar('bool','n','','''free surface '''))
sfttifd3d.par('expl',rsf.doc.rsfpar('bool','n','','''"exploding reflector" '''))
sfttifd3d.par('dabc',rsf.doc.rsfpar('bool','n','','''absorbing BC '''))
sfttifd3d.par('sout',rsf.doc.rsfpar('bool','n','','''stress output '''))
sfttifd3d.par('uses',rsf.doc.rsfpar('bool','n','','''use vsz '''))
sfttifd3d.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sfttifd3d.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfttifd3d.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfttifd3d.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfttifd3d.par('nqy',rsf.doc.rsfpar('int','sf_n(ay)','',''''''))
sfttifd3d.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfttifd3d.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfttifd3d.par('oqy',rsf.doc.rsfpar('float','sf_o(ay)','',''''''))
sfttifd3d.par('atype',rsf.doc.rsfpar('string ',desc=''''''))
sfttifd3d.version('2.1-git')
sfttifd3d.synopsis('''sfttifd3d < Fwav.rsf vel=Fvel.rsf sou=Fsou.rsf rec=Frec.rsf ang=Fang.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n snap=n free=n expl=n dabc=n sout=n uses=n jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) nqy=sf_n(ay) oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay) atype=''','''''')
rsf.doc.progs['sfttifd3d']=sfttifd3d

sfsrbin3d = rsf.doc.rsfprog('sfsrbin3d','user/psava/Msrbin3d.c','''4-D data binning from traces at irregular coordinates ''')
sfsrbin3d.par('key',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsrbin3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfsrbin3d.par('n1',rsf.doc.rsfpar('int','','',''''''))
sfsrbin3d.par('o1',rsf.doc.rsfpar('float','','',''''''))
sfsrbin3d.par('d1',rsf.doc.rsfpar('float','','',''''''))
sfsrbin3d.par('n2',rsf.doc.rsfpar('int','','',''''''))
sfsrbin3d.par('o2',rsf.doc.rsfpar('float','','',''''''))
sfsrbin3d.par('d2',rsf.doc.rsfpar('float','','',''''''))
sfsrbin3d.par('on1',rsf.doc.rsfpar('int','','',''''''))
sfsrbin3d.par('oo1',rsf.doc.rsfpar('float','','',''''''))
sfsrbin3d.par('od1',rsf.doc.rsfpar('float','','',''''''))
sfsrbin3d.par('on2',rsf.doc.rsfpar('int','','',''''''))
sfsrbin3d.par('oo2',rsf.doc.rsfpar('float','','',''''''))
sfsrbin3d.par('od2',rsf.doc.rsfpar('float','','',''''''))
sfsrbin3d.version('2.1-git')
sfsrbin3d.synopsis('''sfsrbin3d < Ftrc.rsf > Fbin.rsf key=Fkey.rsf verb=n n1= o1= d1= n2= o2= d2= on1= oo1= od1= on2= oo2= od2=''','''''')
rsf.doc.progs['sfsrbin3d']=sfsrbin3d

sfcicop2d = rsf.doc.rsfprog('sfcicop2d','user/psava/Mcicop2d.c','''Conventional IC 2D ''')
sfcicop2d.par('opr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcicop2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfcicop2d.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sfcicop2d.par('wflcausal',rsf.doc.rsfpar('bool','n','','''causal wfl? '''))
sfcicop2d.par('oprcausal',rsf.doc.rsfpar('bool','n','','''causal opr? '''))
sfcicop2d.version('2.1-git')
sfcicop2d.synopsis('''sfcicop2d opr=Fopr.rsf < Fimg.rsf > Fwfl.rsf verb=n adj=n wflcausal=n oprcausal=n''','''''')
rsf.doc.progs['sfcicop2d']=sfcicop2d

sfcicop3d = rsf.doc.rsfprog('sfcicop3d','user/psava/Mcicop3d.c','''Conventional IC 2D ''')
sfcicop3d.par('opr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcicop3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfcicop3d.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sfcicop3d.par('wflcausal',rsf.doc.rsfpar('bool','n','','''causal wfl? '''))
sfcicop3d.par('oprcausal',rsf.doc.rsfpar('bool','n','','''causal opr? '''))
sfcicop3d.version('2.1-git')
sfcicop3d.synopsis('''sfcicop3d opr=Fopr.rsf < Fimg.rsf > Fwfl.rsf verb=n adj=n wflcausal=n oprcausal=n''','''''')
rsf.doc.progs['sfcicop3d']=sfcicop3d

sfeicop2d = rsf.doc.rsfprog('sfeicop2d','user/psava/Meicop2d.c','''Extended IC 2D ''')
sfeicop2d.par('opr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfeicop2d.par('cip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfeicop2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfeicop2d.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sfeicop2d.par('wflcausal',rsf.doc.rsfpar('bool','n','','''causal wfl? '''))
sfeicop2d.par('oprcausal',rsf.doc.rsfpar('bool','n','','''causal opr? '''))
sfeicop2d.par('nhz',rsf.doc.rsfpar('int','0','','''z lags '''))
sfeicop2d.par('nhx',rsf.doc.rsfpar('int','0','','''x lags '''))
sfeicop2d.par('nht',rsf.doc.rsfpar('int','0','','''t lags '''))
sfeicop2d.par('gaus',rsf.doc.rsfpar('bool','n','','''Gaussian taper '''))
sfeicop2d.par('gsx',rsf.doc.rsfpar('float','0.25*sf_n(ahx)*sf_d(ahx)','',''''''))
sfeicop2d.par('gsz',rsf.doc.rsfpar('float','0.25*sf_n(ahz)*sf_d(ahz)','',''''''))
sfeicop2d.par('gst',rsf.doc.rsfpar('float','0.25*sf_n(aht)*sf_d(aht)','',''''''))
sfeicop2d.version('2.1-git')
sfeicop2d.synopsis('''sfeicop2d opr=Fopr.rsf cip=Fcip.rsf < Fimg.rsf > Fwfl.rsf verb=n adj=n wflcausal=n oprcausal=n nhz=0 nhx=0 nht=0 gaus=n gsx=0.25*sf_n(ahx)*sf_d(ahx) gsz=0.25*sf_n(ahz)*sf_d(ahz) gst=0.25*sf_n(aht)*sf_d(aht)''','''''')
rsf.doc.progs['sfeicop2d']=sfeicop2d

sfeicop3d = rsf.doc.rsfprog('sfeicop3d','user/psava/Meicop3d.c','''Extended IC 2D ''')
sfeicop3d.par('opr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfeicop3d.par('cip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfeicop3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfeicop3d.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sfeicop3d.par('wflcausal',rsf.doc.rsfpar('bool','n','','''causal wfl? '''))
sfeicop3d.par('oprcausal',rsf.doc.rsfpar('bool','n','','''causal opr? '''))
sfeicop3d.par('nhz',rsf.doc.rsfpar('int','0','','''z lags '''))
sfeicop3d.par('nhx',rsf.doc.rsfpar('int','0','','''x lags '''))
sfeicop3d.par('nhy',rsf.doc.rsfpar('int','0','','''y lags '''))
sfeicop3d.par('nht',rsf.doc.rsfpar('int','0','','''t lags '''))
sfeicop3d.par('gaus',rsf.doc.rsfpar('bool','n','','''Gaussian taper '''))
sfeicop3d.par('gsx',rsf.doc.rsfpar('float','0.25*sf_n(ahx)*sf_d(ahx)','',''''''))
sfeicop3d.par('gsy',rsf.doc.rsfpar('float','0.25*sf_n(ahy)*sf_d(ahy)','',''''''))
sfeicop3d.par('gsz',rsf.doc.rsfpar('float','0.25*sf_n(ahz)*sf_d(ahz)','',''''''))
sfeicop3d.par('gst',rsf.doc.rsfpar('float','0.25*sf_n(aht)*sf_d(aht)','',''''''))
sfeicop3d.version('2.1-git')
sfeicop3d.synopsis('''sfeicop3d opr=Fopr.rsf cip=Fcip.rsf < Fimg.rsf > Fwfl.rsf verb=n adj=n wflcausal=n oprcausal=n nhz=0 nhx=0 nhy=0 nht=0 gaus=n gsx=0.25*sf_n(ahx)*sf_d(ahx) gsy=0.25*sf_n(ahy)*sf_d(ahy) gsz=0.25*sf_n(ahz)*sf_d(ahz) gst=0.25*sf_n(aht)*sf_d(aht)''','''''')
rsf.doc.progs['sfeicop3d']=sfeicop3d

sfaweop2d = rsf.doc.rsfprog('sfaweop2d','user/psava/Maweop2d.c','''2D AWE modeling ''')
sfaweop2d.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfaweop2d.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfaweop2d.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfaweop2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity  '''))
sfaweop2d.par('fsrf',rsf.doc.rsfpar('bool','n','','''free surface  '''))
sfaweop2d.par('dabc',rsf.doc.rsfpar('bool','n','','''Absorbing BC '''))
sfaweop2d.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sfaweop2d.par('sou',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfaweop2d.par('rec',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfaweop2d.version('2.1-git')
sfaweop2d.synopsis('''sfaweop2d sou=Fs.rsf rec=Fr.rsf vel=Fvel.rsf < Fd.rsf > Fm.rsf verb=n fsrf=n dabc=n adj=n''','''''')
rsf.doc.progs['sfaweop2d']=sfaweop2d

sfaweop3d = rsf.doc.rsfprog('sfaweop3d','user/psava/Maweop3d.c','''3D AWE modeling''')
sfaweop3d.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfaweop3d.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfaweop3d.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfaweop3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity  '''))
sfaweop3d.par('fsrf',rsf.doc.rsfpar('bool','n','','''free surface  '''))
sfaweop3d.par('dabc',rsf.doc.rsfpar('bool','n','','''Absorbing BC '''))
sfaweop3d.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sfaweop3d.par('sou',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfaweop3d.par('rec',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfaweop3d.version('2.1-git')
sfaweop3d.synopsis('''sfaweop3d sou=Fs.rsf rec=Fr.rsf vel=Fvel.rsf < Fd.rsf > Fm.rsf verb=n fsrf=n dabc=n adj=n''','''''')
rsf.doc.progs['sfaweop3d']=sfaweop3d

sfaccumulate = rsf.doc.rsfprog('sfaccumulate','user/psava/Maccumulate.c','''Accumulate ''')
sfaccumulate.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfaccumulate.par('axis',rsf.doc.rsfpar('int','3','','''accumulate axis '''))
sfaccumulate.version('2.1-git')
sfaccumulate.synopsis('''sfaccumulate < Fin.rsf > Fou.rsf verb=n axis=3''','''''')
rsf.doc.progs['sfaccumulate']=sfaccumulate

sfdecibel = rsf.doc.rsfprog('sfdecibel','user/psava/Mdecibel.c','''Decibel ''')
sfdecibel.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfdecibel.par('aref',rsf.doc.rsfpar('float','1.0','','''reference amplitude '''))
sfdecibel.par('inv',rsf.doc.rsfpar('bool','n','','''inverse transform '''))
sfdecibel.version('2.1-git')
sfdecibel.synopsis('''sfdecibel < Fin.rsf > Fou.rsf verb=n aref=1.0 inv=n''','''''')
rsf.doc.progs['sfdecibel']=sfdecibel

sfitrack2d = rsf.doc.rsfprog('sfitrack2d','user/psava/Mitrack2d.c','''Datuming by 2D Green functions in constant media ''')
sfitrack2d.par('cnn',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfitrack2d.par('cff',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfitrack2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfitrack2d.par('velo',rsf.doc.rsfpar('float','1.0','','''medium velocity '''))
sfitrack2d.par('fast',rsf.doc.rsfpar('bool','y','','''fast execution '''))
sfitrack2d.par('nin',rsf.doc.rsfpar('bool','y','',''''''))
sfitrack2d.par('nou',rsf.doc.rsfpar('bool','y','','''------------------------------------------------------------'''))
sfitrack2d.par('ox',rsf.doc.rsfpar('float','0.0','',''''''))
sfitrack2d.par('oz',rsf.doc.rsfpar('float','0.0','',''''''))
sfitrack2d.par('angMAX',rsf.doc.rsfpar('float','90.0','',''''''))
sfitrack2d.par('gauANG',rsf.doc.rsfpar('float','0.3*angMAX','',''''''))
sfitrack2d.version('2.1-git')
sfitrack2d.synopsis('''sfitrack2d cnn=Fnn.rsf cff=Fff.rsf < Fwin.rsf > Fwou.rsf verb=n velo=1.0 fast=y nin=y nou=y ox=0.0 oz=0.0 angMAX=90.0 gauANG=0.3*angMAX''','''''')
rsf.doc.progs['sfitrack2d']=sfitrack2d

sfitrack3d = rsf.doc.rsfprog('sfitrack3d','user/psava/Mitrack3d.c','''Datuming by 3D Green functions in constant media ''')
sfitrack3d.par('cnn',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfitrack3d.par('cff',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfitrack3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfitrack3d.par('velo',rsf.doc.rsfpar('float','1.0','','''medium velocity '''))
sfitrack3d.par('fast',rsf.doc.rsfpar('bool','y','','''fast execution '''))
sfitrack3d.par('nin',rsf.doc.rsfpar('bool','y','',''''''))
sfitrack3d.par('nou',rsf.doc.rsfpar('bool','y','','''------------------------------------------------------------'''))
sfitrack3d.par('ox',rsf.doc.rsfpar('float','0.0','',''''''))
sfitrack3d.par('oy',rsf.doc.rsfpar('float','0.0','',''''''))
sfitrack3d.par('oz',rsf.doc.rsfpar('float','0.0','',''''''))
sfitrack3d.par('angMAX',rsf.doc.rsfpar('float','90.0','',''''''))
sfitrack3d.par('gauANG',rsf.doc.rsfpar('float','0.3*angMAX','',''''''))
sfitrack3d.version('2.1-git')
sfitrack3d.synopsis('''sfitrack3d cnn=Fnn.rsf cff=Fff.rsf < Fwin.rsf > Fwou.rsf verb=n velo=1.0 fast=y nin=y nou=y ox=0.0 oy=0.0 oz=0.0 angMAX=90.0 gauANG=0.3*angMAX''','''''')
rsf.doc.progs['sfitrack3d']=sfitrack3d

sfinjop2d = rsf.doc.rsfprog('sfinjop2d','user/psava/Minjop2d.c','''inject/extract in/from 2D wavefield ''')
sfinjop2d.par('coo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfinjop2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfinjop2d.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sfinjop2d.par('nz',rsf.doc.rsfpar('int','1','',''''''))
sfinjop2d.par('oz',rsf.doc.rsfpar('float','0.0','',''''''))
sfinjop2d.par('dz',rsf.doc.rsfpar('float','1.0','',''''''))
sfinjop2d.par('nx',rsf.doc.rsfpar('int','1','',''''''))
sfinjop2d.par('ox',rsf.doc.rsfpar('float','0.0','',''''''))
sfinjop2d.par('dx',rsf.doc.rsfpar('float','1.0','',''''''))
sfinjop2d.version('2.1-git')
sfinjop2d.synopsis('''sfinjop2d coo=Fcoo.rsf < Fwfl.rsf > Ftrc.rsf verb=n adj=n nz=1 oz=0.0 dz=1.0 nx=1 ox=0.0 dx=1.0''','''''')
rsf.doc.progs['sfinjop2d']=sfinjop2d

sfinjop3d = rsf.doc.rsfprog('sfinjop3d','user/psava/Minjop3d.c','''inject/extract in/from 3D wavefield ''')
sfinjop3d.par('coo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfinjop3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfinjop3d.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sfinjop3d.par('nz',rsf.doc.rsfpar('int','1','',''''''))
sfinjop3d.par('oz',rsf.doc.rsfpar('float','0.0','',''''''))
sfinjop3d.par('dz',rsf.doc.rsfpar('float','1.0','',''''''))
sfinjop3d.par('ny',rsf.doc.rsfpar('int','1','',''''''))
sfinjop3d.par('oy',rsf.doc.rsfpar('float','0.0','',''''''))
sfinjop3d.par('dy',rsf.doc.rsfpar('float','1.0','',''''''))
sfinjop3d.par('nx',rsf.doc.rsfpar('int','1','',''''''))
sfinjop3d.par('ox',rsf.doc.rsfpar('float','0.0','',''''''))
sfinjop3d.par('dx',rsf.doc.rsfpar('float','1.0','',''''''))
sfinjop3d.version('2.1-git')
sfinjop3d.synopsis('''sfinjop3d coo=Fcoo.rsf < Fwfl.rsf > Ftrc.rsf verb=n adj=n nz=1 oz=0.0 dz=1.0 ny=1 oy=0.0 dy=1.0 nx=1 ox=0.0 dx=1.0''','''''')
rsf.doc.progs['sfinjop3d']=sfinjop3d

sftransp12 = rsf.doc.rsfprog('sftransp12','user/psava/Mtransp12.c','''Transpose 1-2 ''')
sftransp12.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sftransp12.par('memsize',rsf.doc.rsfpar('float','1000.0','',''''''))
sftransp12.version('2.1-git')
sftransp12.synopsis('''sftransp12 < Fin.rsf > Fou.rsf verb=n memsize=1000.0''','''''')
rsf.doc.progs['sftransp12']=sftransp12

sfesou = rsf.doc.rsfprog('sfesou','user/psava/Mesou.c','''source for quasistatic electric potential ''')
sfesou.par('ske',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfesou.par('qke',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfesou.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfesou.par('zbnd',rsf.doc.rsfpar('bool','n','','''boundary flag '''))
sfesou.version('2.1-git')
sfesou.synopsis('''sfesou < Fpre.rsf > Feso.rsf ske=Fske.rsf qke=Fqke.rsf verb=n zbnd=n''','''''')
rsf.doc.progs['sfesou']=sfesou

sfepot = rsf.doc.rsfprog('sfepot','user/psava/Mepot.c','''compute quasi-static electric potential ''')
sfepot.par('con',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfepot.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfepot.par('cbnd',rsf.doc.rsfpar('bool','y','','''conductive boundary '''))
sfepot.par('csrf',rsf.doc.rsfpar('bool','n','','''conductive  surface '''))
sfepot.par('meth',rsf.doc.rsfpar('int','0','','''method flag '''))
sfepot.par('nit',rsf.doc.rsfpar('int','100000','','''Jacobi iterations '''))
sfepot.version('2.1-git')
sfepot.synopsis('''sfepot < Feso.rsf > Fepo.rsf con=Fcon.rsf verb=n cbnd=y csrf=n meth=0 nit=100000''','''''')
rsf.doc.progs['sfepot']=sfepot

sfregrid1d = rsf.doc.rsfprog('sfregrid1d','user/psava/Mregrid1d.c','''1-D ENO interpolation ''')
sfregrid1d.par('pattern',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfregrid1d.par('order',rsf.doc.rsfpar('int','3','',''''''))
sfregrid1d.par('pattern',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfregrid1d.version('2.1-git')
sfregrid1d.synopsis('''sfregrid1d < Fi.rsf > Fo.rsf pattern=Fp.rsf order=3''','''''')
rsf.doc.progs['sfregrid1d']=sfregrid1d

sfregrid2d = rsf.doc.rsfprog('sfregrid2d','user/psava/Mregrid2d.c','''2-D ENO interpolation ''')
sfregrid2d.par('pattern',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfregrid2d.par('order',rsf.doc.rsfpar('int','3','',''''''))
sfregrid2d.par('pattern',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfregrid2d.version('2.1-git')
sfregrid2d.synopsis('''sfregrid2d < Fi.rsf > Fo.rsf pattern=Fp.rsf order=3''','''''')
rsf.doc.progs['sfregrid2d']=sfregrid2d

sfregrid3d = rsf.doc.rsfprog('sfregrid3d','user/psava/Mregrid3d.c','''3-D ENO interpolation ''')
sfregrid3d.par('pattern',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfregrid3d.par('order',rsf.doc.rsfpar('int','3','',''''''))
sfregrid3d.par('pattern',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfregrid3d.version('2.1-git')
sfregrid3d.synopsis('''sfregrid3d < Fi.rsf > Fo.rsf pattern=Fp.rsf order=3''','''''')
rsf.doc.progs['sfregrid3d']=sfregrid3d

sfgetattr = rsf.doc.rsfprog('sfgetattr','user/psava/Mgetattr.c','''Output dataset attributes. ''')
sfgetattr.par('want',rsf.doc.rsfpar('string ',desc=''''''))
sfgetattr.version('2.1-git')
sfgetattr.synopsis('''sfgetattr < Fi.rsf > Fo.rsf want=''','''''')
rsf.doc.progs['sfgetattr']=sfgetattr

sfcheckerboard = rsf.doc.rsfprog('sfcheckerboard','user/psava/Mcheckerboard.c','''make a 2D/3D checkerboard model ''')
sfcheckerboard.par('nx',rsf.doc.rsfpar('int','1','',''''''))
sfcheckerboard.par('ny',rsf.doc.rsfpar('int','1','',''''''))
sfcheckerboard.par('nz',rsf.doc.rsfpar('int','1','',''''''))
sfcheckerboard.par('ox',rsf.doc.rsfpar('float','0.0','',''''''))
sfcheckerboard.par('oy',rsf.doc.rsfpar('float','0.0','',''''''))
sfcheckerboard.par('oz',rsf.doc.rsfpar('float','0.0','',''''''))
sfcheckerboard.par('dx',rsf.doc.rsfpar('float','1.0','',''''''))
sfcheckerboard.par('dy',rsf.doc.rsfpar('float','1.0','',''''''))
sfcheckerboard.par('dz',rsf.doc.rsfpar('float','1.0','','''get checkerboard size '''))
sfcheckerboard.par('N',rsf.doc.rsfpar('int','1','','''------------------------------------------------------------'''))
sfcheckerboard.version('2.1-git')
sfcheckerboard.synopsis('''sfcheckerboard > Fo.rsf nx=1 ny=1 nz=1 ox=0.0 oy=0.0 oz=0.0 dx=1.0 dy=1.0 dz=1.0 N=1''','''''')
rsf.doc.progs['sfcheckerboard']=sfcheckerboard

sfcorop = rsf.doc.rsfprog('sfcorop','user/psava/Mcorop.py','''''')
sfcorop.par('opr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcorop.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag'''))
sfcorop.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag'''))
sfcorop.par('ncor',rsf.doc.rsfpar('int','100','',''''''))
sfcorop.version('2.1-git')
sfcorop.synopsis('''sfcorop opr=Fopr.rsf < Fcor.rsf > Fwfl.rsf verb=n adj=n ncor=100''','''Correlation operator w/ adjoint
wfl [file] : is taken from stdin
opr [file] : is taken from  "opr"
Requires both files to have the same dimensions
''')
rsf.doc.progs['sfcorop']=sfcorop

sfpwave3d = rsf.doc.rsfprog('sfpwave3d','user/psava/Mpwave3d.py','''''')
sfpwave3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag'''))
sfpwave3d.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfpwave3d.par('ot',rsf.doc.rsfpar('float','','',''''''))
sfpwave3d.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfpwave3d.par('nx',rsf.doc.rsfpar('int','','',''''''))
sfpwave3d.par('ox',rsf.doc.rsfpar('float','','',''''''))
sfpwave3d.par('dx',rsf.doc.rsfpar('float','','',''''''))
sfpwave3d.par('ny',rsf.doc.rsfpar('int','','',''''''))
sfpwave3d.par('oy',rsf.doc.rsfpar('float','','',''''''))
sfpwave3d.par('dy',rsf.doc.rsfpar('float','','',''''''))
sfpwave3d.par('nz',rsf.doc.rsfpar('int','','',''''''))
sfpwave3d.par('oz',rsf.doc.rsfpar('float','','',''''''))
sfpwave3d.par('dz',rsf.doc.rsfpar('float','','',''''''))
sfpwave3d.par('vel',rsf.doc.rsfpar('float','1.0','',''''''))
sfpwave3d.par('cx',rsf.doc.rsfpar('float','1.0','',''''''))
sfpwave3d.par('cy',rsf.doc.rsfpar('float','1.0','',''''''))
sfpwave3d.par('cz',rsf.doc.rsfpar('float','1.0','',''''''))
sfpwave3d.version('2.1-git')
sfpwave3d.synopsis('''sfpwave3d > Fdat.rsf verb=n nt= ot= dt= nx= ox= dx= ny= oy= dy= nz= oz= dz= vel=1.0 cx=1.0 cy=1.0 cz=1.0''','''generate a plane in t-x-y-z space
cx x + cy y + cz z - vel t = 0
(the plane goes through the origin)
''')
rsf.doc.progs['sfpwave3d']=sfpwave3d

sfocor3d = rsf.doc.rsfprog('sfocor3d','user/psava/Mocor3d.py','''''')
sfocor3d.par('opr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfocor3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag'''))
sfocor3d.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag'''))
sfocor3d.par('ocox',rsf.doc.rsfpar('float','0.0','',''''''))
sfocor3d.par('ocoy',rsf.doc.rsfpar('float','0.0','',''''''))
sfocor3d.par('ocoz',rsf.doc.rsfpar('float','0.0','',''''''))
sfocor3d.par('ntlag',rsf.doc.rsfpar('int','100','',''''''))
sfocor3d.par('nxlag',rsf.doc.rsfpar('int','0','',''''''))
sfocor3d.par('nylag',rsf.doc.rsfpar('int','0','',''''''))
sfocor3d.par('nzlag',rsf.doc.rsfpar('int','0','',''''''))
sfocor3d.version('2.1-git')
sfocor3d.synopsis('''sfocor3d < Fwfl.rsf opr=Fopr.rsf > Fcor.rsf verb=n adj=n ocox=0.0 ocoy=0.0 ocoz=0.0 ntlag=100 nxlag=0 nylag=0 nzlag=0''','''Oriented correlation
wfl [file] : is taken from stdin
opr [file] : is taken from  "opr"
requires both files to have the same dimensions
correlation is computed at coordinates (ocox,ocoy,ocoz)
the (half) lags are: ntlag, nxlag, nylag, nzlag
''')
rsf.doc.progs['sfocor3d']=sfocor3d

sffindmax = rsf.doc.rsfprog('sffindmax','user/psava/Mfindmax.py','''''')
sffindmax.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag'''))
sffindmax.version('2.1-git')
sffindmax.synopsis('''sffindmax < Fin.rsf > Fou.rsf verb=n''','''find max value in a file
''')
rsf.doc.progs['sffindmax']=sffindmax

