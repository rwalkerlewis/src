import rsf.doc

sfexpand = rsf.doc.rsfprog('sfexpand','user/fangg/Mexpand.c','''Expand 2D data  ''')
sfexpand.par('left',rsf.doc.rsfpar('int','0.5*nx','',''''''))
sfexpand.par('right',rsf.doc.rsfpar('int','0.5*nx','',''''''))
sfexpand.par('top',rsf.doc.rsfpar('int','0','',''''''))
sfexpand.par('bottom',rsf.doc.rsfpar('int','0','',''''''))
sfexpand.version('2.1-git')
sfexpand.synopsis('''sfexpand > out.rsf < in.rsf left=0.5*nx right=0.5*nx top=0 bottom=0''','''''')
rsf.doc.progs['sfexpand']=sfexpand

sfsglr2 = rsf.doc.rsfprog('sfsglr2','user/fangg/Msglr2.c','''Simple 2-D wave propagation on staggered grid''')
sfsglr2.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglr2.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglr2.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsglr2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglr2.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglr2.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglr2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfsglr2.par('cmplx',rsf.doc.rsfpar('bool','n','','''use complex FFT '''))
sfsglr2.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfsglr2.par('gdep',rsf.doc.rsfpar('float','0.0','','''depth of geophone (meter)'''))
sfsglr2.par('slx',rsf.doc.rsfpar('float','-1.0','','''source location x '''))
sfsglr2.par('spx',rsf.doc.rsfpar('int','-1','','''source location x (index)'''))
sfsglr2.par('slz',rsf.doc.rsfpar('float','-1.0','','''source location z '''))
sfsglr2.par('spz',rsf.doc.rsfpar('int','-1','','''source location z (index)'''))
sfsglr2.par('gdep',rsf.doc.rsfpar('float','-1.0','','''recorder depth on grid'''))
sfsglr2.par('gp',rsf.doc.rsfpar('int','0','','''recorder depth on index'''))
sfsglr2.par('srcdecay',rsf.doc.rsfpar('bool','n','','''source decay'''))
sfsglr2.par('srcrange',rsf.doc.rsfpar('int','10','','''source decay range'''))
sfsglr2.par('srctrunc',rsf.doc.rsfpar('float','100','','''trunc source after srctrunc time (s)'''))
sfsglr2.version('2.1-git')
sfsglr2.synopsis('''sfsglr2 vel=Fvel.rsf den=Fden.rsf < Fsrc.rsf > Fo.rsf rec=Frec.rsf left=left.rsf right=right.rsf fft=Ffft.rsf verb=n cmplx=n pad1=1 gdep=0.0 slx=-1.0 spx=-1 slz=-1.0 spz=-1 gdep=-1.0 gp=0 srcdecay=n srcrange=10 srctrunc=100''','''''')
rsf.doc.progs['sfsglr2']=sfsglr2

sfsglr1 = rsf.doc.rsfprog('sfsglr1','user/fangg/Msglr1.c','''1-D lowrank wave propagation on staggered grid''')
sfsglr1.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglr1.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglr1.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsglr1.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglr1.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglr1.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglr1.par('ic',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglr1.par('presrc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglr1.par('velsrc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglr1.par('preinit',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglr1.par('velinit',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglr1.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfsglr1.par('srcmms',rsf.doc.rsfpar('bool','n','','''use MMS source '''))
sfsglr1.par('slx',rsf.doc.rsfpar('float','','','''source location in x '''))
sfsglr1.par('srcdecay',rsf.doc.rsfpar('bool','y','','''source decay'''))
sfsglr1.par('srcrange',rsf.doc.rsfpar('int','10','','''source decay range'''))
sfsglr1.par('srctrunc',rsf.doc.rsfpar('float','100','','''trunc source after srctrunc time (s)'''))
sfsglr1.par('cmplx',rsf.doc.rsfpar('bool','n','','''use complex FFT '''))
sfsglr1.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfsglr1.par('inject',rsf.doc.rsfpar('bool','y','','''=y inject source; =n initial condition'''))
sfsglr1.par('gdep',rsf.doc.rsfpar('float','0.0','','''depth of geophone (meter)'''))
sfsglr1.version('2.1-git')
sfsglr1.synopsis('''sfsglr1 vel=Fvel.rsf den=Fden.rsf < Fsrc.rsf > Fo.rsf rec=Frec.rsf left=left.rsf right=right.rsf fft=Ffft.rsf ic=Fic.rsf presrc=Fpsrc.rsf velsrc=Fvsrc.rsf preinit=Fpint.rsf velinit=Fvint.rsf verb=n srcmms=n slx= srcdecay=y srcrange=10 srctrunc=100 cmplx=n pad1=1 inject=y gdep=0.0''','''''')
rsf.doc.progs['sfsglr1']=sfsglr1

sfsglfd2 = rsf.doc.rsfprog('sfsglfd2','user/fangg/Msglfd2.c','''2-D Low Rank Finite-difference wave extrapolation ''')
sfsglfd2.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd2.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd2.par('Gx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd2.par('Gz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd2.par('sxx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd2.par('sxz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd2.par('szx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd2.par('szz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity'''))
sfsglfd2.par('spx',rsf.doc.rsfpar('int','','','''source point in x '''))
sfsglfd2.par('spz',rsf.doc.rsfpar('int','','','''source point in z '''))
sfsglfd2.version('2.1-git')
sfsglfd2.synopsis('''sfsglfd2 < fsource.rsf vel=fvel.rsf den=fden.rsf > fwf.rsf Gx=fGx.rsf Gz=fGz.rsf sxx=fsxx.rsf sxz=fsxz.rsf szx=fszx.rsf szz=fszz.rsf verb=n spx= spz=''','''''')
rsf.doc.progs['sfsglfd2']=sfsglfd2

sfsglfd2_tfd = rsf.doc.rsfprog('sfsglfd2_tfd','user/fangg/Msglfd2_tfd.c','''2-D 4th-order Staggered Grid Finite-difference wave extrapolation ''')
sfsglfd2_tfd.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd2_tfd.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd2_tfd.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity'''))
sfsglfd2_tfd.par('oo',rsf.doc.rsfpar('int','4','',''''''))
sfsglfd2_tfd.par('spx',rsf.doc.rsfpar('int','','','''source point in x '''))
sfsglfd2_tfd.par('spz',rsf.doc.rsfpar('int','','','''source point in z '''))
sfsglfd2_tfd.version('2.1-git')
sfsglfd2_tfd.synopsis('''sfsglfd2_tfd < fsource.rsf vel=fvel.rsf den=fden.rsf > fwf.rsf verb=n oo=4 spx= spz=''','''''')
rsf.doc.progs['sfsglfd2_tfd']=sfsglfd2_tfd

sfsglfd2pml = rsf.doc.rsfprog('sfsglfd2pml','user/fangg/Msglfd2pml.c','''2-D Lowrank Finite-difference wave extrapolation on staggered grid''')
sfsglfd2pml.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd2pml.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd2pml.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsglfd2pml.par('Gx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd2pml.par('Gz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd2pml.par('sxx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd2pml.par('sxz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd2pml.par('szx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd2pml.par('szz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd2pml.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity'''))
sfsglfd2pml.par('srcdecay',rsf.doc.rsfpar('bool','n','','''source decay'''))
sfsglfd2pml.par('srcrange',rsf.doc.rsfpar('int','10','','''source decay range'''))
sfsglfd2pml.par('srctrunc',rsf.doc.rsfpar('float','100','','''trunc source after srctrunc time (s)'''))
sfsglfd2pml.par('snapinter',rsf.doc.rsfpar('int','1','','''snap interval '''))
sfsglfd2pml.par('pmlsize',rsf.doc.rsfpar('int','PMLOUT','','''size of PML layer '''))
sfsglfd2pml.par('pmld0',rsf.doc.rsfpar('int','PMLD0','','''PML parameter '''))
sfsglfd2pml.par('decay',rsf.doc.rsfpar('int','DECAY_FLAG','','''Flag of decay boundary condtion: 1 = use ; 0 = not use '''))
sfsglfd2pml.par('decaybegin',rsf.doc.rsfpar('int','DECAY_BEGIN','','''Begin time of using decay boundary condition '''))
sfsglfd2pml.par('freesurface',rsf.doc.rsfpar('bool','n','','''free surface'''))
sfsglfd2pml.par('slx',rsf.doc.rsfpar('float','-1.0','','''source location x '''))
sfsglfd2pml.par('spx',rsf.doc.rsfpar('int','-1','','''source location x (index)'''))
sfsglfd2pml.par('slz',rsf.doc.rsfpar('float','-1.0','','''source location z '''))
sfsglfd2pml.par('spz',rsf.doc.rsfpar('int','-1','','''source location z (index)'''))
sfsglfd2pml.par('gdep',rsf.doc.rsfpar('float','-1.0','','''recorder depth on grid'''))
sfsglfd2pml.par('gp',rsf.doc.rsfpar('int','0','','''recorder depth on index'''))
sfsglfd2pml.version('2.1-git')
sfsglfd2pml.synopsis('''sfsglfd2pml < fsource.rsf vel=fvel.rsf den=fden.rsf > fwf.rsf rec=frec.rsf Gx=fGx.rsf Gz=fGz.rsf sxx=fsxx.rsf sxz=fsxz.rsf szx=fszx.rsf szz=fszz.rsf verb=n srcdecay=n srcrange=10 srctrunc=100 snapinter=1 pmlsize=PMLOUT pmld0=PMLD0 decay=DECAY_FLAG decaybegin=DECAY_BEGIN freesurface=n slx=-1.0 spx=-1 slz=-1.0 spz=-1 gdep=-1.0 gp=0''','''''')
rsf.doc.progs['sfsglfd2pml']=sfsglfd2pml

sfsglfd1pml = rsf.doc.rsfprog('sfsglfd1pml','user/fangg/Msglfd1pml.c','''1-D Lowrank Finite-difference wave extrapolation ''')
sfsglfd1pml.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd1pml.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd1pml.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsglfd1pml.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd1pml.par('sx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd1pml.par('ic',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd1pml.par('presrc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd1pml.par('velsrc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd1pml.par('preinit',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd1pml.par('velinit',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfd1pml.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity'''))
sfsglfd1pml.par('srcmms',rsf.doc.rsfpar('bool','n','','''source type: if y, use point source '''))
sfsglfd1pml.par('slx',rsf.doc.rsfpar('float','','','''source location in x '''))
sfsglfd1pml.par('srcdecay',rsf.doc.rsfpar('bool','n','','''source decay y=use'''))
sfsglfd1pml.par('srctrunc',rsf.doc.rsfpar('float','1000','','''source trunc time (s)'''))
sfsglfd1pml.par('inject',rsf.doc.rsfpar('bool','y','','''inject=y use inject source; inject=n use initial condition'''))
sfsglfd1pml.par('gdep',rsf.doc.rsfpar('float','0.0','','''depth of geophone '''))
sfsglfd1pml.par('snapinter',rsf.doc.rsfpar('int','1','','''snap interval '''))
sfsglfd1pml.par('pmlsize',rsf.doc.rsfpar('int','PMLOUT','','''size of PML layer '''))
sfsglfd1pml.par('pmld0',rsf.doc.rsfpar('int','PMLD0','','''PML parameter '''))
sfsglfd1pml.par('decay',rsf.doc.rsfpar('int','DECAY_FLAG','','''Flag of decay boundary condtion: 1 = use ; 0 = not use '''))
sfsglfd1pml.par('decaybegin',rsf.doc.rsfpar('int','DECAY_BEGIN','','''Begin time of using decay boundary condition '''))
sfsglfd1pml.par('freesurface',rsf.doc.rsfpar('bool','n','','''free surface'''))
sfsglfd1pml.version('2.1-git')
sfsglfd1pml.synopsis('''sfsglfd1pml < Fsrc.rsf vel=Fvel.rsf den=Fden.rsf > Fwf.rsf rec=Frec.rsf G=FG.rsf sx=Fsx.rsf ic=Fic.rsf presrc=Fpsrc.rsf velsrc=Fvsrc.rsf preinit=Fpint.rsf velinit=Fvint.rsf verb=n srcmms=n slx= srcdecay=n srctrunc=1000 inject=y gdep=0.0 snapinter=1 pmlsize=PMLOUT pmld0=PMLD0 decay=DECAY_FLAG decaybegin=DECAY_BEGIN freesurface=n''','''''')
rsf.doc.progs['sfsglfd1pml']=sfsglfd1pml

sfsgfd1 = rsf.doc.rsfprog('sfsgfd1','user/fangg/Msgfd1.c','''1-D staggered Grid Finite-difference wave extrapolation ''')
sfsgfd1.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgfd1.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgfd1.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsgfd1.par('ic',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgfd1.par('presrc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgfd1.par('velsrc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgfd1.par('preinit',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgfd1.par('velinit',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgfd1.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity'''))
sfsgfd1.par('srcmms',rsf.doc.rsfpar('bool','n','','''source type: if y, use point source '''))
sfsgfd1.par('slx',rsf.doc.rsfpar('float','','','''source location in x '''))
sfsgfd1.par('srcdecay',rsf.doc.rsfpar('bool','n','','''source decay y=use'''))
sfsgfd1.par('srctrunc',rsf.doc.rsfpar('float','1000','','''source trunc time (s)'''))
sfsgfd1.par('inject',rsf.doc.rsfpar('bool','y','','''inject = y use inject source; inject =n use initial condition'''))
sfsgfd1.par('gdep',rsf.doc.rsfpar('float','0','','''recorder depth '''))
sfsgfd1.par('snapinter',rsf.doc.rsfpar('int','1','','''snap interval '''))
sfsgfd1.par('pmlsize',rsf.doc.rsfpar('int','PMLOUT','','''size of PML layer '''))
sfsgfd1.par('pmld0',rsf.doc.rsfpar('int','PMLD0','','''PML parameter '''))
sfsgfd1.par('decay',rsf.doc.rsfpar('int','DECAY_FLAG','','''Flag of decay boundary condtion: 1 = use ; 0 = not use '''))
sfsgfd1.par('decaybegin',rsf.doc.rsfpar('int','DECAY_BEGIN','','''Begin time of using decay boundary condition '''))
sfsgfd1.par('freesurface',rsf.doc.rsfpar('bool','n','','''free surface'''))
sfsgfd1.par('size',rsf.doc.rsfpar('int','4','','''FD half order'''))
sfsgfd1.version('2.1-git')
sfsgfd1.synopsis('''sfsgfd1 < Fsrc.rsf vel=Fvel.rsf den=Fden.rsf > Fwf.rsf rec=Frec.rsf ic=Fic.rsf presrc=Fpsrc.rsf velsrc=Fvsrc.rsf preinit=Fpint.rsf velinit=Fvint.rsf verb=n srcmms=n slx= srcdecay=n srctrunc=1000 inject=y gdep=0 snapinter=1 pmlsize=PMLOUT pmld0=PMLD0 decay=DECAY_FLAG decaybegin=DECAY_BEGIN freesurface=n size=4''','''''')
rsf.doc.progs['sfsgfd1']=sfsgfd1

sfweas1 = rsf.doc.rsfprog('sfweas1','user/fangg/Mweas1.c','''1-D analytic solution for acoustic wave equation ''')
sfweas1.par('vel',rsf.doc.rsfpar('float','','',''''''))
sfweas1.par('nx',rsf.doc.rsfpar('int','','',''''''))
sfweas1.par('dx',rsf.doc.rsfpar('float','','',''''''))
sfweas1.par('spx',rsf.doc.rsfpar('int','','','''source point in x'''))
sfweas1.par('kt',rsf.doc.rsfpar('int','','','''selected time'''))
sfweas1.par('ox',rsf.doc.rsfpar('float','0.0','',''''''))
sfweas1.par('rule',rsf.doc.rsfpar('string ',desc='''t, s : quadrature rules '''))
sfweas1.version('2.1-git')
sfweas1.synopsis('''sfweas1 < Fin.rsf > Fout.rsf vel= nx= dx= spx= kt= ox=0.0 rule=''','''''')
rsf.doc.progs['sfweas1']=sfweas1

sfweas2 = rsf.doc.rsfprog('sfweas2','user/fangg/Mweas2.c','''2-D analytic solution for acoustic wave equation ''')
sfweas2.par('vel',rsf.doc.rsfpar('float','','',''''''))
sfweas2.par('nx',rsf.doc.rsfpar('int','','',''''''))
sfweas2.par('dx',rsf.doc.rsfpar('float','','',''''''))
sfweas2.par('spx',rsf.doc.rsfpar('int','','','''source point in x'''))
sfweas2.par('selt',rsf.doc.rsfpar('float','','','''selected time'''))
sfweas2.par('ox',rsf.doc.rsfpar('float','0.0','',''''''))
sfweas2.par('rule',rsf.doc.rsfpar('string ',desc='''t, s : quadrature rules '''))
sfweas2.version('2.1-git')
sfweas2.synopsis('''sfweas2 < Fin.rsf > Fout.rsf vel= nx= dx= spx= selt= ox=0.0 rule=''','''''')
rsf.doc.progs['sfweas2']=sfweas2

sfmmssrc = rsf.doc.rsfprog('sfmmssrc','user/fangg/Mmmssrc.c','''Source for the method of manufactured solution ''')
sfmmssrc.par('mslt',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmmssrc.par('nt',rsf.doc.rsfpar('int','','','''number of time step'''))
sfmmssrc.par('dt',rsf.doc.rsfpar('float','','','''time step'''))
sfmmssrc.par('slx',rsf.doc.rsfpar('float','nx*dx*0.5','','''center of source location: x'''))
sfmmssrc.par('slz',rsf.doc.rsfpar('float','nz*dz*0.5','','''center of source location: z'''))
sfmmssrc.par('alpha',rsf.doc.rsfpar('float','1.0e-2','','''source parameter'''))
sfmmssrc.par('beta',rsf.doc.rsfpar('float','1.0','','''source parameter'''))
sfmmssrc.version('2.1-git')
sfmmssrc.synopsis('''sfmmssrc < Fvel.rsf > Fsrc.rsf mslt=Fslt.rsf nt= dt= slx=nx*dx*0.5 slz=nz*dz*0.5 alpha=1.0e-2 beta=1.0''','''''')
rsf.doc.progs['sfmmssrc']=sfmmssrc

sfmmssrc1 = rsf.doc.rsfprog('sfmmssrc1','user/fangg/Mmmssrc1.c','''1D Source for the method of manufactured solution ''')
sfmmssrc1.par('mslt',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmmssrc1.par('nt',rsf.doc.rsfpar('int','','','''number of time step'''))
sfmmssrc1.par('dt',rsf.doc.rsfpar('float','','','''time step'''))
sfmmssrc1.par('slx',rsf.doc.rsfpar('float','nx*dx*0.5','','''center of source location: x'''))
sfmmssrc1.par('alpha',rsf.doc.rsfpar('float','1.0e-2','','''source parameter'''))
sfmmssrc1.par('beta',rsf.doc.rsfpar('float','1.0','','''source parameter'''))
sfmmssrc1.version('2.1-git')
sfmmssrc1.synopsis('''sfmmssrc1 < Fvel.rsf > Fsrc.rsf mslt=Fslt.rsf nt= dt= slx=nx*dx*0.5 alpha=1.0e-2 beta=1.0''','''''')
rsf.doc.progs['sfmmssrc1']=sfmmssrc1

sfmms1dexp = rsf.doc.rsfprog('sfmms1dexp','user/fangg/Mmms1dexp.c','''1D method of manufactured solution using Gaussian pulsa''')
sfmms1dexp.par('dvel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmms1dexp.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmms1dexp.par('velhf',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmms1dexp.par('dvelhf',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmms1dexp.par('denhf',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmms1dexp.par('presrc',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmms1dexp.par('velsrc',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmms1dexp.par('preinit',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmms1dexp.par('velinit',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmms1dexp.par('nt',rsf.doc.rsfpar('int','','','''number of time step'''))
sfmms1dexp.par('dt',rsf.doc.rsfpar('float','','','''time step'''))
sfmms1dexp.par('slx',rsf.doc.rsfpar('float','nx*dx*0.5','','''center of source location: x'''))
sfmms1dexp.par('alpha',rsf.doc.rsfpar('float','1.0e-2','','''source parameter'''))
sfmms1dexp.version('2.1-git')
sfmms1dexp.synopsis('''sfmms1dexp < Fvel.rsf dvel=Fdvel.rsf den=Fden.rsf velhf=Fvelhf.rsf dvelhf=Fdvelhf.rsf denhf=Fdenhf.rsf presrc=Fpsrc.rsf velsrc=Fvsrc.rsf preinit=Fpint.rsf velinit=Fvint.rsf > Fmms.rsf nt= dt= slx=nx*dx*0.5 alpha=1.0e-2''','''''')
rsf.doc.progs['sfmms1dexp']=sfmms1dexp

sfsglfdrtm2 = rsf.doc.rsfprog('sfsglfdrtm2','user/fangg/Msglfdrtm2.c','''None''')
sfsglfdrtm2.par('fvel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfdrtm2.par('fden',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfdrtm2.par('bvel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfdrtm2.par('bden',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfdrtm2.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfdrtm2.par('img2',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsglfdrtm2.par('tmpwf',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsglfdrtm2.par('tmpbwf',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsglfdrtm2.par('Gx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfdrtm2.par('Gz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfdrtm2.par('sxx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfdrtm2.par('sxz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfdrtm2.par('szx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfdrtm2.par('szz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsglfdrtm2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity'''))
sfsglfdrtm2.par('wantwf',rsf.doc.rsfpar('bool','n','','''output forward and backward wavefield'''))
sfsglfdrtm2.par('wantrecord',rsf.doc.rsfpar('bool','y','','''if n, using record data generated by this program '''))
sfsglfdrtm2.par('srcdecay',rsf.doc.rsfpar('bool','SRCDECAY','','''source decay'''))
sfsglfdrtm2.par('srcrange',rsf.doc.rsfpar('int','SRCRANGE','','''source decay range'''))
sfsglfdrtm2.par('srctrunc',rsf.doc.rsfpar('float','SRCTRUNC','','''trunc source after srctrunc time (s)'''))
sfsglfdrtm2.par('pmlsize',rsf.doc.rsfpar('int','PMLOUT','','''size of PML layer '''))
sfsglfdrtm2.par('pmld0',rsf.doc.rsfpar('int','PMLD0','','''PML parameter '''))
sfsglfdrtm2.par('decay',rsf.doc.rsfpar('bool','DECAY_FLAG','','''Flag of decay boundary condtion: 1 = use ; 0 = not use '''))
sfsglfdrtm2.par('decaybegin',rsf.doc.rsfpar('int','DECAY_BEGIN','','''Begin time of using decay boundary condition '''))
sfsglfdrtm2.par('freesurface',rsf.doc.rsfpar('bool','n','','''free surface'''))
sfsglfdrtm2.par('slx',rsf.doc.rsfpar('float','','','''source location x '''))
sfsglfdrtm2.par('spx',rsf.doc.rsfpar('int','','','''source location x (index)'''))
sfsglfdrtm2.par('slz',rsf.doc.rsfpar('float','','','''source location z '''))
sfsglfdrtm2.par('spz',rsf.doc.rsfpar('int','','','''source location z (index)'''))
sfsglfdrtm2.par('gdep',rsf.doc.rsfpar('float','','','''recorder depth on grid'''))
sfsglfdrtm2.par('gp',rsf.doc.rsfpar('int','','','''recorder depth on index'''))
sfsglfdrtm2.par('ginter',rsf.doc.rsfpar('int','1','','''geophone interval'''))
sfsglfdrtm2.par('snapinter',rsf.doc.rsfpar('int','10','','''snap interval '''))
sfsglfdrtm2.version('2.1-git')
sfsglfdrtm2.synopsis('''sfsglfdrtm2 < Fsrc.rsf fvel=Ffvel.rsf fden=Ffden.rsf bvel=Fbvel.rsf bden=Fbden.rsf rec=Frcd.rsf > Fimg1.rsf img2=Fimg2.rsf tmpwf=Ftmpwf.rsf tmpbwf=Ftmpbwf.rsf Gx=FGx.rsf Gz=FGz.rsf sxx=Fsxx.rsf sxz=Fsxz.rsf szx=Fszx.rsf szz=Fszz.rsf verb=n wantwf=n wantrecord=y srcdecay=SRCDECAY srcrange=SRCRANGE srctrunc=SRCTRUNC pmlsize=PMLOUT pmld0=PMLD0 decay=DECAY_FLAG decaybegin=DECAY_BEGIN freesurface=n slx= spx= slz= spz= gdep= gp= ginter=1 snapinter=10''','''''')
rsf.doc.progs['sfsglfdrtm2']=sfsglfdrtm2

sfstackimg = rsf.doc.rsfprog('sfstackimg','user/fangg/Mstackimg.c','''Stack multi-shots images ''')
sfstackimg.version('2.1-git')
sfstackimg.synopsis('''sfstackimg < Fin.rsf > Fout.rsf file0.rsf file1.rsf file2.rsf ...''','''''')
rsf.doc.progs['sfstackimg']=sfstackimg

sfmatrix = rsf.doc.rsfprog('sfmatrix','user/fangg/Mmatrix.c','''multiply, for Matrix ''')
sfmatrix.par('B',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmatrix.version('2.1-git')
sfmatrix.synopsis('''sfmatrix < inA.rsf B=inB.rsf > outC.rsf''','''''')
rsf.doc.progs['sfmatrix']=sfmatrix

sfisolrsg1 = rsf.doc.rsfprog('sfisolrsg1','user/fangg/Misolrsg1.cc','''Lowrank decomposition for 1-D isotropic wave propagation. ''')
sfisolrsg1.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfisolrsg1.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfisolrsg1.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfisolrsg1.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfisolrsg1.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfisolrsg1.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfisolrsg1.version('2.1-git')
sfisolrsg1.synopsis('''sfisolrsg1 < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfisolrsg1']=sfisolrsg1

sfisolrsg2 = rsf.doc.rsfprog('sfisolrsg2','user/fangg/Misolrsg2.cc','''Lowrank decomposition for 2-D isotropic wave propagation. ''')
sfisolrsg2.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfisolrsg2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfisolrsg2.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfisolrsg2.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfisolrsg2.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfisolrsg2.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfisolrsg2.version('2.1-git')
sfisolrsg2.synopsis('''sfisolrsg2 < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfisolrsg2']=sfisolrsg2

sfsglfdcx2_7 = rsf.doc.rsfprog('sfsglfdcx2_7','user/fangg/Msglfdcx2_7.cc','''2D Lowrank FD coefficient of d/dx on staggered grid (optimized)''')
sfsglfdcx2_7.par('sx',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsglfdcx2_7.par('sz',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsglfdcx2_7.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfsglfdcx2_7.par('eps',rsf.doc.rsfpar('','1.e-6','','''tolerance'''))
sfsglfdcx2_7.par('npk',rsf.doc.rsfpar('','50','','''maximum rank'''))
sfsglfdcx2_7.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfsglfdcx2_7.par('size',rsf.doc.rsfpar('','6','','''stencil length'''))
sfsglfdcx2_7.par('wavnumcut',rsf.doc.rsfpar('','1.0','','''wavenumber cut percentile'''))
sfsglfdcx2_7.version('2.1-git')
sfsglfdcx2_7.synopsis('''sfsglfdcx2_7 < velf.rsf > outm.rsf sx=fsx.rsf sz=fsz.rsf seed=time(NULL eps=1.e-6 npk=50 dt= size=6 wavnumcut=1.0''','''''')
rsf.doc.progs['sfsglfdcx2_7']=sfsglfdcx2_7

sfsglfdcz2_7 = rsf.doc.rsfprog('sfsglfdcz2_7','user/fangg/Msglfdcz2_7.cc','''2D Lowrank FD coefficient of d/dx on staggered grid''')
sfsglfdcz2_7.par('sx',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsglfdcz2_7.par('sz',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsglfdcz2_7.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfsglfdcz2_7.par('eps',rsf.doc.rsfpar('','1.e-6','','''tolerance'''))
sfsglfdcz2_7.par('npk',rsf.doc.rsfpar('','50','','''maximum rank'''))
sfsglfdcz2_7.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfsglfdcz2_7.par('size',rsf.doc.rsfpar('','6','','''stencil length'''))
sfsglfdcz2_7.par('wavnumcut',rsf.doc.rsfpar('','1.0','','''wavenumber cut percentile'''))
sfsglfdcz2_7.version('2.1-git')
sfsglfdcz2_7.synopsis('''sfsglfdcz2_7 < velf.rsf > outm.rsf sx=fsx.rsf sz=fsz.rsf seed=time(NULL eps=1.e-6 npk=50 dt= size=6 wavnumcut=1.0''','''''')
rsf.doc.progs['sfsglfdcz2_7']=sfsglfdcz2_7

sfsglfdcx1 = rsf.doc.rsfprog('sfsglfdcx1','user/fangg/Msglfdcx1.cc','''1D Lowrank FD coefficient of d/dx on staggered grid''')
sfsglfdcx1.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfsglfdcx1.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfsglfdcx1.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfsglfdcx1.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfsglfdcx1.par('size',rsf.doc.rsfpar('','6','','''stencil length'''))
sfsglfdcx1.version('2.1-git')
sfsglfdcx1.synopsis('''sfsglfdcx1 < velf.rsf > outm.rsf seed=time(NULL eps=1.e-4 npk=20 dt= size=6''','''''')
rsf.doc.progs['sfsglfdcx1']=sfsglfdcx1

sfsglfdc1 = rsf.doc.rsfprog('sfsglfdc1','user/fangg/Msglfdc1.cc','''1D Lowrank FD coefficient of d/dx on staggered grid (optimized)''')
sfsglfdc1.par('sx',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsglfdc1.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfsglfdc1.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfsglfdc1.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfsglfdc1.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfsglfdc1.par('wavnumcut',rsf.doc.rsfpar('','1.0','','''wavenumber cut percentile'''))
sfsglfdc1.par('size',rsf.doc.rsfpar('','6','','''stencil length'''))
sfsglfdc1.version('2.1-git')
sfsglfdc1.synopsis('''sfsglfdc1 < velf.rsf > outm.rsf sx=fsx.rsf seed=time(NULL eps=1.e-4 npk=20 dt= wavnumcut=1.0 size=6''','''''')
rsf.doc.progs['sfsglfdc1']=sfsglfdc1

sfsglfdcx1a = rsf.doc.rsfprog('sfsglfdcx1a','user/fangg/Msglfdcx1a.cc','''None''')
sfsglfdcx1a.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfsglfdcx1a.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfsglfdcx1a.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfsglfdcx1a.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfsglfdcx1a.par('size',rsf.doc.rsfpar('','6','','''stencil length'''))
sfsglfdcx1a.version('2.1-git')
sfsglfdcx1a.synopsis('''sfsglfdcx1a < velf.rsf > outm.rsf seed=time(NULL eps=1.e-4 npk=20 dt= size=6''','''''')
rsf.doc.progs['sfsglfdcx1a']=sfsglfdcx1a

sfsglfdc1a = rsf.doc.rsfprog('sfsglfdc1a','user/fangg/Msglfdc1a.cc','''1D Lowrank FD coefficient of d/dx on staggered grid (optimized)''')
sfsglfdc1a.par('sx',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsglfdc1a.par('Mexact',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsglfdc1a.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfsglfdc1a.par('taper',rsf.doc.rsfpar('','1.e-3','','''taper for stability'''))
sfsglfdc1a.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfsglfdc1a.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfsglfdc1a.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfsglfdc1a.par('wavnumcut',rsf.doc.rsfpar('','1.0','','''wavenumber cut percentile'''))
sfsglfdc1a.par('size',rsf.doc.rsfpar('','6','','''stencil length'''))
sfsglfdc1a.version('2.1-git')
sfsglfdc1a.synopsis('''sfsglfdc1a < velf.rsf > outm.rsf sx=fsx.rsf Mexact=Mexactfile.rsf seed=time(NULL taper=1.e-3 eps=1.e-4 npk=20 dt= wavnumcut=1.0 size=6''','''''')
rsf.doc.progs['sfsglfdc1a']=sfsglfdc1a

sfwlslfdc1 = rsf.doc.rsfprog('sfwlslfdc1','user/fangg/Mwlslfdc1.cc','''None''')
sfwlslfdc1.par('sx',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwlslfdc1.par('Mexact',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwlslfdc1.par('wfun',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwlslfdc1.par('Mapp',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwlslfdc1.par('tp',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwlslfdc1.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfwlslfdc1.par('f0',rsf.doc.rsfpar('','15','','''dominant frequency'''))
sfwlslfdc1.par('a0',rsf.doc.rsfpar('','0.0001','','''weight parameters'''))
sfwlslfdc1.par('tpa',rsf.doc.rsfpar('','0.0','','''taper for stability'''))
sfwlslfdc1.par('tpb',rsf.doc.rsfpar('','0.0','',''''''))
sfwlslfdc1.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfwlslfdc1.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfwlslfdc1.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfwlslfdc1.par('weight',rsf.doc.rsfpar('','true','',''''''))
sfwlslfdc1.par('size',rsf.doc.rsfpar('','6','','''stencil length'''))
sfwlslfdc1.version('2.1-git')
sfwlslfdc1.synopsis('''sfwlslfdc1 < velf.rsf > outm.rsf sx=fsx.rsf Mexact=Mexactfile.rsf wfun=Mwfun.rsf Mapp=Mappfile.rsf tp=Mtpfile.rsf seed=time(NULL f0=15 a0=0.0001 tpa=0.0 tpb=0.0 eps=1.e-4 npk=20 dt= weight=true size=6''','''''')
rsf.doc.progs['sfwlslfdc1']=sfwlslfdc1

sfwlslfdc1tw2 = rsf.doc.rsfprog('sfwlslfdc1tw2','user/fangg/Mwlslfdc1tw2.cc','''None''')
sfwlslfdc1tw2.par('sx',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwlslfdc1tw2.par('Mwatpw',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwlslfdc1tw2.par('wfun',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwlslfdc1tw2.par('Mapp',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwlslfdc1tw2.par('tp',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwlslfdc1tw2.par('waw',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwlslfdc1tw2.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfwlslfdc1tw2.par('f0',rsf.doc.rsfpar('','15','','''dominant frequency'''))
sfwlslfdc1tw2.par('a0',rsf.doc.rsfpar('','0.0001','','''weight parameters'''))
sfwlslfdc1tw2.par('taper',rsf.doc.rsfpar('','true','',''''''))
sfwlslfdc1tw2.par('tpa',rsf.doc.rsfpar('','0.0','','''taper for stability'''))
sfwlslfdc1tw2.par('tpb',rsf.doc.rsfpar('','0.0','',''''''))
sfwlslfdc1tw2.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfwlslfdc1tw2.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfwlslfdc1tw2.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfwlslfdc1tw2.par('weight',rsf.doc.rsfpar('','true','',''''''))
sfwlslfdc1tw2.par('size',rsf.doc.rsfpar('','6','','''stencil length'''))
sfwlslfdc1tw2.version('2.1-git')
sfwlslfdc1tw2.synopsis('''sfwlslfdc1tw2 < velf.rsf > outm.rsf sx=fsx.rsf Mwatpw=Mwatpwfile.rsf wfun=Mwfun.rsf Mapp=Mappfile.rsf tp=Mtpfile.rsf waw=Mwawfile.rsf seed=time(NULL f0=15 a0=0.0001 taper=true tpa=0.0 tpb=0.0 eps=1.e-4 npk=20 dt= weight=true size=6''','''''')
rsf.doc.progs['sfwlslfdc1tw2']=sfwlslfdc1tw2

sfwlslfdc1ww = rsf.doc.rsfprog('sfwlslfdc1ww','user/fangg/Mwlslfdc1ww.cc','''None''')
sfwlslfdc1ww.par('sx',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwlslfdc1ww.par('Mexact',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwlslfdc1ww.par('wfun',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwlslfdc1ww.par('Mapp',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwlslfdc1ww.par('wtfull',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwlslfdc1ww.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfwlslfdc1ww.par('f0',rsf.doc.rsfpar('','15','','''dominant frequency'''))
sfwlslfdc1ww.par('a0',rsf.doc.rsfpar('','0.0001','','''weight parameters'''))
sfwlslfdc1ww.par('taper',rsf.doc.rsfpar('','0.0','','''taper for stability'''))
sfwlslfdc1ww.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfwlslfdc1ww.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfwlslfdc1ww.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfwlslfdc1ww.par('wavnumcut',rsf.doc.rsfpar('','1.0','','''wavenumber cut percentile'''))
sfwlslfdc1ww.par('size',rsf.doc.rsfpar('','6','','''stencil length'''))
sfwlslfdc1ww.version('2.1-git')
sfwlslfdc1ww.synopsis('''sfwlslfdc1ww < velf.rsf > outm.rsf sx=fsx.rsf Mexact=Mexactfile.rsf wfun=Mwfun.rsf Mapp=Mappfile.rsf wtfull=Mwtfull.rsf seed=time(NULL f0=15 a0=0.0001 taper=0.0 eps=1.e-4 npk=20 dt= wavnumcut=1.0 size=6''','''''')
rsf.doc.progs['sfwlslfdc1ww']=sfwlslfdc1ww

sflslfdc1 = rsf.doc.rsfprog('sflslfdc1','user/fangg/Mlslfdc1.cc','''None''')
sflslfdc1.par('sx',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflslfdc1.par('Mexact',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflslfdc1.par('wfun',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflslfdc1.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sflslfdc1.par('f0',rsf.doc.rsfpar('','15','','''dominant frequency'''))
sflslfdc1.par('a0',rsf.doc.rsfpar('','0.0001','','''weight parameters'''))
sflslfdc1.par('taper',rsf.doc.rsfpar('','0.0','','''taper for stability'''))
sflslfdc1.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sflslfdc1.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sflslfdc1.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sflslfdc1.par('wavnumcut',rsf.doc.rsfpar('','1.0','','''wavenumber cut percentile'''))
sflslfdc1.par('size',rsf.doc.rsfpar('','6','','''stencil length'''))
sflslfdc1.version('2.1-git')
sflslfdc1.synopsis('''sflslfdc1 < velf.rsf > outm.rsf sx=fsx.rsf Mexact=Mexactfile.rsf wfun=Mwfun.rsf seed=time(NULL f0=15 a0=0.0001 taper=0.0 eps=1.e-4 npk=20 dt= wavnumcut=1.0 size=6''','''''')
rsf.doc.progs['sflslfdc1']=sflslfdc1

sfsglfdcp1 = rsf.doc.rsfprog('sfsglfdcp1','user/fangg/Msglfdcp1.cc','''Relative error of phase velocity of 16-th order 1D SG Lowrank FD and 1D FD coefficient ''')
sfsglfdcp1.par('Mfd',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsglfdcp1.par('Mlr',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsglfdcp1.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfsglfdcp1.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfsglfdcp1.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfsglfdcp1.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfsglfdcp1.par('size',rsf.doc.rsfpar('','16','','''stencil length'''))
sfsglfdcp1.version('2.1-git')
sfsglfdcp1.synopsis('''sfsglfdcp1 < velf.rsf > outm.rsf Mfd=Mfdfile.rsf Mlr=Mlrfile.rsf seed=time(NULL eps=1.e-4 npk=20 dt= size=16''','''''')
rsf.doc.progs['sfsglfdcp1']=sfsglfdcp1

