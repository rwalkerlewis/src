import rsf.doc

sfnorsar = rsf.doc.rsfprog('sfnorsar','user/urdaneta/Mnorsar.c','''Traveltime and amplitude estimation using wavefront construction. ''')
sfnorsar.par('ampl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfnorsar.par('time',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfnorsar.par('dirx',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfnorsar.par('dirz',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfnorsar.par('srcx',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfnorsar.par('srcz',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfnorsar.par('invgeo',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfnorsar.par('nang',rsf.doc.rsfpar('int','10','','''Number of take-off angles '''))
sfnorsar.par('rays',rsf.doc.rsfpar('int','0','','''If draw rays '''))
sfnorsar.par('wfront',rsf.doc.rsfpar('int','0','','''If draw wavefronts '''))
sfnorsar.par('gap',rsf.doc.rsfpar('int','1','','''Draw wavefronts every gap intervals '''))
sfnorsar.par('inter',rsf.doc.rsfpar('int','1','','''If use linear interpolation '''))
sfnorsar.par('DSmax',rsf.doc.rsfpar('float','5','','''Maximum distance between contiguos points of a wavefront '''))
sfnorsar.par('dt',rsf.doc.rsfpar('float','0.0005','','''time step '''))
sfnorsar.par('nt',rsf.doc.rsfpar('int','5','','''Number of time steps between wavefronts '''))
sfnorsar.par('nrmax',rsf.doc.rsfpar('int','2000','','''Maximum number of points that define a wavefront '''))
sfnorsar.par('lomx',rsf.doc.rsfpar('int','1','','''Use Lomax's waveray method '''))
sfnorsar.par('first',rsf.doc.rsfpar('int','1','','''Obtain first arrivals only '''))
sfnorsar.par('nou',rsf.doc.rsfpar('int','6','','''GET GRIDDING PARAMETERS '''))
sfnorsar.par('gnx',rsf.doc.rsfpar('int','nx','','''Coordinates of output grid '''))
sfnorsar.par('gnz',rsf.doc.rsfpar('int','nz','',''''''))
sfnorsar.par('gdx',rsf.doc.rsfpar('float','dx','',''''''))
sfnorsar.par('gdz',rsf.doc.rsfpar('float','dz','',''''''))
sfnorsar.par('gox',rsf.doc.rsfpar('float','ox','',''''''))
sfnorsar.par('goz',rsf.doc.rsfpar('float','oz','','''GET LOMAX SPECIFIC PARAMETERS '''))
sfnorsar.par('N',rsf.doc.rsfpar('int','3','','''Number of control points '''))
sfnorsar.par('TETAMAX',rsf.doc.rsfpar('float','1.5','','''Truncation parameter '''))
sfnorsar.par('alpha2',rsf.doc.rsfpar('float','4.0','','''Width of gaussian weighting function '''))
sfnorsar.par('freq',rsf.doc.rsfpar('float','100.','','''Pseudo-frequency of waverays '''))
sfnorsar.par('prcube',rsf.doc.rsfpar('int','0','','''For debugging porpouses '''))
sfnorsar.par('pr',rsf.doc.rsfpar('int','0','','''For debugging porpouses '''))
sfnorsar.par('ds',rsf.doc.rsfpar('float','1.','','''interval between sources '''))
sfnorsar.par('os',rsf.doc.rsfpar('float','0.','','''first source location '''))
sfnorsar.par('depth',rsf.doc.rsfpar('float','dz','','''Depth location of sources '''))
sfnorsar.version('2.1-git')
sfnorsar.synopsis('''sfnorsar < inp.rsf ampl=ampl.rsf time=time.rsf dirx=dirx.rsf dirz=dirz.rsf srcx=srcx.rsf srcz=srcz.rsf invgeo=invgeo.rsf nang=10 rays=0 wfront=0 gap=1 inter=1 DSmax=5 dt=0.0005 nt=5 nrmax=2000 lomx=1 first=1 nou=6 gnx=nx gnz=nz gdx=dx gdz=dz gox=ox goz=oz N=3 TETAMAX=1.5 alpha2=4.0 freq=100. prcube=0 pr=0 ds=1. os=0. depth=dz''','''''')
rsf.doc.progs['sfnorsar']=sfnorsar

