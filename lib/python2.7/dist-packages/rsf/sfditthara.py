import rsf.doc

sfemfdm2d_p = rsf.doc.rsfprog('sfemfdm2d_p','user/ditthara/Memfdm2d_p.c','''2D EM FD modeling ''')
sfemfdm2d_p.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfemfdm2d_p.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfemfdm2d_p.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfemfdm2d_p.par('mag',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfemfdm2d_p.par('ele',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfemfdm2d_p.par('cdt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfemfdm2d_p.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfemfdm2d_p.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sfemfdm2d_p.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sfemfdm2d_p.par('expl',rsf.doc.rsfpar('bool','n','','''"exploding reflector" '''))
sfemfdm2d_p.par('dabc',rsf.doc.rsfpar('bool','n','','''absorbing BC '''))
sfemfdm2d_p.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sfemfdm2d_p.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfemfdm2d_p.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfemfdm2d_p.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfemfdm2d_p.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfemfdm2d_p.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfemfdm2d_p.version('2.1-git')
sfemfdm2d_p.synopsis('''sfemfdm2d_p < Fwav.rsf sou=Fsou.rsf rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf mag=Fmag.rsf ele=Fele.rsf cdt=Fcdt.rsf verb=n snap=n free=n expl=n dabc=n jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) oqz=sf_o(az) oqx=sf_o(ax)''','''''')
rsf.doc.progs['sfemfdm2d_p']=sfemfdm2d_p

sfemfdm3d = rsf.doc.rsfprog('sfemfdm3d','user/ditthara/Memfdm3d.c','''3D Electromagnetic time-domain FD modeling''')
sfemfdm3d.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfemfdm3d.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfemfdm3d.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfemfdm3d.par('mag',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfemfdm3d.par('ele',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfemfdm3d.par('cdt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfemfdm3d.par('verb',rsf.doc.rsfpar('bool','n','','''Verbosity flag '''))
sfemfdm3d.par('snap',rsf.doc.rsfpar('bool','n','','''Wavefield snapshots flag '''))
sfemfdm3d.par('free',rsf.doc.rsfpar('bool','n','','''Free surface flag '''))
sfemfdm3d.par('expl',rsf.doc.rsfpar('bool','n','','''Multiple sources, one wvlt '''))
sfemfdm3d.par('dabc',rsf.doc.rsfpar('bool','n','','''Absorbing BC '''))
sfemfdm3d.par('jdata',rsf.doc.rsfpar('int','1','','''# of t steps at which to save receiver data '''))
sfemfdm3d.par('jsnap',rsf.doc.rsfpar('int','nt','','''# of t steps at which to save wavefield '''))
sfemfdm3d.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','','''Saved wfld window nz '''))
sfemfdm3d.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','','''Saved wfld window nx '''))
sfemfdm3d.par('nqy',rsf.doc.rsfpar('int','sf_n(ay)','','''Saved wfld window ny '''))
sfemfdm3d.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','','''Saved wfld window oz '''))
sfemfdm3d.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','','''Saved wfld window ox '''))
sfemfdm3d.par('oqy',rsf.doc.rsfpar('float','sf_o(ay)','','''Saved wfld window oy '''))
sfemfdm3d.par('dqz',rsf.doc.rsfpar('float','sf_d(az)','','''Saved wfld window dz '''))
sfemfdm3d.par('dqx',rsf.doc.rsfpar('float','sf_d(ax)','','''Saved wfld window dx '''))
sfemfdm3d.par('dqy',rsf.doc.rsfpar('float','sf_d(ay)','','''Saved wfld window dy '''))
sfemfdm3d.par('nb',rsf.doc.rsfpar('int','2','','''boundary padding in grid points '''))
sfemfdm3d.version('2.1-git')
sfemfdm3d.synopsis('''sfemfdm3d < Fwav.rsf sou=Fsou.rsf rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf mag=Fmag.rsf ele=Fele.rsf cdt=Fcdt.rsf verb=n snap=n free=n expl=n dabc=n jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) nqy=sf_n(ay) oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay) dqz=sf_d(az) dqx=sf_d(ax) dqy=sf_d(ay) nb=2''','''
4th order in space, 2nd order in time. Absorbing boundary conditions. ''')
rsf.doc.progs['sfemfdm3d']=sfemfdm3d

sfcic3d_ditthara = rsf.doc.rsfprog('sfcic3d_ditthara','user/ditthara/Mcic3d_ditthara.c','''Conventional IC 3D ''')
sfcic3d_ditthara.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcic3d_ditthara.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfcic3d_ditthara.par('isreversed',rsf.doc.rsfpar('bool','n','','''received wavefield '''))
sfcic3d_ditthara.version('2.1-git')
sfcic3d_ditthara.synopsis('''sfcic3d_ditthara < Fs.rsf ur=Fr.rsf > Fi.rsf verb=n isreversed=n''','''''')
rsf.doc.progs['sfcic3d_ditthara']=sfcic3d_ditthara

