import rsf.doc

sfafac = rsf.doc.rsfprog('sfafac','user/gee/Mafac.c','''Wilson-Burg factorization  ''')
sfafac.par('lag',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfafac.par('ompchunk',rsf.doc.rsfpar('int','1','','''OMP chunk size '''))
sfafac.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfafac.par('stable',rsf.doc.rsfpar('bool','n','','''stability flag '''))
sfafac.par('niter',rsf.doc.rsfpar('int','20','','''Wilson iterations '''))
sfafac.par('nn',rsf.doc.rsfpar('int','1000','','''Helix diameter '''))
sfafac.par('nf',rsf.doc.rsfpar('int','32','','''factor coefficients '''))
sfafac.par('lag',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfafac.version('2.1-git')
sfafac.synopsis('''sfafac < Fa.rsf > Ff.rsf lag=Fl.rsf ompchunk=1 verb=n stable=n niter=20 nn=1000 nf=32''','''''')
rsf.doc.progs['sfafac']=sfafac

sfahelicon = rsf.doc.rsfprog('sfahelicon','user/gee/Mahelicon.c','''Apply multidimensional nonstationary filter on a helix. ''')
sfahelicon.par('filt',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfahelicon.par('n',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfahelicon.par('dim',rsf.doc.rsfpar('int','ndim','','''number of dimensions '''))
sfahelicon.par('lag',rsf.doc.rsfpar('string','','','''file with filter lags '''))
sfahelicon.par('lag',rsf.doc.rsfpar('string ',desc='''file with filter lags'''))
sfahelicon.version('2.1-git')
sfahelicon.synopsis('''sfahelicon < in.rsf filt=filt.rsf > out.rsf n= dim=ndim lag=''','''''')
rsf.doc.progs['sfahelicon']=sfahelicon

sfahpef = rsf.doc.rsfprog('sfahpef','user/gee/Mahpef.c','''Adaptive multidimensional nonstationary PEF. ''')
sfahpef.par('maskin',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfahpef.par('a',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfahpef.par('center',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfahpef.par('gap',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfahpef.par('n',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfahpef.par('dim',rsf.doc.rsfpar('int','ndim','','''number of dimensions '''))
sfahpef.par('na',rsf.doc.rsfpar('int','0','','''filter size '''))
sfahpef.par('niter',rsf.doc.rsfpar('int','100','','''number of iterations '''))
sfahpef.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity flag '''))
sfahpef.par('lag',rsf.doc.rsfpar('string ',desc='''output file for filter lags '''))
sfahpef.par('res',rsf.doc.rsfpar('string ',desc='''output residual (optional) '''))
sfahpef.par('maskin',rsf.doc.rsfpar('string ',desc='''optional input mask file (auxiliary input file name)'''))
sfahpef.version('2.1-git')
sfahpef.synopsis('''sfahpef < in.rsf > filt.rsf maskin=mask.rsf a= center= gap= n= dim=ndim na=0 niter=100 verb=y lag= res=''','''''')
rsf.doc.progs['sfahpef']=sfahpef

sfautocorr = rsf.doc.rsfprog('sfautocorr','user/gee/Mautocorr.c','''Autocorrelation for helix filters. ''')
sfautocorr.par('lag',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfautocorr.par('lagout',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfautocorr.par('lag',rsf.doc.rsfpar('string ',desc='''optional input file with filter lags (auxiliary input file name)'''))
sfautocorr.par('lagout',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfautocorr.version('2.1-git')
sfautocorr.synopsis('''sfautocorr < in.rsf > out.rsf lag=lag0.rsf lagout=lag.rsf''','''''')
rsf.doc.progs['sfautocorr']=sfautocorr

sfburstnoise = rsf.doc.rsfprog('sfburstnoise','user/gee/Mburstnoise.c','''Synthetics with bursts of noise. ''')
sfburstnoise.par('sigma',rsf.doc.rsfpar('float','1.','','''noise magnitude '''))
sfburstnoise.par('thresh',rsf.doc.rsfpar('float','0.93','','''noise threshold '''))
sfburstnoise.par('thresh2',rsf.doc.rsfpar('float','0.4','','''noise threshold '''))
sfburstnoise.version('2.1-git')
sfburstnoise.synopsis('''sfburstnoise < in.rsf > out.rsf sigma=1. thresh=0.93 thresh2=0.4''','''''')
rsf.doc.progs['sfburstnoise']=sfburstnoise

sfcconv = rsf.doc.rsfprog('sfcconv','user/gee/Mcconv.c','''1-D convolution with complex numbers. ''')
sfcconv.par('filt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcconv.par('single',rsf.doc.rsfpar('bool','y','','''single channel or multichannel '''))
sfcconv.par('lag',rsf.doc.rsfpar('int','1','','''lag for internal convolution '''))
sfcconv.version('2.1-git Mconv.c 7107 2011-04-10 02:04:14Z ivlad')
sfcconv.synopsis('''sfcconv < in.rsf > out.rsf filt=filt.rsf single=y lag=1''','''''')
rsf.doc.progs['sfcconv']=sfcconv

sfckolmog = rsf.doc.rsfprog('sfckolmog','user/gee/Mckolmog.c','''complex Kolmogoroff spectral factorization. ''')
sfckolmog.version('2.1-git')
sfckolmog.synopsis('''sfckolmog < in.rsf > out.rsf''','''''')
rsf.doc.progs['sfckolmog']=sfckolmog

sfconflict = rsf.doc.rsfprog('sfconflict','user/gee/Mconflict.c','''2-D synthetic data of conflicting dips. ''')
sfconflict.par('n1',rsf.doc.rsfpar('int','150','',''''''))
sfconflict.par('n2',rsf.doc.rsfpar('int','80','',''''''))
sfconflict.version('2.1-git')
sfconflict.synopsis('''sfconflict > mod.rsf n1=150 n2=80''','''''')
rsf.doc.progs['sfconflict']=sfconflict

sfconv = rsf.doc.rsfprog('sfconv','user/gee/Mconv.c','''1-D convolution. ''')
sfconv.par('filt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfconv.par('trans',rsf.doc.rsfpar('bool','n','','''if y, transient convolution; if n, internal '''))
sfconv.par('each',rsf.doc.rsfpar('bool','n','','''if y, new filter for each trace '''))
sfconv.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sfconv.par('lag',rsf.doc.rsfpar('int','1','','''lag for internal convolution '''))
sfconv.version('2.1-git')
sfconv.synopsis('''sfconv < in.rsf > out.rsf filt=filt.rsf trans=n each=n adj=n lag=1''','''''')
rsf.doc.progs['sfconv']=sfconv

sfconvf = rsf.doc.rsfprog('sfconvf','user/gee/Mconvf.c','''1-D convolution, adjoint is the filter. ''')
sfconvf.par('other',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfconvf.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sfconvf.par('nf',rsf.doc.rsfpar('int','','','''filter size '''))
sfconvf.par('lag',rsf.doc.rsfpar('int','1','','''lag for internal convolution '''))
sfconvf.version('2.1-git')
sfconvf.synopsis('''sfconvf < inp.rsf > out.rsf other=oth.rsf adj=n nf= lag=1''','''''')
rsf.doc.progs['sfconvf']=sfconvf

sfcpef1 = rsf.doc.rsfprog('sfcpef1','user/gee/Mcpef1.c','''Estimate complex PEF on the first axis. ''')
sfcpef1.par('nf',rsf.doc.rsfpar('int','','','''filter length '''))
sfcpef1.par('niter',rsf.doc.rsfpar('int','2*nf','','''number of iterations '''))
sfcpef1.version('2.1-git')
sfcpef1.synopsis('''sfcpef1 < in.rsf > out.rsf nf= niter=2*nf''','''''')
rsf.doc.progs['sfcpef1']=sfcpef1

sfcube = rsf.doc.rsfprog('sfcube','user/gee/Mcube.c','''Simple cube fault synthetic ''')
sfcube.par('n',rsf.doc.rsfpar('int','51','','''cube dimensions '''))
sfcube.par('p',rsf.doc.rsfpar('float','0.5','','''inline slope '''))
sfcube.par('q',rsf.doc.rsfpar('float','0.5','','''crossline slope '''))
sfcube.version('2.1-git')
sfcube.synopsis('''sfcube > cube.rsf n=51 p=0.5 q=0.5''','''''')
rsf.doc.progs['sfcube']=sfcube

sfdecon = rsf.doc.rsfprog('sfdecon','user/gee/Mdecon.c','''Deconvolution (N-dimensional).''')
sfdecon.par('filt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdecon.par('predictive',rsf.doc.rsfpar('bool','n','','''if y, do predictive deconvolution '''))
sfdecon.par('rect1',rsf.doc.rsfpar('int','0','','''smoothing in the first axis '''))
sfdecon.par('lag',rsf.doc.rsfpar('string ',desc=''''''))
sfdecon.version('2.1-git')
sfdecon.synopsis('''sfdecon < in.rsf > out.rsf filt=filt.rsf predictive=n rect1=0 lag=''','''
Uses the helix and patching technology.
''')
rsf.doc.progs['sfdecon']=sfdecon

sfdeburst = rsf.doc.rsfprog('sfdeburst','user/gee/Mdeburst.c','''Remove bursty noise by IRLS. ''')
sfdeburst.par('niter',rsf.doc.rsfpar('int','10','','''number of iterations '''))
sfdeburst.par('eps',rsf.doc.rsfpar('float','1.','','''regularization parameter '''))
sfdeburst.par('norm',rsf.doc.rsfpar('string ',desc='''norm to use in IRLS (cauchy,l1) '''))
sfdeburst.version('2.1-git')
sfdeburst.synopsis('''sfdeburst < in.rsf > out.rsf niter=10 eps=1. norm=''','''''')
rsf.doc.progs['sfdeburst']=sfdeburst

sfdespike = rsf.doc.rsfprog('sfdespike','user/gee/Mdespike.c','''Remove spikes in by sliding 1-D medians. ''')
sfdespike.par('wide',rsf.doc.rsfpar('int','7','','''sliding window width '''))
sfdespike.version('2.1-git')
sfdespike.synopsis('''sfdespike < in.rsf > out.rsf wide=7''','''''')
rsf.doc.progs['sfdespike']=sfdespike

sfdespike2 = rsf.doc.rsfprog('sfdespike2','user/gee/Mdespike2.c','''Remove spikes in by sliding 2-D medians. ''')
sfdespike2.par('wide1',rsf.doc.rsfpar('int','5','',''''''))
sfdespike2.par('wide2',rsf.doc.rsfpar('int','5','','''sliding window width '''))
sfdespike2.version('2.1-git')
sfdespike2.synopsis('''sfdespike2 < in.rsf > out.rsf wide1=5 wide2=5''','''''')
rsf.doc.progs['sfdespike2']=sfdespike2

sfdespike3 = rsf.doc.rsfprog('sfdespike3','user/gee/Mdespike3.c','''Remove spikes in by sliding 3-D medians. ''')
sfdespike3.par('wide1',rsf.doc.rsfpar('int','5','',''''''))
sfdespike3.par('wide2',rsf.doc.rsfpar('int','5','',''''''))
sfdespike3.par('wide3',rsf.doc.rsfpar('int','5','','''sliding window width '''))
sfdespike3.version('2.1-git')
sfdespike3.synopsis('''sfdespike3 < in.rsf > out.rsf wide1=5 wide2=5 wide3=5''','''''')
rsf.doc.progs['sfdespike3']=sfdespike3

sffactorn = rsf.doc.rsfprog('sffactorn','user/gee/Mfactorn.c','''Missing data interpolation with 3-D plane-wave filter. ''')
sffactorn.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffactorn.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffactorn.par('eps',rsf.doc.rsfpar('float','0.001','',''''''))
sffactorn.par('nt',rsf.doc.rsfpar('int','','',''''''))
sffactorn.par('nx',rsf.doc.rsfpar('int','','',''''''))
sffactorn.par('npx',rsf.doc.rsfpar('int','100','',''''''))
sffactorn.par('npy',rsf.doc.rsfpar('int','100','',''''''))
sffactorn.par('niter',rsf.doc.rsfpar('int','10','','''number of factorization iterations '''))
sffactorn.par('miter',rsf.doc.rsfpar('int','10','','''number of interpolation iterations '''))
sffactorn.version('2.1-git')
sffactorn.synopsis('''sffactorn < in.rsf > out.rsf dip=dip.rsf mask=mask.rsf eps=0.001 nt= nx= npx=100 npy=100 niter=10 miter=10''','''''')
rsf.doc.progs['sffactorn']=sffactorn

sffactorm = rsf.doc.rsfprog('sffactorm','user/gee/Mfactorm.c','''Plane-wave destruction with 3-D plane-wave filter. ''')
sffactorm.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffactorm.par('eps',rsf.doc.rsfpar('float','0.001','',''''''))
sffactorm.par('nt',rsf.doc.rsfpar('int','','',''''''))
sffactorm.par('nx',rsf.doc.rsfpar('int','','',''''''))
sffactorm.par('npx',rsf.doc.rsfpar('int','100','',''''''))
sffactorm.par('npy',rsf.doc.rsfpar('int','100','','''np = npx *npy; '''))
sffactorm.par('niter',rsf.doc.rsfpar('int','10','','''number of iterations '''))
sffactorm.version('2.1-git')
sffactorm.synopsis('''sffactorm < in.rsf > out.rsf dip=dip.rsf eps=0.001 nt= nx= npx=100 npy=100 niter=10''','''''')
rsf.doc.progs['sffactorm']=sffactorm

sfframe = rsf.doc.rsfprog('sfframe','user/gee/Mframe.c','''Create a frame for binning.''')
sfframe.par('xyz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfframe.par('base',rsf.doc.rsfpar('float','0.','','''base to be subtracted from z '''))
sfframe.version('2.1-git')
sfframe.synopsis('''sfframe < in.rsf > out.rsf xyz=xyzs.rsf base=0.''','''''')
rsf.doc.progs['sfframe']=sfframe

sffrog = rsf.doc.rsfprog('sffrog','user/gee/Mfrog.c','''Simple 2-D wave propagation ''')
sffrog.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffrog.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffrog.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sffrog.par('type',rsf.doc.rsfpar('int','0','','''Laplacian type '''))
sffrog.version('2.1-git')
sffrog.synopsis('''sffrog < Fw.rsf > Fo.rsf vel=Fv.rsf ref=Fr.rsf verb=n type=0''','''''')
rsf.doc.progs['sffrog']=sffrog

sfhcascade = rsf.doc.rsfprog('sfhcascade','user/gee/Mhcascade.c','''Multidimensional convolution cascade.''')
sfhcascade.par('filt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhcascade.par('n',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfhcascade.par('rect',rsf.doc.rsfpar('int','0','','''smoothing radius '''))
sfhcascade.par('lag',rsf.doc.rsfpar('string','','','''file with filter lags '''))
sfhcascade.par('lag',rsf.doc.rsfpar('string ',desc='''file with filter lags'''))
sfhcascade.version('2.1-git')
sfhcascade.synopsis('''sfhcascade < in.rsf filt=filt.rsf > out.rsf n= rect=0 lag=''','''''')
rsf.doc.progs['sfhcascade']=sfhcascade

sfhconv = rsf.doc.rsfprog('sfhconv','user/gee/Mhconv.c','''Convolution of two helix filters. ''')
sfhconv.par('other',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhconv.par('one',rsf.doc.rsfpar('bool','y','','''include leading one '''))
sfhconv.par('lag',rsf.doc.rsfpar('string ',desc=''''''))
sfhconv.version('2.1-git')
sfhconv.synopsis('''sfhconv < inp.rsf other=oth.rsf > out.rsf one=y lag=''','''''')
rsf.doc.progs['sfhconv']=sfhconv

sfheat3 = rsf.doc.rsfprog('sfheat3','user/gee/Mheat3.c','''Finite-difference 3-D heat-flow equation using helix ''')
sfheat3.par('n3',rsf.doc.rsfpar('int','10','',''''''))
sfheat3.par('nh',rsf.doc.rsfpar('int','5','',''''''))
sfheat3.version('2.1-git')
sfheat3.synopsis('''sfheat3 > out.rsf n3=10 nh=5''','''''')
rsf.doc.progs['sfheat3']=sfheat3

sfhelicon = rsf.doc.rsfprog('sfhelicon','user/gee/Mhelicon.c','''Multidimensional convolution and deconvolution by helix transform. ''')
sfhelicon.par('filt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhelicon.par('n',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfhelicon.par('adj',rsf.doc.rsfpar('bool','n','','''if y, do adjoint operation '''))
sfhelicon.par('div',rsf.doc.rsfpar('bool','n','','''if y, do inverse operation (deconvolution) '''))
sfhelicon.par('lag',rsf.doc.rsfpar('string','','','''file with filter lags '''))
sfhelicon.par('lag',rsf.doc.rsfpar('string ',desc='''file with filter lags'''))
sfhelicon.version('2.1-git')
sfhelicon.synopsis('''sfhelicon < in.rsf filt=filt.rsf > out.rsf n= adj=n div=n lag=''','''
May 2014 program of the month:
http://ahay.org/blog/2014/05/13/program-of-the-month-sfhelicon/
''')
rsf.doc.progs['sfhelicon']=sfhelicon

sfhmiss = rsf.doc.rsfprog('sfhmiss','user/gee/Mhmiss.c','''Multi-dimensional missing data interpolation with shaping regularization. ''')
sfhmiss.par('filt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhmiss.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhmiss.par('n',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfhmiss.par('ns',rsf.doc.rsfpar('int','','','''scaling '''))
sfhmiss.par('niter',rsf.doc.rsfpar('int','100','','''Number of iterations '''))
sfhmiss.par('eps',rsf.doc.rsfpar('float','1.','','''regularization parameter '''))
sfhmiss.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity flag '''))
sfhmiss.par('lag',rsf.doc.rsfpar('string ',desc=''''''))
sfhmiss.par('mask',rsf.doc.rsfpar('string ',desc='''optional input mask file for known data (auxiliary input file name)'''))
sfhmiss.version('2.1-git')
sfhmiss.synopsis('''sfhmiss < in.rsf filt=filt.rsf > out.rsf mask=mask.rsf n= ns= niter=100 eps=1. verb=y lag=''','''''')
rsf.doc.progs['sfhmiss']=sfhmiss

sfhole = rsf.doc.rsfprog('sfhole','user/gee/Mhole.c','''Cut an elliptic hole in data (for interpolation tests).''')
sfhole.par('maskout',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfhole.version('2.1-git')
sfhole.synopsis('''sfhole < in.rsf > out.rsf maskout=mask.rsf''','''''')
rsf.doc.progs['sfhole']=sfhole

sfhpef = rsf.doc.rsfprog('sfhpef','user/gee/Mhpef.c','''Multi-dimensional PEF (prediction error filter) estimation on a helix. ''')
sfhpef.par('maskin',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhpef.par('a',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfhpef.par('center',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfhpef.par('gap',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfhpef.par('n',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfhpef.par('na',rsf.doc.rsfpar('int','0','','''filter size '''))
sfhpef.par('tol',rsf.doc.rsfpar('float','1.e-6','','''tolerance for filter compression '''))
sfhpef.par('niter',rsf.doc.rsfpar('int','2*(aa->nh)','','''number of iterations '''))
sfhpef.par('lag',rsf.doc.rsfpar('string ',desc='''output file for filter lags '''))
sfhpef.par('maskin',rsf.doc.rsfpar('string ',desc='''optional input mask file (auxiliary input file name)'''))
sfhpef.par('maskout',rsf.doc.rsfpar('string ',desc='''optional output mask file '''))
sfhpef.version('2.1-git')
sfhpef.synopsis('''sfhpef < in.rsf > filt.rsf maskin=mask.rsf a= center= gap= n= na=0 tol=1.e-6 niter=2*(aa->nh) lag= maskout=''','''''')
rsf.doc.progs['sfhpef']=sfhpef

sfhshape = rsf.doc.rsfprog('sfhshape','user/gee/Mhshape.c','''Multidimensional shaping using helix transform. ''')
sfhshape.par('filt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhshape.par('n',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfhshape.par('adj',rsf.doc.rsfpar('bool','n','','''if y, do adjoint operation '''))
sfhshape.par('ns',rsf.doc.rsfpar('int','','','''scaling '''))
sfhshape.par('lag',rsf.doc.rsfpar('string ',desc=''''''))
sfhshape.version('2.1-git')
sfhshape.synopsis('''sfhshape < in.rsf filt=filt.rsf > out.rsf n= adj=n ns= lag=''','''''')
rsf.doc.progs['sfhshape']=sfhshape

sfidempatch = rsf.doc.rsfprog('sfidempatch','user/gee/Midempatch.c','''Patching test. ''')
sfidempatch.par('wind',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfidempatch.par('n1',rsf.doc.rsfpar('int','100','',''''''))
sfidempatch.par('n2',rsf.doc.rsfpar('int','30','',''''''))
sfidempatch.par('w1',rsf.doc.rsfpar('int','17','',''''''))
sfidempatch.par('w2',rsf.doc.rsfpar('int','6','',''''''))
sfidempatch.par('k1',rsf.doc.rsfpar('int','5','',''''''))
sfidempatch.par('k2',rsf.doc.rsfpar('int','11','',''''''))
sfidempatch.par('a1',rsf.doc.rsfpar('int','1','',''''''))
sfidempatch.par('a2',rsf.doc.rsfpar('int','1','',''''''))
sfidempatch.par('lag1',rsf.doc.rsfpar('int','1','',''''''))
sfidempatch.par('lag2',rsf.doc.rsfpar('int','1','',''''''))
sfidempatch.par('wind',rsf.doc.rsfpar('string ',desc='''optional output file for window weight (auxiliary output file name)'''))
sfidempatch.version('2.1-git')
sfidempatch.synopsis('''sfidempatch > out.rsf wind=wind.rsf n1=100 n2=30 w1=17 w2=6 k1=5 k2=11 a1=1 a2=1 lag1=1 lag2=1''','''''')
rsf.doc.progs['sfidempatch']=sfidempatch

sfimospray = rsf.doc.rsfprog('sfimospray','user/gee/Mimospray.c','''Inversion of constant-velocity nearest-neighbor inverse NMO. ''')
sfimospray.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sfimospray.par('n2',rsf.doc.rsfpar('int','20','','''number of offsets (if inv=n) '''))
sfimospray.par('d2',rsf.doc.rsfpar('float','200.','','''offset sampling (if inv=n) '''))
sfimospray.par('o2',rsf.doc.rsfpar('float','0.','','''offset origin (if inv=n) '''))
sfimospray.par('v',rsf.doc.rsfpar('float','1000.','','''velocity '''))
sfimospray.version('2.1-git')
sfimospray.synopsis('''sfimospray < in.rsf > out.rsf adj=n n2=20 d2=200. o2=0. v=1000.''','''''')
rsf.doc.progs['sfimospray']=sfimospray

sfinvbin = rsf.doc.rsfprog('sfinvbin','user/gee/Minvbin.c','''Data interpolation in 2-D slices using helix preconditioning. ''')
sfinvbin.par('filt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfinvbin.par('pch',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfinvbin.par('n',rsf.doc.rsfpar('ints','','',''' [2]'''))
sfinvbin.par('xkey',rsf.doc.rsfpar('int','','','''x key number '''))
sfinvbin.par('ykey',rsf.doc.rsfpar('int','','','''y key number '''))
sfinvbin.par('xmax',rsf.doc.rsfpar('float','','',''''''))
sfinvbin.par('xmin',rsf.doc.rsfpar('float','','',''''''))
sfinvbin.par('ymax',rsf.doc.rsfpar('float','','',''''''))
sfinvbin.par('ymin',rsf.doc.rsfpar('float','','','''Grid dimensions '''))
sfinvbin.par('x0',rsf.doc.rsfpar('float','xmin','',''''''))
sfinvbin.par('y0',rsf.doc.rsfpar('float','ymin','','''grid origin '''))
sfinvbin.par('nx',rsf.doc.rsfpar('int','(int) (xmax - xmin + 1.)','','''Number of bins in x '''))
sfinvbin.par('ny',rsf.doc.rsfpar('int','(int) (ymax - ymin + 1.)','','''Number of bins in y '''))
sfinvbin.par('dx',rsf.doc.rsfpar('float','','','''bin size in x '''))
sfinvbin.par('dy',rsf.doc.rsfpar('float','','','''bin size in y '''))
sfinvbin.par('interp',rsf.doc.rsfpar('int','2','','''interpolation length '''))
sfinvbin.par('der',rsf.doc.rsfpar('bool','n','','''if y, apply derivative filter on the residual '''))
sfinvbin.par('stat',rsf.doc.rsfpar('bool','y','','''stationary or nonstationary filter '''))
sfinvbin.par('niter',rsf.doc.rsfpar('int','20','','''number of iterations '''))
sfinvbin.par('eps',rsf.doc.rsfpar('float','0.01','','''regularization parameter '''))
sfinvbin.par('head',rsf.doc.rsfpar('string ',desc=''''''))
sfinvbin.par('lag',rsf.doc.rsfpar('string ',desc=''''''))
sfinvbin.par('nh',rsf.doc.rsfpar('string ',desc=''''''))
sfinvbin.version('2.1-git Mbin.c 991 2005-02-10 11:42:19Z fomels')
sfinvbin.synopsis('''sfinvbin < in.rsf > out.rsf filt=flt.rsf pch=pch.rsf n= xkey= ykey= xmax= xmin= ymax= ymin= x0=xmin y0=ymin nx=(int) (xmax - xmin + 1.) ny=(int) (ymax - ymin + 1.) dx= dy= interp=2 der=n stat=y niter=20 eps=0.01 head= lag= nh=''','''''')
rsf.doc.progs['sfinvbin']=sfinvbin

sfinvbin1 = rsf.doc.rsfprog('sfinvbin1','user/gee/Minvbin1.c','''1-D inverse interpolation. ''')
sfinvbin1.par('nx',rsf.doc.rsfpar('int','','','''number of bins '''))
sfinvbin1.par('xmin',rsf.doc.rsfpar('float','','','''grid size '''))
sfinvbin1.par('xmax',rsf.doc.rsfpar('float','','',''''''))
sfinvbin1.par('x0',rsf.doc.rsfpar('float','xmin','','''grid origin '''))
sfinvbin1.par('dx',rsf.doc.rsfpar('float','','','''grid sampling '''))
sfinvbin1.par('filter',rsf.doc.rsfpar('int','1','','''filter type '''))
sfinvbin1.par('prec',rsf.doc.rsfpar('bool','y','','''if y, use preconditioning '''))
sfinvbin1.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfinvbin1.par('niter',rsf.doc.rsfpar('int','nx','','''number of conjugate-gradient iterations '''))
sfinvbin1.par('eps',rsf.doc.rsfpar('float','0.2','','''regularization parameter '''))
sfinvbin1.par('pef',rsf.doc.rsfpar('bool','n','','''if y, use PEF for regularization '''))
sfinvbin1.par('head',rsf.doc.rsfpar('string ',desc=''''''))
sfinvbin1.version('2.1-git')
sfinvbin1.synopsis('''sfinvbin1 < in.rsf > out.rsf nx= xmin= xmax= x0=xmin dx= filter=1 prec=y verb=n niter=nx eps=0.2 pef=n head=''','''''')
rsf.doc.progs['sfinvbin1']=sfinvbin1

sfinvrec1 = rsf.doc.rsfprog('sfinvrec1','user/gee/Minvrec1.c','''1-D inverse interpolation with recursive filtering. ''')
sfinvrec1.par('filt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfinvrec1.par('lag',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfinvrec1.par('nx',rsf.doc.rsfpar('int','','','''number of bins '''))
sfinvrec1.par('xmin',rsf.doc.rsfpar('float','','','''grid size '''))
sfinvrec1.par('xmax',rsf.doc.rsfpar('float','','',''''''))
sfinvrec1.par('x0',rsf.doc.rsfpar('float','xmin','','''grid origin '''))
sfinvrec1.par('dx',rsf.doc.rsfpar('float','','','''grid sampling '''))
sfinvrec1.par('spline',rsf.doc.rsfpar('bool','n','','''if use spline interpolation '''))
sfinvrec1.par('nw',rsf.doc.rsfpar('int','2','','''interpolator size '''))
sfinvrec1.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfinvrec1.par('niter',rsf.doc.rsfpar('int','nx','','''number of conjugate-gradient iterations '''))
sfinvrec1.par('eps',rsf.doc.rsfpar('float','0.2','','''regularization parameter '''))
sfinvrec1.par('movie',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfinvrec1.par('head',rsf.doc.rsfpar('string ',desc=''''''))
sfinvrec1.par('lag',rsf.doc.rsfpar('string ',desc='''optional input file with filter lags (auxiliary input file name)'''))
sfinvrec1.version('2.1-git Minvbin1.c 2521 2007-02-02 00:25:42Z sfomel')
sfinvrec1.synopsis('''sfinvrec1 < in.rsf > out.rsf filt=filt.rsf lag=lag.rsf nx= xmin= xmax= x0=xmin dx= spline=n nw=2 verb=n niter=nx eps=0.2 movie=n head=''','''''')
rsf.doc.progs['sfinvrec1']=sfinvrec1

sfkolmog = rsf.doc.rsfprog('sfkolmog','user/gee/Mkolmog.c','''Kolmogoroff spectral factorization. ''')
sfkolmog.par('spec',rsf.doc.rsfpar('bool','n','','''if y, the input is spectrum squared; n, time-domain signal '''))
sfkolmog.par('lag',rsf.doc.rsfpar('int','0','','''lag for asymmetric part '''))
sfkolmog.par('shift',rsf.doc.rsfpar('int','0','','''time shift '''))
sfkolmog.version('2.1-git')
sfkolmog.synopsis('''sfkolmog < in.rsf > out.rsf spec=n lag=0 shift=0''','''''')
rsf.doc.progs['sfkolmog']=sfkolmog

sflevint = rsf.doc.rsfprog('sflevint','user/gee/Mlevint.c','''Leveler inverse interpolation in 1-D. ''')
sflevint.par('nx',rsf.doc.rsfpar('int','','','''number of bins '''))
sflevint.par('x0',rsf.doc.rsfpar('float','','','''grid origin '''))
sflevint.par('dx',rsf.doc.rsfpar('float','','','''grid sampling '''))
sflevint.par('niter',rsf.doc.rsfpar('int','1+m1*3/2','',''''''))
sflevint.par('eps',rsf.doc.rsfpar('float','0.2','','''regularization parameter '''))
sflevint.par('na',rsf.doc.rsfpar('int','3','',''''''))
sflevint.par('head',rsf.doc.rsfpar('string ',desc=''''''))
sflevint.version('2.1-git')
sflevint.synopsis('''sflevint < in.rsf > out.rsf nx= x0= dx= niter=1+m1*3/2 eps=0.2 na=3 head=''','''''')
rsf.doc.progs['sflevint']=sflevint

sflight = rsf.doc.rsfprog('sflight','user/gee/Mlight.c','''Apply 2-D directional high-pass to highlight data.''')
sflight.par('ax',rsf.doc.rsfpar('float','1.','','''x direction '''))
sflight.par('ay',rsf.doc.rsfpar('float','1.','','''y direction '''))
sflight.par('eps',rsf.doc.rsfpar('float','0.','','''highpass filter parameter; if eps=0, apply derivative '''))
sflight.version('2.1-git')
sflight.synopsis('''sflight < in.rsf > out.rsf ax=1. ay=1. eps=0.''','''''')
rsf.doc.progs['sflight']=sflight

sflint1 = rsf.doc.rsfprog('sflint1','user/gee/Mlint1.c','''Linear interpolation ''')
sflint1.par('coord',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflint1.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sflint1.par('n1',rsf.doc.rsfpar('int','','','''regular axis size (for adj=y) '''))
sflint1.par('o1',rsf.doc.rsfpar('float','','','''regular axis origin (for adj=y) '''))
sflint1.par('d1',rsf.doc.rsfpar('float','','','''regular axis sampling (for adj=y) '''))
sflint1.version('2.1-git')
sflint1.synopsis('''sflint1 coord=coord.rsf < dat.rsf > mod.rsf adj=n n1= o1= d1=''','''''')
rsf.doc.progs['sflint1']=sflint1

sflopef = rsf.doc.rsfprog('sflopef','user/gee/Mlopef.c','''Local Prediction-Error Filter (1-D, 2-D, and 3-D). ''')
sflopef.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflopef.par('w',rsf.doc.rsfpar('ints','','','''window size  [dim1]'''))
sflopef.par('a',rsf.doc.rsfpar('ints','','','''filter size  [dim1]'''))
sflopef.par('k',rsf.doc.rsfpar('ints','','','''number of windows  [dim1]'''))
sflopef.par('gap',rsf.doc.rsfpar('ints','','','''filter gap  [dim1]'''))
sflopef.par('center',rsf.doc.rsfpar('ints','','','''filter center  [dim1]'''))
sflopef.par('dim',rsf.doc.rsfpar('int','dim','','''PEF dimensionality '''))
sflopef.par('steepdip',rsf.doc.rsfpar('bool','n','','''if y, do steep-dip PEF estimation '''))
sflopef.par('vel',rsf.doc.rsfpar('float','1.7','','''velocity for steep-dip decon '''))
sflopef.par('tgap',rsf.doc.rsfpar('float','0.030','','''time gap for steep-dip decon '''))
sflopef.par('lag',rsf.doc.rsfpar('string ',desc='''output file for filter lags '''))
sflopef.par('mask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sflopef.version('2.1-git')
sflopef.synopsis('''sflopef < dat.rsf > pef.rsf mask=known.rsf w= a= k= gap= center= dim=dim steepdip=n vel=1.7 tgap=0.030 lag=''','''''')
rsf.doc.progs['sflopef']=sflopef

sflosignoi = rsf.doc.rsfprog('sflosignoi','user/gee/Mlosignoi.c','''Local signal and noise separation (N-dimensional).''')
sflosignoi.par('sfilt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflosignoi.par('nfilt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflosignoi.par('eps',rsf.doc.rsfpar('float','','','''regularization parameter '''))
sflosignoi.par('niter',rsf.doc.rsfpar('int','20','','''number of iterations '''))
sflosignoi.par('slag',rsf.doc.rsfpar('string ',desc=''''''))
sflosignoi.par('nlag',rsf.doc.rsfpar('string ',desc=''''''))
sflosignoi.version('2.1-git')
sflosignoi.synopsis('''sflosignoi < dat.rsf > signal.rsf sfilt=spef.rsf nfilt=npef.rsf eps= niter=20 slag= nlag=''','''
Signal and noise separation by inversion (super-deconvolution).
Uses the helix and patching technologies.
''')
rsf.doc.progs['sflosignoi']=sflosignoi

sflpef = rsf.doc.rsfprog('sflpef','user/gee/Mlpef.c','''Find PEF on aliased traces. ''')
sflpef.par('a',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sflpef.par('center',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sflpef.par('gap',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sflpef.par('jump',rsf.doc.rsfpar('int','2','',''''''))
sflpef.par('lag',rsf.doc.rsfpar('string ',desc='''output file for filter lags '''))
sflpef.version('2.1-git')
sflpef.synopsis('''sflpef < dat.rsf > pef.rsf a= center= gap= jump=2 lag=''','''''')
rsf.doc.progs['sflpef']=sflpef

sfmake = rsf.doc.rsfprog('sfmake','user/gee/Mmake.c','''Simple 2-D synthetics with crossing plane waves.''')
sfmake.par('n1',rsf.doc.rsfpar('int','100','',''''''))
sfmake.par('n2',rsf.doc.rsfpar('int','14','',''''''))
sfmake.par('n3',rsf.doc.rsfpar('int','1','','''dimensions '''))
sfmake.par('second',rsf.doc.rsfpar('bool','y','','''if n, only one plane wave is modeled '''))
sfmake.par('n',rsf.doc.rsfpar('int','3','',''''''))
sfmake.par('p',rsf.doc.rsfpar('int','3','',''''''))
sfmake.par('t1',rsf.doc.rsfpar('int','4','','''triangle smoother for first wave '''))
sfmake.par('t2',rsf.doc.rsfpar('int','4','','''triangle smoother for second wave '''))
sfmake.version('2.1-git')
sfmake.synopsis('''sfmake > mod.rsf n1=100 n2=14 n3=1 second=y n=3 p=3 t1=4 t2=4''','''''')
rsf.doc.progs['sfmake']=sfmake

sfmaskinv = rsf.doc.rsfprog('sfmaskinv','user/gee/Mmaskinv.c','''Missing data interpolation using one or two prediction-error filters. ''')
sfmaskinv.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmaskinv.par('center',rsf.doc.rsfpar('ints','','','''filter center  [dim]'''))
sfmaskinv.par('a',rsf.doc.rsfpar('ints','','','''first filter dimensions  [dim]'''))
sfmaskinv.par('b',rsf.doc.rsfpar('ints','','','''second filter dimensions  [dim]'''))
sfmaskinv.par('niter',rsf.doc.rsfpar('int','80','','''number of iterations '''))
sfmaskinv.version('2.1-git')
sfmaskinv.synopsis('''sfmaskinv < in.rsf > out.rsf mask=mask.rsf center= a= b= niter=80''','''''')
rsf.doc.progs['sfmaskinv']=sfmaskinv

sfmisif = rsf.doc.rsfprog('sfmisif','user/gee/Mmisif.c','''Find MISSing Input values and Filter in 1-D. ''')
sfmisif.par('filtout',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmisif.par('nmiss',rsf.doc.rsfpar('int','n1','','''number of iterations '''))
sfmisif.par('na',rsf.doc.rsfpar('int','3','','''filter size '''))
sfmisif.par('lag',rsf.doc.rsfpar('int','1','','''filter lag '''))
sfmisif.version('2.1-git')
sfmisif.synopsis('''sfmisif < in.rsf > out.rsf filtout=flt.rsf nmiss=n1 na=3 lag=1''','''''')
rsf.doc.progs['sfmisif']=sfmisif

sfmiss = rsf.doc.rsfprog('sfmiss','user/gee/Mmiss.c','''Multi-dimensional missing data interpolation. ''')
sfmiss.par('filt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmiss.par('lag',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmiss.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmiss.par('n',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfmiss.par('prec',rsf.doc.rsfpar('bool','y','','''If y, use preconditioning '''))
sfmiss.par('niter',rsf.doc.rsfpar('int','100','','''Number of iterations '''))
sfmiss.par('exact',rsf.doc.rsfpar('bool','y','','''If y, preserve the known data values (when prec=y) '''))
sfmiss.par('eps',rsf.doc.rsfpar('float','0.','','''regularization parameter '''))
sfmiss.par('padin',rsf.doc.rsfpar('int','0','','''Pad beginning '''))
sfmiss.par('padout',rsf.doc.rsfpar('int','0','','''Pad end '''))
sfmiss.par('lag',rsf.doc.rsfpar('string ',desc='''optional input file with filter lags (auxiliary input file name)'''))
sfmiss.par('mask',rsf.doc.rsfpar('string ',desc='''optional input mask file for known data (auxiliary input file name)'''))
sfmiss.version('2.1-git')
sfmiss.synopsis('''sfmiss < in.rsf filt=filt.rsf > out.rsf lag=lag.rsf mask=mask.rsf n= prec=y niter=100 exact=y eps=0. padin=0 padout=0''','''''')
rsf.doc.progs['sfmiss']=sfmiss

sfmiss1 = rsf.doc.rsfprog('sfmiss1','user/gee/Mmiss1.c','''Missing data interpolation in 1-D. ''')
sfmiss1.par('filtin',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmiss1.par('niter',rsf.doc.rsfpar('int','n1','','''number of iterations '''))
sfmiss1.par('diter',rsf.doc.rsfpar('int','niter','','''iteration step '''))
sfmiss1.par('filtin',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfmiss1.par('step',rsf.doc.rsfpar('string ',desc='''linear solver type '''))
sfmiss1.version('2.1-git')
sfmiss1.synopsis('''sfmiss1 < in.rsf > out.rsf filtin=filt.rsf niter=n1 diter=niter step=''','''''')
rsf.doc.progs['sfmiss1']=sfmiss1

sfmsmiss = rsf.doc.rsfprog('sfmsmiss','user/gee/Mmsmiss.c','''Multiscale missing data interpolation (N-dimensional). ''')
sfmsmiss.par('filt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmsmiss.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmsmiss.par('niter',rsf.doc.rsfpar('int','100','','''Number of iterations '''))
sfmsmiss.par('lag',rsf.doc.rsfpar('string ',desc='''optional input file with filter lags '''))
sfmsmiss.par('mask',rsf.doc.rsfpar('string ',desc='''optional input mask file for known data (auxiliary input file name)'''))
sfmsmiss.version('2.1-git')
sfmsmiss.synopsis('''sfmsmiss < in.rsf filt=filt.rsf > out.rsf mask=mask.rsf niter=100 lag=''','''''')
rsf.doc.progs['sfmsmiss']=sfmsmiss

sfmspef = rsf.doc.rsfprog('sfmspef','user/gee/Mmspef.c','''Multi-scale PEF estimation.''')
sfmspef.par('maskin',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmspef.par('a',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfmspef.par('center',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfmspef.par('gap',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfmspef.par('jump',rsf.doc.rsfpar('ints','','',''' [ns]'''))
sfmspef.par('ns',rsf.doc.rsfpar('int','','','''number of scales '''))
sfmspef.par('niter',rsf.doc.rsfpar('int','nh*2','',''''''))
sfmspef.par('lag',rsf.doc.rsfpar('string ',desc='''output file for filter lags '''))
sfmspef.par('maskin',rsf.doc.rsfpar('string ',desc='''optional input mask file (auxiliary input file name)'''))
sfmspef.par('maskout',rsf.doc.rsfpar('string ',desc='''optional output mask file '''))
sfmspef.version('2.1-git')
sfmspef.synopsis('''sfmspef < in.rsf > pef.rsf maskin=mask.rsf a= center= gap= jump= ns= niter=nh*2 lag= maskout=''','''''')
rsf.doc.progs['sfmspef']=sfmspef

sfnhelicon = rsf.doc.rsfprog('sfnhelicon','user/gee/Mnhelicon.c','''Non-stationary helix convolution and deconvolution. ''')
sfnhelicon.par('filt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfnhelicon.par('nh',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfnhelicon.par('pch',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfnhelicon.par('adj',rsf.doc.rsfpar('bool','n','','''if y, do adjoint operation '''))
sfnhelicon.par('div',rsf.doc.rsfpar('bool','n','','''if y, do inverse operation (deconvolution) '''))
sfnhelicon.par('nh',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfnhelicon.par('pch',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfnhelicon.par('lag',rsf.doc.rsfpar('string ',desc=''''''))
sfnhelicon.version('2.1-git')
sfnhelicon.synopsis('''sfnhelicon < in.rsf > out.rsf filt=filt.rsf nh=fnh.rsf pch=fpch.rsf adj=n div=n lag=''','''''')
rsf.doc.progs['sfnhelicon']=sfnhelicon

sfnpef = rsf.doc.rsfprog('sfnpef','user/gee/Mnpef.c','''Estimate Non-stationary PEF in N dimensions.''')
sfnpef.par('maskin',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfnpef.par('pch',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfnpef.par('filt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfnpef.par('a',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfnpef.par('center',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfnpef.par('gap',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfnpef.par('niter',rsf.doc.rsfpar('int','100','','''number of iterations '''))
sfnpef.par('epsilon',rsf.doc.rsfpar('float','0.01','','''regularization parameter '''))
sfnpef.par('lag',rsf.doc.rsfpar('string ',desc='''output file for filter lags '''))
sfnpef.par('maskin',rsf.doc.rsfpar('string ',desc='''optional input mask file (auxiliary input file name)'''))
sfnpef.par('pch',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfnpef.par('maskout',rsf.doc.rsfpar('string ',desc='''optional output mask file '''))
sfnpef.par('filt_pch',rsf.doc.rsfpar('string ',desc=''''''))
sfnpef.par('filt_lag',rsf.doc.rsfpar('string ',desc='''input file for double-helix filter lags '''))
sfnpef.version('2.1-git')
sfnpef.synopsis('''sfnpef < in.rsf > flt.rsf maskin=mask.rsf pch=patch.rsf filt=reg.rsf a= center= gap= niter=100 epsilon=0.01 lag= maskout= filt_pch= filt_lag=''','''''')
rsf.doc.progs['sfnpef']=sfnpef

sfparcel = rsf.doc.rsfprog('sfparcel','user/gee/Mparcel.c','''Patching test.''')
sfparcel.par('w',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfparcel.par('k',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfparcel.version('2.1-git')
sfparcel.synopsis('''sfparcel < in.rsf > out.rsf w= k=''','''''')
rsf.doc.progs['sfparcel']=sfparcel

sfpefdeburst = rsf.doc.rsfprog('sfpefdeburst','user/gee/Mpefdeburst.c','''Burst noise removal using PEF. ''')
sfpefdeburst.par('na',rsf.doc.rsfpar('int','3','','''PEF length '''))
sfpefdeburst.par('niter',rsf.doc.rsfpar('int','10','','''number of iterations '''))
sfpefdeburst.version('2.1-git')
sfpefdeburst.synopsis('''sfpefdeburst < in.rsf > out.rsf na=3 niter=10''','''''')
rsf.doc.progs['sfpefdeburst']=sfpefdeburst

sfpfactor2 = rsf.doc.rsfprog('sfpfactor2','user/gee/Mpfactor2.c','''Plane prediction filter on a helix. ''')
sfpfactor2.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfpfactor2.par('nx',rsf.doc.rsfpar('int','','',''''''))
sfpfactor2.par('p',rsf.doc.rsfpar('float','','',''''''))
sfpfactor2.par('q',rsf.doc.rsfpar('float','','',''''''))
sfpfactor2.par('niter',rsf.doc.rsfpar('int','20','','''number of factorization iterations '''))
sfpfactor2.par('na',rsf.doc.rsfpar('int','25','','''filter size '''))
sfpfactor2.par('eps',rsf.doc.rsfpar('float','FLT_EPSILON','','''compression tolerance '''))
sfpfactor2.par('fixed',rsf.doc.rsfpar('bool','y','','''if fixed size '''))
sfpfactor2.par('lag',rsf.doc.rsfpar('string ',desc=''''''))
sfpfactor2.version('2.1-git')
sfpfactor2.synopsis('''sfpfactor2 > filt.rsf nt= nx= p= q= niter=20 na=25 eps=FLT_EPSILON fixed=y lag=''','''''')
rsf.doc.progs['sfpfactor2']=sfpfactor2

sfproj = rsf.doc.rsfprog('sfproj','user/gee/Mproj.c','''Projection filter. ''')
sfproj.par('filt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfproj.par('single',rsf.doc.rsfpar('bool','y','','''single channel or multichannel '''))
sfproj.par('lag',rsf.doc.rsfpar('int','1','','''lag for internal convolution '''))
sfproj.par('eps',rsf.doc.rsfpar('float','1.0f','','''regularizion parameter '''))
sfproj.par('niter',rsf.doc.rsfpar('int','100','','''number of iterations '''))
sfproj.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfproj.version('2.1-git Mconv.c 7107 2011-04-10 02:04:14Z ivlad')
sfproj.synopsis('''sfproj < in.rsf > out.rsf filt=filt.rsf single=y lag=1 eps=1.0f niter=100 verb=n''','''''')
rsf.doc.progs['sfproj']=sfproj

sftspline = rsf.doc.rsfprog('sftspline','user/gee/Mtspline.c','''Helix filters for spline in tension ''')
sftspline.par('tension',rsf.doc.rsfpar('float','0.','','''spline tension '''))
sftspline.par('niter',rsf.doc.rsfpar('int','20','','''number of iterations '''))
sftspline.par('eps',rsf.doc.rsfpar('float','FLT_EPSILON','','''tolerance for filter compressing '''))
sftspline.par('lag',rsf.doc.rsfpar('string ',desc=''''''))
sftspline.version('2.1-git')
sftspline.synopsis('''sftspline > flt.rsf tension=0. niter=20 eps=FLT_EPSILON lag=''','''''')
rsf.doc.progs['sftspline']=sftspline

sfqdome = rsf.doc.rsfprog('sfqdome','user/gee/Mqdome.c','''3-D synthetic image from Jon Claerbout. ''')
sfqdome.par('trace',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfqdome.par('ranget',rsf.doc.rsfpar('float','3.','',''''''))
sfqdome.par('n1',rsf.doc.rsfpar('int','400','',''''''))
sfqdome.par('n2',rsf.doc.rsfpar('int','100','',''''''))
sfqdome.par('n3',rsf.doc.rsfpar('int','50','',''''''))
sfqdome.par('large',rsf.doc.rsfpar('int','(int) n1*ranget','',''''''))
sfqdome.par('d1',rsf.doc.rsfpar('float','0.004','',''''''))
sfqdome.par('d2',rsf.doc.rsfpar('float','0.01','',''''''))
sfqdome.par('d3',rsf.doc.rsfpar('float','0.02','',''''''))
sfqdome.par('o1',rsf.doc.rsfpar('float','0.','',''''''))
sfqdome.par('o2',rsf.doc.rsfpar('float','-3.*d2','',''''''))
sfqdome.par('o3',rsf.doc.rsfpar('float','-3.*d3','',''''''))
sfqdome.par('gaussvel',rsf.doc.rsfpar('float','2.5','',''''''))
sfqdome.par('throw',rsf.doc.rsfpar('float','0.01','',''''''))
sfqdome.par('endtaper',rsf.doc.rsfpar('int','20','',''''''))
sfqdome.par('slicei',rsf.doc.rsfpar('int','40','',''''''))
sfqdome.par('impedance',rsf.doc.rsfpar('bool','n','',''''''))
sfqdome.par('trace',rsf.doc.rsfpar('string ',desc='''file to optionally output the master trace (auxiliary output file name)'''))
sfqdome.version('2.1-git')
sfqdome.synopsis('''sfqdome > mod.rsf trace=trace.rsf ranget=3. n1=400 n2=100 n3=50 large=(int) n1*ranget d1=0.004 d2=0.01 d3=0.02 o1=0. o2=-3.*d2 o3=-3.*d3 gaussvel=2.5 throw=0.01 endtaper=20 slicei=40 impedance=n''','''''')
rsf.doc.progs['sfqdome']=sfqdome

sfrandline = rsf.doc.rsfprog('sfrandline','user/gee/Mrandline.c','''Construct data from random lines ''')
sfrandline.par('n1',rsf.doc.rsfpar('int','10','',''''''))
sfrandline.par('n2',rsf.doc.rsfpar('int','10','','''dimensions '''))
sfrandline.par('lines',rsf.doc.rsfpar('int','3','','''number of lines '''))
sfrandline.par('seed',rsf.doc.rsfpar('int','2000','','''random number seed '''))
sfrandline.version('2.1-git')
sfrandline.synopsis('''sfrandline > out.rsf n1=10 n2=10 lines=3 seed=2000''','''''')
rsf.doc.progs['sfrandline']=sfrandline

sfsigmoid = rsf.doc.rsfprog('sfsigmoid','user/gee/Msigmoid.c','''2-D synthetic model from J.F.Claerbout. ''')
sfsigmoid.par('n1',rsf.doc.rsfpar('int','400','','''vertical axis '''))
sfsigmoid.par('n2',rsf.doc.rsfpar('int','100','','''horizontal axis '''))
sfsigmoid.par('large',rsf.doc.rsfpar('int','5*n1','','''reflectivity series '''))
sfsigmoid.par('o1',rsf.doc.rsfpar('float','0.','',''''''))
sfsigmoid.par('o2',rsf.doc.rsfpar('float','0.','',''''''))
sfsigmoid.par('d1',rsf.doc.rsfpar('float','0.004','',''''''))
sfsigmoid.par('d2',rsf.doc.rsfpar('float','0.032','',''''''))
sfsigmoid.par('reflectivity',rsf.doc.rsfpar('bool','y','','''if output reflectivity (otherwise output impedance model) '''))
sfsigmoid.par('taper',rsf.doc.rsfpar('bool','y','','''if taper the edges '''))
sfsigmoid.version('2.1-git')
sfsigmoid.synopsis('''sfsigmoid > mod.rsf n1=400 n2=100 large=5*n1 o1=0. o2=0. d1=0.004 d2=0.032 reflectivity=y taper=y''','''
October 2014 program of the month:
http://ahay.org/blog/2014/10/08/program-of-the-month-sfsigmoid/
''')
rsf.doc.progs['sfsigmoid']=sfsigmoid

sfsignoi = rsf.doc.rsfprog('sfsignoi','user/gee/Msignoi.c','''Signal and noise separation (N-dimensional). ''')
sfsignoi.par('sfilt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsignoi.par('nfilt',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsignoi.par('epsilon',rsf.doc.rsfpar('float','','','''regularization parameter '''))
sfsignoi.par('niter',rsf.doc.rsfpar('int','20','','''number of iterations '''))
sfsignoi.par('spitz',rsf.doc.rsfpar('bool','n','','''if use Spitz method '''))
sfsignoi.par('prec',rsf.doc.rsfpar('bool','n','','''if use preconditioning with Spitz '''))
sfsignoi.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfsignoi.par('slag',rsf.doc.rsfpar('string ',desc=''''''))
sfsignoi.par('nlag',rsf.doc.rsfpar('string ',desc=''''''))
sfsignoi.version('2.1-git')
sfsignoi.synopsis('''sfsignoi < dat.rsf > signoi.rsf sfilt=spef.rsf nfilt=npef.rsf epsilon= niter=20 spitz=n prec=n verb=n slag= nlag=''','''''')
rsf.doc.progs['sfsignoi']=sfsignoi

sfsplinebank = rsf.doc.rsfprog('sfsplinebank','user/gee/Msplinebank.c','''Prepare a filter bank for B-spline plane wave filters ''')
sfsplinebank.par('nt',rsf.doc.rsfpar('int','40','','''length of the fast axis '''))
sfsplinebank.par('np',rsf.doc.rsfpar('int','','','''number of dips '''))
sfsplinebank.par('pmax',rsf.doc.rsfpar('float','2.','','''maximum dip '''))
sfsplinebank.par('niter',rsf.doc.rsfpar('int','20','','''number of iterations '''))
sfsplinebank.par('eps',rsf.doc.rsfpar('float','FLT_EPSILON','','''tolerance '''))
sfsplinebank.par('nh',rsf.doc.rsfpar('string ',desc=''''''))
sfsplinebank.par('lag',rsf.doc.rsfpar('string ',desc=''''''))
sfsplinebank.version('2.1-git')
sfsplinebank.synopsis('''sfsplinebank > out.rsf nt=40 np= pmax=2. niter=20 eps=FLT_EPSILON nh= lag=''','''''')
rsf.doc.progs['sfsplinebank']=sfsplinebank

sfsplineplane = rsf.doc.rsfprog('sfsplineplane','user/gee/Msplineplane.c','''B-spline plane-wave filter ''')
sfsplineplane.par('lag',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsplineplane.par('nw',rsf.doc.rsfpar('int','2','','''filter size '''))
sfsplineplane.par('p',rsf.doc.rsfpar('float','0.','','''plane-wave slope '''))
sfsplineplane.par('niter',rsf.doc.rsfpar('int','20','','''number of spectral decomposition iterations '''))
sfsplineplane.par('eps',rsf.doc.rsfpar('float','SF_EPS','',''''''))
sfsplineplane.par('lag',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfsplineplane.version('2.1-git')
sfsplineplane.synopsis('''sfsplineplane > out.rsf lag=lag.rsf nw=2 p=0. niter=20 eps=SF_EPS''','''''')
rsf.doc.progs['sfsplineplane']=sfsplineplane

sfstreamh = rsf.doc.rsfprog('sfstreamh','user/gee/Mstreamh.c','''Streaming PEF on a helix ''')
sfstreamh.par('lag',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfstreamh.par('pattern',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfstreamh.par('a',rsf.doc.rsfpar('ints','','','''filter shape  [dim]'''))
sfstreamh.par('n',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfstreamh.par('inv',rsf.doc.rsfpar('bool','n','','''inversion flag '''))
sfstreamh.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag (for linear operator) '''))
sfstreamh.par('jump',rsf.doc.rsfpar('int','1','','''jump > 1 is used for trace interpolation '''))
sfstreamh.par('na',rsf.doc.rsfpar('int','0','','''PEF filter size (not including leading one) '''))
sfstreamh.par('eps',rsf.doc.rsfpar('float','','','''regularization '''))
sfstreamh.par('lag',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfstreamh.par('pattern',rsf.doc.rsfpar('string ',desc='''pattern data (for linear operator) (auxiliary input file name)'''))
sfstreamh.version('2.1-git')
sfstreamh.synopsis('''sfstreamh < inp.rsf > out.rsf lag=lag.rsf pattern=pat.rsf a= n= inv=n adj=n jump=1 na=0 eps=''','''''')
rsf.doc.progs['sfstreamh']=sfstreamh

sfstreamissh = rsf.doc.rsfprog('sfstreamissh','user/gee/Mstreamissh.c','''Missing data interpolating using streaming PEF on a helix ''')
sfstreamissh.par('lag',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfstreamissh.par('known',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfstreamissh.par('a',rsf.doc.rsfpar('ints','','','''filter shape  [dim]'''))
sfstreamissh.par('n',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sfstreamissh.par('na',rsf.doc.rsfpar('int','0','','''PEF filter size (not including leading one) '''))
sfstreamissh.par('eps',rsf.doc.rsfpar('float','','','''regularization '''))
sfstreamissh.par('var',rsf.doc.rsfpar('float','0.0f','','''noise variance '''))
sfstreamissh.par('seed',rsf.doc.rsfpar('int','time(NULL)','','''random seed '''))
sfstreamissh.par('lag',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfstreamissh.version('2.1-git')
sfstreamissh.synopsis('''sfstreamissh < inp.rsf > out.rsf lag=lag.rsf known=known.rsf a= n= na=0 eps= var=0.0f seed=time(NULL)''','''''')
rsf.doc.progs['sfstreamissh']=sfstreamissh

sfsynmarine = rsf.doc.rsfprog('sfsynmarine','user/gee/Msynmarine.c','''Simple synthetic marine data example. ''')
sfsynmarine.par('nt',rsf.doc.rsfpar('int','250','','''time samples '''))
sfsynmarine.par('nh',rsf.doc.rsfpar('int','48','','''offset samples '''))
sfsynmarine.par('ny',rsf.doc.rsfpar('int','10','','''midpoint samples '''))
sfsynmarine.par('nz',rsf.doc.rsfpar('int','25','','''depth samples '''))
sfsynmarine.version('2.1-git')
sfsynmarine.synopsis('''sfsynmarine > out.rsf nt=250 nh=48 ny=10 nz=25''','''''')
rsf.doc.progs['sfsynmarine']=sfsynmarine

sfsyntop = rsf.doc.rsfprog('sfsyntop','user/gee/Msyntop.c','''Make synthetic topography map. ''')
sfsyntop.par('mod',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsyntop.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsyntop.par('n1',rsf.doc.rsfpar('int','100','',''''''))
sfsyntop.par('n2',rsf.doc.rsfpar('int','100','','''data dimensions '''))
sfsyntop.version('2.1-git')
sfsyntop.synopsis('''sfsyntop mod=mod.rsf > syn.rsf mask=mask.rsf n1=100 n2=100''','''''')
rsf.doc.progs['sfsyntop']=sfsyntop

sftentwt = rsf.doc.rsfprog('sftentwt','user/gee/Mtentwt.c','''Tent-like weight for patching.''')
sftentwt.par('windwt',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sftentwt.par('w',rsf.doc.rsfpar('ints','','','''window size  [dim]'''))
sftentwt.par('k',rsf.doc.rsfpar('ints','','','''number of windows  [dim]'''))
sftentwt.par('a',rsf.doc.rsfpar('ints','','','''filter size  [dim]'''))
sftentwt.par('center',rsf.doc.rsfpar('ints','','',''' [dim]'''))
sftentwt.par('dim',rsf.doc.rsfpar('int','2','','''number of dimensions '''))
sftentwt.par('tent',rsf.doc.rsfpar('bool','y','','''if y, use tent-like weight; n, cosine weight '''))
sftentwt.version('2.1-git')
sftentwt.synopsis('''sftentwt > wallwt.rsf windwt=windwt.rsf w= k= a= center= dim=2 tent=y''','''''')
rsf.doc.progs['sftentwt']=sftentwt

sfungrad = rsf.doc.rsfprog('sfungrad','user/gee/Mungrad.c','''Phase unwrapping by least squares. ''')
sfungrad.par('badness',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfungrad.par('niter',rsf.doc.rsfpar('int','0','','''number of iterations '''))
sfungrad.par('badness',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfungrad.version('2.1-git')
sfungrad.synopsis('''sfungrad < inp.rsf > out.rsf badness=bad.rsf niter=0''','''''')
rsf.doc.progs['sfungrad']=sfungrad

sfvelcon3 = rsf.doc.rsfprog('sfvelcon3','user/gee/Mvelcon3.c','''3-D finite-difference velocity continuation on a helix ''')
sfvelcon3.par('adj',rsf.doc.rsfpar('bool','y','','''forward or backward continuation '''))
sfvelcon3.par('inv',rsf.doc.rsfpar('int','1','','''inversion type '''))
sfvelcon3.par('nv',rsf.doc.rsfpar('int','nt','','''velocity steps '''))
sfvelcon3.par('vel',rsf.doc.rsfpar('float','1.','','''initial velocity '''))
sfvelcon3.version('2.1-git')
sfvelcon3.synopsis('''sfvelcon3 < inp.rsf > out.rsf adj=y inv=1 nv=nt vel=1.''','''''')
rsf.doc.progs['sfvelcon3']=sfvelcon3

sfwavemovie = rsf.doc.rsfprog('sfwavemovie','user/gee/Mwavemovie.c','''Helmholtz factorization ''')
sfwavemovie.par('imp',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwavemovie.par('nz',rsf.doc.rsfpar('int','96','',''''''))
sfwavemovie.par('nx',rsf.doc.rsfpar('int','48','',''''''))
sfwavemovie.par('nt',rsf.doc.rsfpar('int','12','',''''''))
sfwavemovie.par('nw',rsf.doc.rsfpar('int','2','',''''''))
sfwavemovie.par('init',rsf.doc.rsfpar('int','1','',''''''))
sfwavemovie.par('v',rsf.doc.rsfpar('float','1.','',''''''))
sfwavemovie.par('dz',rsf.doc.rsfpar('float','1.','',''''''))
sfwavemovie.par('dx',rsf.doc.rsfpar('float','2.','',''''''))
sfwavemovie.par('lambda',rsf.doc.rsfpar('float','nz*dz/4.','',''''''))
sfwavemovie.par('sixth',rsf.doc.rsfpar('float','0.0833','',''''''))
sfwavemovie.par('gamma',rsf.doc.rsfpar('float','0.667','',''''''))
sfwavemovie.par('epsdamp',rsf.doc.rsfpar('float','0.01','',''''''))
sfwavemovie.par('padfactor',rsf.doc.rsfpar('int','1024','',''''''))
sfwavemovie.par('nfilt',rsf.doc.rsfpar('int','nx+2','',''''''))
sfwavemovie.par('impresp',rsf.doc.rsfpar('bool','n','',''''''))
sfwavemovie.version('2.1-git')
sfwavemovie.synopsis('''sfwavemovie > out.rsf imp=imp.rsf nz=96 nx=48 nt=12 nw=2 init=1 v=1. dz=1. dx=2. lambda=nz*dz/4. sixth=0.0833 gamma=0.667 epsdamp=0.01 padfactor=1024 nfilt=nx+2 impresp=n''','''''')
rsf.doc.progs['sfwavemovie']=sfwavemovie

sfwilson = rsf.doc.rsfprog('sfwilson','user/gee/Mwilson.c','''Wilson-Burg spectral factorization. ''')
sfwilson.par('lag',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwilson.par('lagout',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwilson.par('maxlag',rsf.doc.rsfpar('int','','','''maximum lag '''))
sfwilson.par('niter',rsf.doc.rsfpar('int','20','','''number of iterations '''))
sfwilson.par('eps',rsf.doc.rsfpar('float','1.e-6','','''truncation tolerance '''))
sfwilson.par('n1',rsf.doc.rsfpar('int','maxlag','','''output filter length '''))
sfwilson.par('a0',rsf.doc.rsfpar('float','1.','',''''''))
sfwilson.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity flag '''))
sfwilson.par('stable',rsf.doc.rsfpar('bool','n','','''stability flag '''))
sfwilson.par('lag',rsf.doc.rsfpar('string ',desc='''optional input file with filter lags (auxiliary input file name)'''))
sfwilson.par('lagin',rsf.doc.rsfpar('string ',desc='''optional input file with output filter lags '''))
sfwilson.par('filtin',rsf.doc.rsfpar('string ',desc=''''''))
sfwilson.par('lagout',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfwilson.version('2.1-git')
sfwilson.synopsis('''sfwilson < in.rsf > out.rsf lag=lag0.rsf lagout=lag.rsf maxlag= niter=20 eps=1.e-6 n1=maxlag a0=1. verb=y stable=n lagin= filtin=''','''''')
rsf.doc.progs['sfwilson']=sfwilson

sfxtomo = rsf.doc.rsfprog('sfxtomo','user/gee/Mxtomo.c','''Kjartansson-style tomography ''')
sfxtomo.par('adj',rsf.doc.rsfpar('bool','y','','''adjoint flag '''))
sfxtomo.par('nz',rsf.doc.rsfpar('int','nh','',''''''))
sfxtomo.par('oz',rsf.doc.rsfpar('float','oh','',''''''))
sfxtomo.par('dz',rsf.doc.rsfpar('float','dh','',''''''))
sfxtomo.par('nx',rsf.doc.rsfpar('int','ny','',''''''))
sfxtomo.par('ox',rsf.doc.rsfpar('float','oy','',''''''))
sfxtomo.par('dx',rsf.doc.rsfpar('float','dy','',''''''))
sfxtomo.par('nh',rsf.doc.rsfpar('int','nz','',''''''))
sfxtomo.par('oh',rsf.doc.rsfpar('float','oz','',''''''))
sfxtomo.par('dh',rsf.doc.rsfpar('float','dz','',''''''))
sfxtomo.par('ny',rsf.doc.rsfpar('int','nx','',''''''))
sfxtomo.par('oy',rsf.doc.rsfpar('float','ox','',''''''))
sfxtomo.par('dy',rsf.doc.rsfpar('float','dx','',''''''))
sfxtomo.par('niter',rsf.doc.rsfpar('int','-1','','''number of iterations '''))
sfxtomo.version('2.1-git')
sfxtomo.synopsis('''sfxtomo < inp.rsf > out.rsf adj=y nz=nh oz=oh dz=dh nx=ny ox=oy dx=dy nh=nz oh=oz dh=dz ny=nx oy=ox dy=dx niter=-1''','''''')
rsf.doc.progs['sfxtomo']=sfxtomo

