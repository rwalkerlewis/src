import rsf.doc

vpvr = rsf.doc.rsfprog('vpvr','user/dellinger/Mvr.c','''Plot impulse responses in 2 dimensions ''')
vpvr.par('color',rsf.doc.rsfpar('int','7','',''''''))
vpvr.par('fat',rsf.doc.rsfpar('int','5','',''''''))
vpvr.par('dash',rsf.doc.rsfpar('float','0.0','',''''''))
vpvr.par('edash',rsf.doc.rsfpar('float','0.1','','''elliptical approximation dash '''))
vpvr.par('vrscale',rsf.doc.rsfpar('float','1.','','''scales everything by a factor '''))
vpvr.par('groupscale',rsf.doc.rsfpar('float','1.','','''scales only the group stuff '''))
vpvr.par('phasescale',rsf.doc.rsfpar('float','.5','','''scales only the phase stuff '''))
vpvr.par('norm',rsf.doc.rsfpar('float','0.','',''''''))
vpvr.par('inc',rsf.doc.rsfpar('float','0.5','','''increment of phi sub w in degrees '''))
vpvr.par('line',rsf.doc.rsfpar('bool','n','','''if draw lines to indicate some important angles. (Angles at
     which triplication "first" occurs, and angles at which pure P
     and Sv modes exist) '''))
vpvr.par('info',rsf.doc.rsfpar('bool','y','','''if print in small letters the elastic constants across the top '''))
vpvr.par('disp',rsf.doc.rsfpar('bool','y','','''if n, give phase velocity instead of dispersion relation '''))
vpvr.par('group',rsf.doc.rsfpar('bool','y','','''if n, give group slowness instead of group velocity '''))
vpvr.par('particle',rsf.doc.rsfpar('bool','n','','''if show particle motion directions '''))
vpvr.par('ellipse',rsf.doc.rsfpar('bool','y','','''if use elliptic approximation '''))
vpvr.par('c11',rsf.doc.rsfpar('float','0.','',''''''))
vpvr.par('c13',rsf.doc.rsfpar('float','0.','',''''''))
vpvr.par('c33',rsf.doc.rsfpar('float','0.','',''''''))
vpvr.par('c55',rsf.doc.rsfpar('float','0.','',''''''))
vpvr.par('c66',rsf.doc.rsfpar('float','0.','',''''''))
vpvr.par('log',rsf.doc.rsfpar('string ',desc=''''''))
vpvr.par('only',rsf.doc.rsfpar('string ',desc='''(Pdisp, SVdisp, SHdisp, P, SV, SH) '''))
vpvr.par('title',rsf.doc.rsfpar('string ',desc=''''''))
vpvr.version('2.1-git')
vpvr.synopsis('''vpvr > plot.vpl color=7 fat=5 dash=0.0 edash=0.1 vrscale=1. groupscale=1. phasescale=.5 norm=0. inc=0.5 line=n info=y disp=y group=y particle=n ellipse=y c11=0. c13=0. c33=0. c55=0. c66=0. log= only= title=''','''''')
rsf.doc.progs['vpvr']=vpvr

vpvrtest = rsf.doc.rsfprog('vpvrtest','user/dellinger/Mvrtest.c','''Plot impulse responses in 2 dimensions ''')
vpvrtest.par('dash',rsf.doc.rsfpar('float','0.0','',''''''))
vpvrtest.par('francis',rsf.doc.rsfpar('bool','n','',''''''))
vpvrtest.par('invert',rsf.doc.rsfpar('bool','n','','''reciprocal of plotting radius '''))
vpvrtest.par('groupscale',rsf.doc.rsfpar('float','1.','','''scales only the group stuff '''))
vpvrtest.par('phasescale',rsf.doc.rsfpar('float','1.','','''scales only the phase stuff '''))
vpvrtest.par('norm',rsf.doc.rsfpar('float','1.','',''''''))
vpvrtest.par('inc',rsf.doc.rsfpar('float','0.5','','''increment of phi sub w in degrees '''))
vpvrtest.par('c11',rsf.doc.rsfpar('float','1.','',''''''))
vpvrtest.par('c13',rsf.doc.rsfpar('float','.5','',''''''))
vpvrtest.par('c33',rsf.doc.rsfpar('float','1.','',''''''))
vpvrtest.par('c55',rsf.doc.rsfpar('float','.25','',''''''))
vpvrtest.par('m',rsf.doc.rsfpar('int','-1','',''''''))
vpvrtest.par('which',rsf.doc.rsfpar('bool','n','','''transform from phase to group domain or vice versa '''))
vpvrtest.par('flip',rsf.doc.rsfpar('bool','n','','''reciprocal of W's used in Francis' approximation '''))
vpvrtest.version('2.1-git')
vpvrtest.synopsis('''vpvrtest > plot.vpl dash=0.0 francis=n invert=n groupscale=1. phasescale=1. norm=1. inc=0.5 c11=1. c13=.5 c33=1. c55=.25 m=-1 which=n flip=n''','''''')
rsf.doc.progs['vpvrtest']=vpvrtest

vpvr3d = rsf.doc.rsfprog('vpvr3d','user/dellinger/Mvr3d.c','''Plot impulse responses in 3 dimensions ''')
vpvr3d.par('what',rsf.doc.rsfpar('ints','','',''' [3]'''))
vpvr3d.par('start',rsf.doc.rsfpar('float','0.','','''longitude start '''))
vpvr3d.par('end',rsf.doc.rsfpar('float','360.','','''longitude end '''))
vpvr3d.par('bottom',rsf.doc.rsfpar('float','-90.','','''latitude start '''))
vpvr3d.par('top',rsf.doc.rsfpar('float','90.','','''latitude end '''))
vpvr3d.par('order',rsf.doc.rsfpar('bool','n','','''try to swap around the surfaces to make them continuous '''))
vpvr3d.par('maxlevel',rsf.doc.rsfpar('int','5','','''maximum number of re-subdivisions '''))
vpvr3d.par('coslimit',rsf.doc.rsfpar('float','25.','','''aximum deviation in particle motion angle '''))
vpvr3d.par('xmin',rsf.doc.rsfpar('float','-100.','',''''''))
vpvr3d.par('ymin',rsf.doc.rsfpar('float','-100.','',''''''))
vpvr3d.par('zmin',rsf.doc.rsfpar('float','-100.','',''''''))
vpvr3d.par('xmax',rsf.doc.rsfpar('float','100.','',''''''))
vpvr3d.par('ymax',rsf.doc.rsfpar('float','100.','',''''''))
vpvr3d.par('zmax',rsf.doc.rsfpar('float','100.','',''''''))
vpvr3d.par('or',rsf.doc.rsfpar('bool','n','','''modifier: if or=y ORs instead of ANDS the clips. '''))
vpvr3d.par('skip',rsf.doc.rsfpar('int','-1','','''modifier: skip=-1 don't clip this surface (-1 for none skipped)
     			0 = fastest
     			1 = intermediate
     			2 = slowest
     			3 = red (SH)
     			4 = green (SV)
     			5 = blue (P) '''))
vpvr3d.par('xxmin',rsf.doc.rsfpar('float','-100.','',''''''))
vpvr3d.par('yymin',rsf.doc.rsfpar('float','-100.','',''''''))
vpvr3d.par('zzmin',rsf.doc.rsfpar('float','-100.','',''''''))
vpvr3d.par('xxmax',rsf.doc.rsfpar('float','100.','',''''''))
vpvr3d.par('yymax',rsf.doc.rsfpar('float','100.','',''''''))
vpvr3d.par('zzmax',rsf.doc.rsfpar('float','100.','',''''''))
vpvr3d.par('inc',rsf.doc.rsfpar('int','4','','''density of gridding (How many tiles to cover 90 degree of longitude in initial tiling.) '''))
vpvr3d.par('inc2',rsf.doc.rsfpar('int','iinc','','''tiles bigger than 90 deg / iinc2 in any dimension will be subdivided to fit '''))
vpvr3d.par('which',rsf.doc.rsfpar('bool','y','','''if y, plot impulse response; if n, plot slowness surface '''))
vpvr3d.par('norm',rsf.doc.rsfpar('float','1.','','''amount to divide everything by '''))
vpvr3d.par('sing',rsf.doc.rsfpar('string ',desc='''Log file '''))
vpvr3d.version('2.1-git')
vpvr3d.synopsis('''vpvr3d > out.rsf > plot.vpl what= start=0. end=360. bottom=-90. top=90. order=n maxlevel=5 coslimit=25. xmin=-100. ymin=-100. zmin=-100. xmax=100. ymax=100. zmax=100. or=n skip=-1 xxmin=-100. yymin=-100. zzmin=-100. xxmax=100. yymax=100. zzmax=100. inc=4 inc2=iinc which=y norm=1. sing=''','''''')
rsf.doc.progs['vpvr3d']=vpvr3d

