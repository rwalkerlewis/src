import rsf.doc

sfhelmlu = rsf.doc.rsfprog('sfhelmlu','user/sparse/Mhelmlu.c','''2D Helmholtz solver by LU factorization. ''')
sfhelmlu.par('source',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhelmlu.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfhelmlu.par('save',rsf.doc.rsfpar('bool','n','','''save LU '''))
sfhelmlu.par('load',rsf.doc.rsfpar('bool','n','','''load LU '''))
sfhelmlu.par('uts',rsf.doc.rsfpar('int','0','','''number of OMP threads '''))
sfhelmlu.par('hermite',rsf.doc.rsfpar('bool','n','','''Hermite operator '''))
sfhelmlu.par('npml',rsf.doc.rsfpar('int','10','','''PML width '''))
sfhelmlu.par('order',rsf.doc.rsfpar('string ',desc='''discretization scheme (default optimal 9-point) '''))
sfhelmlu.par('source',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfhelmlu.version('2.1-git')
sfhelmlu.synopsis('''sfhelmlu < in.rsf > out.rsf source=source.rsf verb=n save=n load=n uts=0 hermite=n npml=10 order=''','''''')
rsf.doc.progs['sfhelmlu']=sfhelmlu

sfhelmmig = rsf.doc.rsfprog('sfhelmmig','user/sparse/Mhelmmig.c','''2D frequency-domain migration with space-lag imaging condition. ''')
sfhelmmig.par('source',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhelmmig.par('data',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhelmmig.par('us',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfhelmmig.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfhelmmig.par('timg',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfhelmmig.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfhelmmig.par('save',rsf.doc.rsfpar('bool','n','','''save LU '''))
sfhelmmig.par('load',rsf.doc.rsfpar('bool','n','','''load LU '''))
sfhelmmig.par('uts',rsf.doc.rsfpar('int','0','','''number of OMP threads '''))
sfhelmmig.par('nh',rsf.doc.rsfpar('int','0','','''horizontal space-lag '''))
sfhelmmig.par('npml',rsf.doc.rsfpar('int','10','','''PML width '''))
sfhelmmig.par('order',rsf.doc.rsfpar('string ',desc='''discretization scheme (default optimal 9-point) '''))
sfhelmmig.par('source',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfhelmmig.par('data',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfhelmmig.par('us',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfhelmmig.par('ur',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfhelmmig.par('timg',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfhelmmig.version('2.1-git')
sfhelmmig.synopsis('''sfhelmmig < in.rsf > out.rsf source=source.rsf data=data.rsf us=us.rsf ur=ur.rsf timg=timg.rsf verb=n save=n load=n uts=0 nh=0 npml=10 order=''','''''')
rsf.doc.progs['sfhelmmig']=sfhelmmig

sfhelmrhs = rsf.doc.rsfprog('sfhelmrhs','user/sparse/Mhelmrhs.c','''Reconstruct right-hand side from wavefield. ''')
sfhelmrhs.par('model',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfhelmrhs.par('uts',rsf.doc.rsfpar('int','0','','''number of OMP threads '''))
sfhelmrhs.par('order',rsf.doc.rsfpar('string ',desc='''discretization scheme (default optimal 9-point) '''))
sfhelmrhs.par('model',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfhelmrhs.version('2.1-git')
sfhelmrhs.synopsis('''sfhelmrhs < in.rsf > out.rsf model=modl.rsf uts=0 order=''','''''')
rsf.doc.progs['sfhelmrhs']=sfhelmrhs

sfiwioper = rsf.doc.rsfprog('sfiwioper','user/sparse/Miwioper.c','''Image-domain waveform tomography (linear operator). ''')
sfiwioper.par('model',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwioper.par('us',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwioper.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwioper.par('weight',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwioper.par('precon',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwioper.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sfiwioper.par('nh',rsf.doc.rsfpar('int','0','','''horizontal space-lag '''))
sfiwioper.par('load',rsf.doc.rsfpar('bool','n','','''load LU '''))
sfiwioper.par('uts',rsf.doc.rsfpar('int','0','','''number of OMP threads '''))
sfiwioper.par('npml',rsf.doc.rsfpar('int','10','','''PML width '''))
sfiwioper.par('mass',rsf.doc.rsfpar('bool','n','','''if y, use discretization-based mass term '''))
sfiwioper.par('order',rsf.doc.rsfpar('string ',desc='''discretization scheme (default optimal 9-point) '''))
sfiwioper.par('model',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwioper.par('us',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwioper.par('ur',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwioper.par('weight',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwioper.par('precon',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwioper.version('2.1-git')
sfiwioper.synopsis('''sfiwioper < in.rsf > out.rsf model=model.rsf us=us.rsf ur=ur.rsf weight=weight.rsf precon=precon.rsf adj=n nh=0 load=n uts=0 npml=10 mass=n order=''','''''')
rsf.doc.progs['sfiwioper']=sfiwioper

sfiwiiter = rsf.doc.rsfprog('sfiwiiter','user/sparse/Miwiiter.c','''Image-domain waveform tomography. ''')
sfiwiiter.par('model',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwiiter.par('us',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwiiter.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwiiter.par('weight',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwiiter.par('precon',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwiiter.par('miter',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfiwiiter.par('riter',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfiwiiter.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfiwiiter.par('nh',rsf.doc.rsfpar('int','0','','''horizontal space-lag '''))
sfiwiiter.par('load',rsf.doc.rsfpar('bool','n','','''load LU '''))
sfiwiiter.par('uts',rsf.doc.rsfpar('int','0','','''number of OMP threads '''))
sfiwiiter.par('npml',rsf.doc.rsfpar('int','10','','''PML width '''))
sfiwiiter.par('mass',rsf.doc.rsfpar('bool','n','','''if y, use discretization-based mass term '''))
sfiwiiter.par('cgiter',rsf.doc.rsfpar('int','10','','''number of conjugate-gradient iterations '''))
sfiwiiter.par('shape',rsf.doc.rsfpar('bool','n','','''regularization (default Tikhnov) '''))
sfiwiiter.par('reg',rsf.doc.rsfpar('float','0.','','''regularization parameter '''))
sfiwiiter.par('tol',rsf.doc.rsfpar('float','1.e-6','','''tolerance for shaping regularization '''))
sfiwiiter.par('rect1',rsf.doc.rsfpar('int','1','','''smoothing radius on axis 1 '''))
sfiwiiter.par('rect2',rsf.doc.rsfpar('int','1','','''smoothing radius on axis 2 '''))
sfiwiiter.par('order',rsf.doc.rsfpar('string ',desc='''discretization scheme (default optimal 9-point) '''))
sfiwiiter.par('model',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwiiter.par('us',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwiiter.par('ur',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwiiter.par('weight',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwiiter.par('precon',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwiiter.par('miter',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfiwiiter.version('2.1-git')
sfiwiiter.synopsis('''sfiwiiter < in.rsf > out.rsf model=model.rsf us=us.rsf ur=ur.rsf weight=weight.rsf precon=precon.rsf miter=miter.rsf riter=riter.rsf verb=n nh=0 load=n uts=0 npml=10 mass=n cgiter=10 shape=n reg=0. tol=1.e-6 rect1=1 rect2=1 order=''','''''')
rsf.doc.progs['sfiwiiter']=sfiwiiter

sfiwioper0 = rsf.doc.rsfprog('sfiwioper0','user/sparse/Miwioper0.c','''Image-domain waveform tomography (linear operator). ''')
sfiwioper0.par('model',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwioper0.par('us',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwioper0.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwioper0.par('weight',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwioper0.par('precon',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwioper0.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sfiwioper0.par('nh',rsf.doc.rsfpar('int','0','','''horizontal space-lag '''))
sfiwioper0.par('uts',rsf.doc.rsfpar('int','0','','''number of OMP threads '''))
sfiwioper0.par('npml',rsf.doc.rsfpar('int','10','','''PML width '''))
sfiwioper0.par('mass',rsf.doc.rsfpar('bool','n','','''if y, use discretization-based mass term '''))
sfiwioper0.par('order',rsf.doc.rsfpar('string ',desc='''discretization scheme (default optimal 9-point) '''))
sfiwioper0.par('model',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwioper0.par('us',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwioper0.par('ur',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwioper0.par('weight',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwioper0.par('precon',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwioper0.version('2.1-git')
sfiwioper0.synopsis('''sfiwioper0 < in.rsf > out.rsf model=model.rsf us=us.rsf ur=ur.rsf weight=weight.rsf precon=precon.rsf adj=n nh=0 uts=0 npml=10 mass=n order=''','''''')
rsf.doc.progs['sfiwioper0']=sfiwioper0

sfiwiiter0 = rsf.doc.rsfprog('sfiwiiter0','user/sparse/Miwiiter0.c','''Image-domain waveform tomography. ''')
sfiwiiter0.par('model',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwiiter0.par('us',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwiiter0.par('ur',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwiiter0.par('weight',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwiiter0.par('precon',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwiiter0.par('miter',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfiwiiter0.par('riter',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfiwiiter0.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfiwiiter0.par('nh',rsf.doc.rsfpar('int','0','','''horizontal space-lag '''))
sfiwiiter0.par('uts',rsf.doc.rsfpar('int','0','','''number of OMP threads '''))
sfiwiiter0.par('npml',rsf.doc.rsfpar('int','10','','''PML width '''))
sfiwiiter0.par('mass',rsf.doc.rsfpar('bool','n','','''if y, use discretization-based mass term '''))
sfiwiiter0.par('cgiter',rsf.doc.rsfpar('int','10','','''number of conjugate-gradient iterations '''))
sfiwiiter0.par('shape',rsf.doc.rsfpar('bool','n','','''regularization (default Tikhnov) '''))
sfiwiiter0.par('reg',rsf.doc.rsfpar('float','0.','','''regularization parameter '''))
sfiwiiter0.par('tol',rsf.doc.rsfpar('float','1.e-6','','''tolerance for shaping regularization '''))
sfiwiiter0.par('rect1',rsf.doc.rsfpar('int','1','','''smoothing radius on axis 1 '''))
sfiwiiter0.par('rect2',rsf.doc.rsfpar('int','1','','''smoothing radius on axis 2 '''))
sfiwiiter0.par('order',rsf.doc.rsfpar('string ',desc='''discretization scheme (default optimal 9-point) '''))
sfiwiiter0.par('model',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwiiter0.par('us',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwiiter0.par('ur',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwiiter0.par('weight',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwiiter0.par('precon',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwiiter0.par('miter',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfiwiiter0.version('2.1-git')
sfiwiiter0.synopsis('''sfiwiiter0 < in.rsf > out.rsf model=model.rsf us=us.rsf ur=ur.rsf weight=weight.rsf precon=precon.rsf miter=miter.rsf riter=riter.rsf verb=n nh=0 uts=0 npml=10 mass=n cgiter=10 shape=n reg=0. tol=1.e-6 rect1=1 rect2=1 order=''','''''')
rsf.doc.progs['sfiwiiter0']=sfiwiiter0

sfiwinlcg = rsf.doc.rsfprog('sfiwinlcg','user/sparse/Miwinlcg.c','''Image-domain waveform tomography (Non-linear CG). ''')
sfiwinlcg.par('source',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwinlcg.par('data',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwinlcg.par('imask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwinlcg.par('weight',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwinlcg.par('precon',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwinlcg.par('grad',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfiwinlcg.par('objt',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfiwinlcg.par('imag',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfiwinlcg.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity flag '''))
sfiwinlcg.par('nh',rsf.doc.rsfpar('int','0','','''horizontal space-lag '''))
sfiwinlcg.par('load',rsf.doc.rsfpar('bool','n','','''load LU '''))
sfiwinlcg.par('update',rsf.doc.rsfpar('bool','y','','''y, nonlinear CG; n, Gauss-Newton '''))
sfiwinlcg.par('uts',rsf.doc.rsfpar('int','0','','''number of OMP threads '''))
sfiwinlcg.par('npml',rsf.doc.rsfpar('int','10','','''PML width '''))
sfiwinlcg.par('prect1',rsf.doc.rsfpar('int','5','','''slope smoothing radius on axis 1 '''))
sfiwinlcg.par('prect2',rsf.doc.rsfpar('int','1','','''slope smoothing radius on axis 2 '''))
sfiwinlcg.par('prect3',rsf.doc.rsfpar('int','5','','''slope smoothing radius on axis 3 '''))
sfiwinlcg.par('pliter',rsf.doc.rsfpar('int','20','','''slope estimation # of linear iterations '''))
sfiwinlcg.par('plower',rsf.doc.rsfpar('float','0.1','','''slope thresholding lower limit '''))
sfiwinlcg.par('pupper',rsf.doc.rsfpar('float','3.','','''slope thresholding upper limit '''))
sfiwinlcg.par('dorder',rsf.doc.rsfpar('int','6','','''image derivative accuracy order '''))
sfiwinlcg.par('grect1',rsf.doc.rsfpar('int','5','','''gradient smoothing radius on axis 1 '''))
sfiwinlcg.par('grect2',rsf.doc.rsfpar('int','5','','''gradient smoothing radius on axis 2 '''))
sfiwinlcg.par('gliter',rsf.doc.rsfpar('int','5','','''# of Gauss-Newton iterations '''))
sfiwinlcg.par('geps',rsf.doc.rsfpar('float','0.','','''regularization parameter for Gauss-Newton '''))
sfiwinlcg.par('gscale',rsf.doc.rsfpar('float','0.1','','''gradient re-scale '''))
sfiwinlcg.par('miter',rsf.doc.rsfpar('int','10','','''Nonlinear-CG maximum # of iterations '''))
sfiwinlcg.par('liter',rsf.doc.rsfpar('int','5','','''Nonlinear-CG maximum # of line searches '''))
sfiwinlcg.par('delta',rsf.doc.rsfpar('float','1.e-5','','''Nonlinear-CG convergence criteria '''))
sfiwinlcg.par('lower',rsf.doc.rsfpar('float','1.5','','''lower bound of feasible set '''))
sfiwinlcg.par('upper',rsf.doc.rsfpar('float','7.5','','''upper bound of feasible set '''))
sfiwinlcg.par('order',rsf.doc.rsfpar('string ',desc='''discretization scheme (default optimal 25-point) '''))
sfiwinlcg.par('cost',rsf.doc.rsfpar('string ',desc='''cost functional type (default Weibull) '''))
sfiwinlcg.par('source',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwinlcg.par('data',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwinlcg.par('imask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwinlcg.par('weight',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwinlcg.par('precon',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwinlcg.par('grad',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfiwinlcg.par('objt',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfiwinlcg.par('imag',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfiwinlcg.version('2.1-git')
sfiwinlcg.synopsis('''sfiwinlcg < in.rsf > out.rsf source=source.rsf data=data.rsf imask=imask.rsf weight=weight.rsf precon=precon.rsf grad=grad.rsf objt=objt.rsf imag=imag.rsf verb=y nh=0 load=n update=y uts=0 npml=10 prect1=5 prect2=1 prect3=5 pliter=20 plower=0.1 pupper=3. dorder=6 grect1=5 grect2=5 gliter=5 geps=0. gscale=0.1 miter=10 liter=5 delta=1.e-5 lower=1.5 upper=7.5 order= cost=''','''''')
rsf.doc.progs['sfiwinlcg']=sfiwinlcg

sfiwilbfgs = rsf.doc.rsfprog('sfiwilbfgs','user/sparse/Miwilbfgs.c','''Image-domain waveform tomography (L-BFGS). ''')
sfiwilbfgs.par('source',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwilbfgs.par('data',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwilbfgs.par('wdso',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwilbfgs.par('wstk',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwilbfgs.par('precon',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwilbfgs.par('grad',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfiwilbfgs.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity flag '''))
sfiwilbfgs.par('deriv',rsf.doc.rsfpar('bool','y','','''if y, apply derivative in z '''))
sfiwilbfgs.par('nh',rsf.doc.rsfpar('int','0','','''horizontal space-lag '''))
sfiwilbfgs.par('load',rsf.doc.rsfpar('bool','n','','''load LU '''))
sfiwilbfgs.par('uts',rsf.doc.rsfpar('int','0','','''number of OMP threads '''))
sfiwilbfgs.par('npml',rsf.doc.rsfpar('int','10','','''PML width '''))
sfiwilbfgs.par('beta',rsf.doc.rsfpar('float','0.','','''stacking power cost function '''))
sfiwilbfgs.par('grect1',rsf.doc.rsfpar('int','5','','''gradient smoothing radius on axis 1 '''))
sfiwilbfgs.par('grect2',rsf.doc.rsfpar('int','5','','''gradient smoothing radius on axis 2 '''))
sfiwilbfgs.par('gscale',rsf.doc.rsfpar('float','-1.','','''gradient re-scale (enabled if (0,1)) '''))
sfiwilbfgs.par('nhess',rsf.doc.rsfpar('int','6','','''L-BFGS # of Hessian corrections '''))
sfiwilbfgs.par('miter',rsf.doc.rsfpar('int','10','','''L-BFGS maximum # of iterations '''))
sfiwilbfgs.par('mline',rsf.doc.rsfpar('int','5','','''L-BFGS maximum # of line search '''))
sfiwilbfgs.par('epsilon',rsf.doc.rsfpar('float','1.e-7','','''L-BFGS termination epsilon '''))
sfiwilbfgs.par('lower',rsf.doc.rsfpar('float','1.5','','''lower bound of feasible set '''))
sfiwilbfgs.par('upper',rsf.doc.rsfpar('float','7.5','','''upper bound of feasible set '''))
sfiwilbfgs.par('order',rsf.doc.rsfpar('string ',desc='''discretization scheme (default optimal 9-point) '''))
sfiwilbfgs.par('source',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwilbfgs.par('data',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwilbfgs.par('wdso',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwilbfgs.par('wstk',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwilbfgs.par('precon',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwilbfgs.par('grad',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfiwilbfgs.version('2.1-git')
sfiwilbfgs.synopsis('''sfiwilbfgs < in.rsf > out.rsf source=source.rsf data=data.rsf wdso=wdso.rsf wstk=wstk.rsf precon=precon.rsf grad=grad.rsf verb=y deriv=y nh=0 load=n uts=0 npml=10 beta=0. grect1=5 grect2=5 gscale=-1. nhess=6 miter=10 mline=5 epsilon=1.e-7 lower=1.5 upper=7.5 order=''','''''')
rsf.doc.progs['sfiwilbfgs']=sfiwilbfgs

sfiwigrad = rsf.doc.rsfprog('sfiwigrad','user/sparse/Miwigrad.c','''Image-domain waveform tomography (gradient). ''')
sfiwigrad.par('source',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwigrad.par('data',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwigrad.par('imask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwigrad.par('weight',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwigrad.par('precon',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwigrad.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfiwigrad.par('nh',rsf.doc.rsfpar('int','0','','''horizontal space-lag '''))
sfiwigrad.par('load',rsf.doc.rsfpar('bool','n','','''load LU '''))
sfiwigrad.par('update',rsf.doc.rsfpar('bool','y','','''Non-linear CG update '''))
sfiwigrad.par('uts',rsf.doc.rsfpar('int','0','','''number of OMP threads '''))
sfiwigrad.par('npml',rsf.doc.rsfpar('int','10','','''PML width '''))
sfiwigrad.par('prect1',rsf.doc.rsfpar('int','5','','''slope smoothing radius on axis 1 '''))
sfiwigrad.par('prect2',rsf.doc.rsfpar('int','1','','''slope smoothing radius on axis 2 '''))
sfiwigrad.par('prect3',rsf.doc.rsfpar('int','5','','''slope smoothing radius on axis 3 '''))
sfiwigrad.par('pliter',rsf.doc.rsfpar('int','20','','''slope estimation # of linear iterations '''))
sfiwigrad.par('plower',rsf.doc.rsfpar('float','0.1','','''slope thresholding lower limit '''))
sfiwigrad.par('pupper',rsf.doc.rsfpar('float','3.','','''slope thresholding upper limit '''))
sfiwigrad.par('dorder',rsf.doc.rsfpar('int','6','','''image derivative accuracy order '''))
sfiwigrad.par('grect1',rsf.doc.rsfpar('int','5','','''gradient smoothing radius on axis 1 '''))
sfiwigrad.par('grect2',rsf.doc.rsfpar('int','5','','''gradient smoothing radius on axis 2 '''))
sfiwigrad.par('gliter',rsf.doc.rsfpar('int','1','','''# of Gauss-Newton iterations '''))
sfiwigrad.par('geps',rsf.doc.rsfpar('float','0.','','''regularization parameter for Gauss-Newton '''))
sfiwigrad.par('gscale',rsf.doc.rsfpar('float','0.5','','''gradient re-scale '''))
sfiwigrad.par('miter',rsf.doc.rsfpar('int','10','','''Nonlinear-CG maximum # of iterations '''))
sfiwigrad.par('lower',rsf.doc.rsfpar('float','1.5','','''lower bound of feasible set '''))
sfiwigrad.par('upper',rsf.doc.rsfpar('float','7.5','','''upper bound of feasible set '''))
sfiwigrad.par('order',rsf.doc.rsfpar('string ',desc='''discretization scheme (default optimal 9-point) '''))
sfiwigrad.par('cost',rsf.doc.rsfpar('string ',desc='''cost functional type (default classic DSO) '''))
sfiwigrad.par('source',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwigrad.par('data',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwigrad.par('imask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwigrad.par('weight',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwigrad.par('precon',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwigrad.version('2.1-git')
sfiwigrad.synopsis('''sfiwigrad < in.rsf > out.rsf source=source.rsf data=data.rsf imask=imask.rsf weight=weight.rsf precon=precon.rsf verb=n nh=0 load=n update=y uts=0 npml=10 prect1=5 prect2=1 prect3=5 pliter=20 plower=0.1 pupper=3. dorder=6 grect1=5 grect2=5 gliter=1 geps=0. gscale=0.5 miter=10 lower=1.5 upper=7.5 order= cost=''','''''')
rsf.doc.progs['sfiwigrad']=sfiwigrad

