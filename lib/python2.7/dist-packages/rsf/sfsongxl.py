import rsf.doc

sfwave1 = rsf.doc.rsfprog('sfwave1','user/songxl/Mwave1.c','''1-D finite-difference wave extrapolation ''')
sfwave1.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwave1.par('grad',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwave1.version('2.1-git')
sfwave1.synopsis('''sfwave1 < inp.rsf > out.rsf vel=vel.rsf grad=grad.rsf''','''''')
rsf.doc.progs['sfwave1']=sfwave1

sfwave4 = rsf.doc.rsfprog('sfwave4','user/songxl/Mwave4.c','''1-D finite-difference wave extrapolation ''')
sfwave4.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwave4.par('grad',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwave4.version('2.1-git')
sfwave4.synopsis('''sfwave4 < inp.rsf > out.rsf vel=vel.rsf grad=grad.rsf''','''''')
rsf.doc.progs['sfwave4']=sfwave4

sfwave124 = rsf.doc.rsfprog('sfwave124','user/songxl/Mwave124.c','''1-D finite-difference wave extrapolation ''')
sfwave124.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwave124.par('grad',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwave124.par('what',rsf.doc.rsfpar('int','2','','''2nd or 4th order for FD'''))
sfwave124.version('2.1-git')
sfwave124.synopsis('''sfwave124 < inp.rsf > out.rsf vel=vel.rsf grad=grad.rsf what=2''','''''')
rsf.doc.progs['sfwave124']=sfwave124

sfsbd = rsf.doc.rsfprog('sfsbd','user/songxl/Msbd.c','''1-D finite-difference wave extrapolation ''')
sfsbd.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsbd.par('grad',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsbd.par('what',rsf.doc.rsfpar('int','2','','''2nd or 4th order for FD'''))
sfsbd.version('2.1-git')
sfsbd.synopsis('''sfsbd < inp.rsf > out.rsf vel=vel.rsf grad=grad.rsf what=2''','''''')
rsf.doc.progs['sfsbd']=sfsbd

sfwaveab = rsf.doc.rsfprog('sfwaveab','user/songxl/Mwaveab.c','''1-D finite-difference wave extrapolation ''')
sfwaveab.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwaveab.par('grad',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwaveab.par('what',rsf.doc.rsfpar('int','2','','''2nd or 4th order for FD'''))
sfwaveab.par('nb',rsf.doc.rsfpar('int','10','','''2nd or 4th order for FD'''))
sfwaveab.version('2.1-git')
sfwaveab.synopsis('''sfwaveab < inp.rsf > out.rsf vel=vel.rsf grad=grad.rsf what=2 nb=10''','''''')
rsf.doc.progs['sfwaveab']=sfwaveab

sfwave2dss = rsf.doc.rsfprog('sfwave2dss','user/songxl/Mwave2dss.c','''1-D finite-difference wave extrapolation ''')
sfwave2dss.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwave2dss.par('grad1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwave2dss.par('grad2',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwave2dss.par('sl',rsf.doc.rsfpar('int','nx/2','','''source location'''))
sfwave2dss.par('what',rsf.doc.rsfpar('int','2','','''2nd or 4th order for FD'''))
sfwave2dss.par('nb1',rsf.doc.rsfpar('int','20','','''x boundary nodes '''))
sfwave2dss.par('nb2',rsf.doc.rsfpar('int','20','','''z boundary nodes'''))
sfwave2dss.version('2.1-git')
sfwave2dss.synopsis('''sfwave2dss < inp.rsf > out.rsf vel=vel.rsf grad1=grad1.rsf grad2=grad2.rsf sl=nx/2 what=2 nb1=20 nb2=20''','''''')
rsf.doc.progs['sfwave2dss']=sfwave2dss

sfwavefft1 = rsf.doc.rsfprog('sfwavefft1','user/songxl/Mwavefft1.c','''1-D finite-difference wave extrapolation ''')
sfwavefft1.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwavefft1.par('grad',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwavefft1.par('opt',rsf.doc.rsfpar('bool','y','',''''''))
sfwavefft1.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfwavefft1.par('nt',rsf.doc.rsfpar('int','','','''if y, determine optimal size for efficiency '''))
sfwavefft1.version('2.1-git')
sfwavefft1.synopsis('''sfwavefft1 < inp.rsf > out.rsf vel=vel.rsf grad=grad.rsf opt=y dt= nt=''','''''')
rsf.doc.progs['sfwavefft1']=sfwavefft1

sfpspig = rsf.doc.rsfprog('sfpspig','user/songxl/Mpspig.c','''1-D finite-difference wave extrapolation ''')
sfpspig.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpspig.par('grad',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpspig.par('opt',rsf.doc.rsfpar('bool','y','',''''''))
sfpspig.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfpspig.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfpspig.par('nv',rsf.doc.rsfpar('int','','',''''''))
sfpspig.par('lmdv',rsf.doc.rsfpar('float','','',''''''))
sfpspig.par('lmdvx',rsf.doc.rsfpar('float','','','''if y, determine optimal size for efficiency '''))
sfpspig.version('2.1-git')
sfpspig.synopsis('''sfpspig < inp.rsf > out.rsf vel=vel.rsf grad=grad.rsf opt=y dt= nt= nv= lmdv= lmdvx=''','''''')
rsf.doc.progs['sfpspig']=sfpspig

sfffd1 = rsf.doc.rsfprog('sfffd1','user/songxl/Mffd1.c','''1-D Fourier finite-difference wave extrapolation ''')
sfffd1.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffd1.par('opt',rsf.doc.rsfpar('bool','y','',''''''))
sfffd1.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfffd1.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfffd1.version('2.1-git')
sfffd1.synopsis('''sfffd1 < in.rsf vel=vel.rsf > out.rsf opt=y dt= nt=''','''''')
rsf.doc.progs['sfffd1']=sfffd1

sffdb1 = rsf.doc.rsfprog('sffdb1','user/songxl/Mfdb1.c','''1-D Finite-difference wave extrapolation ''')
sffdb1.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffdb1.par('dt',rsf.doc.rsfpar('float','','',''''''))
sffdb1.par('nt',rsf.doc.rsfpar('int','','',''''''))
sffdb1.par('nb',rsf.doc.rsfpar('int','20','',''''''))
sffdb1.par('abc',rsf.doc.rsfpar('int','0','','''absorbing boundary condition 1: cos 0: exp'''))
sffdb1.par('order',rsf.doc.rsfpar('int','2','','''FD order: 2,4'''))
sffdb1.version('2.1-git')
sffdb1.synopsis('''sffdb1 < in.rsf vel=vel.rsf > out.rsf dt= nt= nb=20 abc=0 order=2''','''''')
rsf.doc.progs['sffdb1']=sffdb1

sffd2bs = rsf.doc.rsfprog('sffd2bs','user/songxl/Mfd2bs.c','''2-D Fourth-order Finite-difference wave extrapolation ''')
sffd2bs.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffd2bs.par('opt',rsf.doc.rsfpar('bool','y','','''if y, determine optimal size for efficiency '''))
sffd2bs.par('dt',rsf.doc.rsfpar('float','','',''''''))
sffd2bs.par('nt',rsf.doc.rsfpar('int','','',''''''))
sffd2bs.par('isx',rsf.doc.rsfpar('int','','',''''''))
sffd2bs.par('isz',rsf.doc.rsfpar('int','','',''''''))
sffd2bs.par('nb',rsf.doc.rsfpar('int','30','',''''''))
sffd2bs.par('c',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sffd2bs.version('2.1-git')
sffd2bs.synopsis('''sffd2bs > out.rsf vel=vel.rsf < source.rsf opt=y dt= nt= isx= isz= nb=30 c=0.01''','''''')
rsf.doc.progs['sffd2bs']=sffd2bs

sfpspifcos2bs = rsf.doc.rsfprog('sfpspifcos2bs','user/songxl/Mpspifcos2bs.c','''1-D finite-difference wave extrapolation ''')
sfpspifcos2bs.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpspifcos2bs.par('source',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpspifcos2bs.par('opt',rsf.doc.rsfpar('bool','y','','''if y, determine optimal size for efficiency '''))
sfpspifcos2bs.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfpspifcos2bs.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfpspifcos2bs.par('nv',rsf.doc.rsfpar('int','','',''''''))
sfpspifcos2bs.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfpspifcos2bs.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfpspifcos2bs.par('nb',rsf.doc.rsfpar('int','30','',''''''))
sfpspifcos2bs.par('c',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfpspifcos2bs.version('2.1-git')
sfpspifcos2bs.synopsis('''sfpspifcos2bs < inp.rsf > out.rsf vel=vel.rsf source=source.rsf opt=y dt= nt= nv= isx= isz= nb=30 c=0.01''','''''')
rsf.doc.progs['sfpspifcos2bs']=sfpspifcos2bs

sfffdcos2b = rsf.doc.rsfprog('sfffdcos2b','user/songxl/Mffdcos2b.c','''2-D Fourier finite-difference wave extrapolation ''')
sfffdcos2b.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdcos2b.par('opt',rsf.doc.rsfpar('bool','y','','''if y, determine optimal size for efficiency '''))
sfffdcos2b.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfffdcos2b.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfffdcos2b.par('nb',rsf.doc.rsfpar('int','30','',''''''))
sfffdcos2b.par('c',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffdcos2b.version('2.1-git')
sfffdcos2b.synopsis('''sfffdcos2b > out.rsf vel=vel.rsf < source.rsf opt=y dt= nt= nb=30 c=0.01''','''''')
rsf.doc.progs['sfffdcos2b']=sfffdcos2b

sfffdantti4b_smsr = rsf.doc.rsfprog('sfffdantti4b_smsr','user/songxl/Mffdantti4b_smsr.c','''2-D Fourier finite-difference wave extrapolation ''')
sfffdantti4b_smsr.par('velx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdantti4b_smsr.par('velz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdantti4b_smsr.par('yita',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdantti4b_smsr.par('seta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdantti4b_smsr.par('opt',rsf.doc.rsfpar('bool','y','','''if y, determine optimal size for efficiency '''))
sfffdantti4b_smsr.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfffdantti4b_smsr.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfffdantti4b_smsr.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfffdantti4b_smsr.par('isz',rsf.doc.rsfpar('int','0','',''''''))
sfffdantti4b_smsr.par('err',rsf.doc.rsfpar('float','0.0001','',''''''))
sfffdantti4b_smsr.par('alpha',rsf.doc.rsfpar('float','-0.7','',''''''))
sfffdantti4b_smsr.par('nbt',rsf.doc.rsfpar('int','126','',''''''))
sfffdantti4b_smsr.par('nbb',rsf.doc.rsfpar('int','126','',''''''))
sfffdantti4b_smsr.par('nbl',rsf.doc.rsfpar('int','128','',''''''))
sfffdantti4b_smsr.par('nbr',rsf.doc.rsfpar('int','128','',''''''))
sfffdantti4b_smsr.par('ct',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sfffdantti4b_smsr.par('cb',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sfffdantti4b_smsr.par('cl',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sfffdantti4b_smsr.par('cr',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sfffdantti4b_smsr.version('2.1-git')
sfffdantti4b_smsr.synopsis('''sfffdantti4b_smsr > out.rsf velx=velx.rsf velz=velz.rsf yita=yita.rsf < source.rsf seta=seta.rsf opt=y dt= nt= isx= isz=0 err=0.0001 alpha=-0.7 nbt=126 nbb=126 nbl=128 nbr=128 ct=0.002 cb=0.002 cl=0.002 cr=0.002''','''''')
rsf.doc.progs['sfffdantti4b_smsr']=sfffdantti4b_smsr

sfffd2_ps = rsf.doc.rsfprog('sfffd2_ps','user/songxl/Mffd2_ps.c','''2-D Fourier finite-difference wave extrapolation, point source ''')
sfffd2_ps.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffd2_ps.par('opt',rsf.doc.rsfpar('bool','y','','''if y, determine optimal size for efficiency '''))
sfffd2_ps.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfffd2_ps.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfffd2_ps.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfffd2_ps.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfffd2_ps.par('nbt',rsf.doc.rsfpar('int','44','',''''''))
sfffd2_ps.par('nbb',rsf.doc.rsfpar('int','44','',''''''))
sfffd2_ps.par('nbl',rsf.doc.rsfpar('int','44','',''''''))
sfffd2_ps.par('nbr',rsf.doc.rsfpar('int','44','',''''''))
sfffd2_ps.par('ct',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2_ps.par('cb',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2_ps.par('cl',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2_ps.par('cr',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2_ps.version('2.1-git')
sfffd2_ps.synopsis('''sfffd2_ps > out.rsf vel=vel.rsf < source.rsf opt=y dt= nt= isx= isz= nbt=44 nbb=44 nbl=44 nbr=44 ct=0.01 cb=0.01 cl=0.01 cr=0.01''','''''')
rsf.doc.progs['sfffd2_ps']=sfffd2_ps

sflaplace = rsf.doc.rsfprog('sflaplace','user/songxl/Mlaplace.c','''2-D finite-difference Laplacian ''')
sflaplace.version('2.1-git')
sflaplace.synopsis('''sflaplace > out.rsf < img.rsf''','''''')
rsf.doc.progs['sflaplace']=sflaplace

sflaplace2 = rsf.doc.rsfprog('sflaplace2','user/songxl/Mlaplace2.c','''2-D Fourier finite-difference wave extrapolation ''')
sflaplace2.version('2.1-git')
sflaplace2.synopsis('''sflaplace2 > out.rsf < img.rsf''','''''')
rsf.doc.progs['sflaplace2']=sflaplace2

sfffd2dehf = rsf.doc.rsfprog('sfffd2dehf','user/songxl/Mffd2dehf.c','''2-D Fourier finite-difference wave extrapolation, smooth point source, depress high frequency ''')
sfffd2dehf.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffd2dehf.par('opt',rsf.doc.rsfpar('bool','y','','''if y, determine optimal size for efficiency '''))
sfffd2dehf.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfffd2dehf.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfffd2dehf.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfffd2dehf.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfffd2dehf.par('nbt',rsf.doc.rsfpar('int','44','',''''''))
sfffd2dehf.par('nbb',rsf.doc.rsfpar('int','44','',''''''))
sfffd2dehf.par('nbl',rsf.doc.rsfpar('int','44','',''''''))
sfffd2dehf.par('nbr',rsf.doc.rsfpar('int','44','',''''''))
sfffd2dehf.par('ct',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2dehf.par('cb',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2dehf.par('cl',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2dehf.par('cr',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2dehf.par('ax',rsf.doc.rsfpar('float','5.0','','''suppress HF parameter'''))
sfffd2dehf.par('az',rsf.doc.rsfpar('float','5.0','','''suppress HF parameter'''))
sfffd2dehf.par('factor',rsf.doc.rsfpar('float','5.0/6.0','','''suppress HF parameter'''))
sfffd2dehf.version('2.1-git')
sfffd2dehf.synopsis('''sfffd2dehf > out.rsf vel=vel.rsf < source.rsf opt=y dt= nt= isx= isz= nbt=44 nbb=44 nbl=44 nbr=44 ct=0.01 cb=0.01 cl=0.01 cr=0.01 ax=5.0 az=5.0 factor=5.0/6.0''','''''')
rsf.doc.progs['sfffd2dehf']=sfffd2dehf

sfsp = rsf.doc.rsfprog('sfsp','user/songxl/Msp.c','''2-D Pseudo-spectral wave extrapolation ''')
sfsp.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsp.par('opt',rsf.doc.rsfpar('bool','y','','''if y, determine optimal size for efficiency '''))
sfsp.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfsp.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfsp.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfsp.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfsp.par('nb',rsf.doc.rsfpar('int','30','',''''''))
sfsp.par('c',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfsp.par('ax',rsf.doc.rsfpar('float','5.0','','''suppress HF parameter'''))
sfsp.par('az',rsf.doc.rsfpar('float','5.0','','''suppress HF parameter'''))
sfsp.par('factor',rsf.doc.rsfpar('float','5.0/6.0','','''suppress HF parameter'''))
sfsp.version('2.1-git')
sfsp.synopsis('''sfsp > out.rsf vel=vel.rsf < source.rsf opt=y dt= nt= isx= isz= nb=30 c=0.01 ax=5.0 az=5.0 factor=5.0/6.0''','''''')
rsf.doc.progs['sfsp']=sfsp

sfofd1 = rsf.doc.rsfprog('sfofd1','user/songxl/Mofd1.c','''1-D Optimized finite-difference wave extrapolation ''')
sfofd1.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd1.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd1.par('isx',rsf.doc.rsfpar('int','(int)(nx/2)','',''''''))
sfofd1.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfofd1.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfofd1.version('2.1-git')
sfofd1.synopsis('''sfofd1 < in.rsf G=Gmatrix.rsf vel=vel.rsf > out.rsf isx=(int)(nx/2) nt= dt=''','''''')
rsf.doc.progs['sfofd1']=sfofd1

sffd1 = rsf.doc.rsfprog('sffd1','user/songxl/Mfd1.c','''1-D Optimized finite-difference wave extrapolation ''')
sffd1.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffd1.par('isx',rsf.doc.rsfpar('int','(int)(nx/2)','',''''''))
sffd1.par('nt',rsf.doc.rsfpar('int','','',''''''))
sffd1.par('dt',rsf.doc.rsfpar('float','','',''''''))
sffd1.version('2.1-git')
sffd1.synopsis('''sffd1 < in.rsf vel=vel.rsf > out.rsf isx=(int)(nx/2) nt= dt=''','''''')
rsf.doc.progs['sffd1']=sffd1

sfofd1_5 = rsf.doc.rsfprog('sfofd1_5','user/songxl/Mofd1_5.c','''1-D Optimized finite-difference wave extrapolation ''')
sfofd1_5.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd1_5.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd1_5.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfofd1_5.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfofd1_5.version('2.1-git')
sfofd1_5.synopsis('''sfofd1_5 < in.rsf G=Gmatrix.rsf vel=vel.rsf > out.rsf nt= dt=''','''''')
rsf.doc.progs['sfofd1_5']=sfofd1_5

sffd1_5 = rsf.doc.rsfprog('sffd1_5','user/songxl/Mfd1_5.c','''1-D Optimized finite-difference wave extrapolation ''')
sffd1_5.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffd1_5.par('isx',rsf.doc.rsfpar('int','(int)(nx/2)','',''''''))
sffd1_5.par('nt',rsf.doc.rsfpar('int','','',''''''))
sffd1_5.par('dt',rsf.doc.rsfpar('float','','',''''''))
sffd1_5.version('2.1-git')
sffd1_5.synopsis('''sffd1_5 < in.rsf vel=vel.rsf > out.rsf isx=(int)(nx/2) nt= dt=''','''''')
rsf.doc.progs['sffd1_5']=sffd1_5

sfofd2_5 = rsf.doc.rsfprog('sfofd2_5','user/songxl/Mofd2_5.c','''2-D Fourth-order Optimized Finite-difference wave extrapolation ''')
sfofd2_5.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_5.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_5.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfofd2_5.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfofd2_5.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfofd2_5.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfofd2_5.version('2.1-git')
sfofd2_5.synopsis('''sfofd2_5 > out.rsf vel=vel.rsf < source.rsf G=G.rsf dt= nt= isx= isz=''','''''')
rsf.doc.progs['sfofd2_5']=sfofd2_5

sfofd2_7 = rsf.doc.rsfprog('sfofd2_7','user/songxl/Mofd2_7.c','''2-D Fourth-order Optimized Finite-difference wave extrapolation ''')
sfofd2_7.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_7.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_7.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfofd2_7.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfofd2_7.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfofd2_7.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfofd2_7.version('2.1-git')
sfofd2_7.synopsis('''sfofd2_7 > out.rsf vel=vel.rsf < source.rsf G=G.rsf dt= nt= isx= isz=''','''''')
rsf.doc.progs['sfofd2_7']=sfofd2_7

sfofd2_13 = rsf.doc.rsfprog('sfofd2_13','user/songxl/Mofd2_13.c','''2-D Fourth-order Optimized Finite-difference wave extrapolation ''')
sfofd2_13.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_13.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_13.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfofd2_13.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfofd2_13.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfofd2_13.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfofd2_13.version('2.1-git')
sfofd2_13.synopsis('''sfofd2_13 > out.rsf vel=vel.rsf < source.rsf G=G.rsf dt= nt= isx= isz=''','''''')
rsf.doc.progs['sfofd2_13']=sfofd2_13

sfofd2_10 = rsf.doc.rsfprog('sfofd2_10','user/songxl/Mofd2_10.c','''2-D Fourth-order Optimized Finite-difference wave extrapolation ''')
sfofd2_10.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_10.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_10.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfofd2_10.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfofd2_10.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfofd2_10.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfofd2_10.version('2.1-git')
sfofd2_10.synopsis('''sfofd2_10 > out.rsf vel=vel.rsf < source.rsf G=G.rsf dt= nt= isx= isz=''','''''')
rsf.doc.progs['sfofd2_10']=sfofd2_10

sffd2_10 = rsf.doc.rsfprog('sffd2_10','user/songxl/Mfd2_10.c','''2-D Fourth-order Optimized Finite-difference wave extrapolation ''')
sffd2_10.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffd2_10.par('dt',rsf.doc.rsfpar('float','','',''''''))
sffd2_10.par('nt',rsf.doc.rsfpar('int','','',''''''))
sffd2_10.par('isx',rsf.doc.rsfpar('int','','',''''''))
sffd2_10.par('isz',rsf.doc.rsfpar('int','','',''''''))
sffd2_10.version('2.1-git')
sffd2_10.synopsis('''sffd2_10 > out.rsf vel=vel.rsf < source.rsf dt= nt= isx= isz=''','''''')
rsf.doc.progs['sffd2_10']=sffd2_10

sfofd2_25 = rsf.doc.rsfprog('sfofd2_25','user/songxl/Mofd2_25.c','''2-D Fourth-order Optimized Finite-difference wave extrapolation ''')
sfofd2_25.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_25.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_25.par('s1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_25.par('s2',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_25.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfofd2_25.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfofd2_25.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfofd2_25.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfofd2_25.version('2.1-git')
sfofd2_25.synopsis('''sfofd2_25 > out.rsf vel=vel.rsf < source.rsf G=G.rsf s1=files1.rsf s2=files2.rsf dt= nt= isx= isz=''','''''')
rsf.doc.progs['sfofd2_25']=sfofd2_25

sflfd2_25b = rsf.doc.rsfprog('sflfd2_25b','user/songxl/Mlfd2_25b.c','''2-D Fourth-order Optimized Finite-difference wave extrapolation ''')
sflfd2_25b.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflfd2_25b.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflfd2_25b.par('s1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflfd2_25b.par('s2',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflfd2_25b.par('dt',rsf.doc.rsfpar('float','','',''''''))
sflfd2_25b.par('nt',rsf.doc.rsfpar('int','','',''''''))
sflfd2_25b.par('isx',rsf.doc.rsfpar('int','','',''''''))
sflfd2_25b.par('isz',rsf.doc.rsfpar('int','','',''''''))
sflfd2_25b.par('nbt',rsf.doc.rsfpar('int','100','',''''''))
sflfd2_25b.par('nbb',rsf.doc.rsfpar('int','100','',''''''))
sflfd2_25b.par('nbl',rsf.doc.rsfpar('int','100','',''''''))
sflfd2_25b.par('nbr',rsf.doc.rsfpar('int','100','',''''''))
sflfd2_25b.par('ct',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sflfd2_25b.par('cb',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sflfd2_25b.par('cl',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sflfd2_25b.par('cr',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sflfd2_25b.par('jm',rsf.doc.rsfpar('int','10','',''''''))
sflfd2_25b.version('2.1-git')
sflfd2_25b.synopsis('''sflfd2_25b > out.rsf vel=vel.rsf < source.rsf G=G.rsf s1=files1.rsf s2=files2.rsf dt= nt= isx= isz= nbt=100 nbb=100 nbl=100 nbr=100 ct=0.002 cb=0.002 cl=0.002 cr=0.002 jm=10''','''''')
rsf.doc.progs['sflfd2_25b']=sflfd2_25b

sflffd1_10 = rsf.doc.rsfprog('sflffd1_10','user/songxl/Mlffd1_10.c','''1-D Lowrank Fourier finite-difference wave extrapolation ''')
sflffd1_10.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd1_10.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd1_10.par('nt',rsf.doc.rsfpar('int','','',''''''))
sflffd1_10.par('dt',rsf.doc.rsfpar('float','','',''''''))
sflffd1_10.par('factor',rsf.doc.rsfpar('float','0.5','',''''''))
sflffd1_10.version('2.1-git')
sflffd1_10.synopsis('''sflffd1_10 < in.rsf vel=vel.rsf G=Gmatrix.rsf > out.rsf nt= dt= factor=0.5''','''''')
rsf.doc.progs['sflffd1_10']=sflffd1_10

sflffd2_an_25 = rsf.doc.rsfprog('sflffd2_an_25','user/songxl/Mlffd2_an_25.c','''2-D Fourier finite-difference wave extrapolation ''')
sflffd2_an_25.par('velz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd2_an_25.par('velx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd2_an_25.par('yita',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd2_an_25.par('seta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd2_an_25.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd2_an_25.par('paras',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd2_an_25.par('s1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd2_an_25.par('s2',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd2_an_25.par('dt',rsf.doc.rsfpar('float','','',''''''))
sflffd2_an_25.par('nt',rsf.doc.rsfpar('int','','',''''''))
sflffd2_an_25.par('isx',rsf.doc.rsfpar('int','','',''''''))
sflffd2_an_25.par('isz',rsf.doc.rsfpar('int','','',''''''))
sflffd2_an_25.par('ax',rsf.doc.rsfpar('float','2.0','','''suppress HF parameter'''))
sflffd2_an_25.par('az',rsf.doc.rsfpar('float','2.0','','''suppress HF parameter'''))
sflffd2_an_25.par('factor',rsf.doc.rsfpar('float','1.0','','''suppress HF parameter'''))
sflffd2_an_25.par('err',rsf.doc.rsfpar('float','0.0001','','''suppress HF parameter'''))
sflffd2_an_25.par('de',rsf.doc.rsfpar('bool','y','',''''''))
sflffd2_an_25.version('2.1-git')
sflffd2_an_25.synopsis('''sflffd2_an_25 > out.rsf < source.rsf velz=velz.rsf velx=velx.rsf yita=yita.rsf seta=seta.rsf G=G.rsf paras=paras.rsf s1=files1.rsf s2=files2.rsf dt= nt= isx= isz= ax=2.0 az=2.0 factor=1.0 err=0.0001 de=y''','''''')
rsf.doc.progs['sflffd2_an_25']=sflffd2_an_25

sfnxtfftn = rsf.doc.rsfprog('sfnxtfftn','user/songxl/Mnxtfftn.c','''Look For next FFT number ''')
sfnxtfftn.par('nx',rsf.doc.rsfpar('int','','',''''''))
sfnxtfftn.version('2.1-git')
sfnxtfftn.synopsis('''sfnxtfftn nx=''','''''')
rsf.doc.progs['sfnxtfftn']=sfnxtfftn

sforthowave = rsf.doc.rsfprog('sforthowave','user/songxl/Morthowave.c','''Simple 3-D wave propagation ''')
sforthowave.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sforthowave.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sforthowave.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sforthowave.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sforthowave.par('mid',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sforthowave.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity '''))
sforthowave.par('cmplx',rsf.doc.rsfpar('bool','n','','''use complex FFT '''))
sforthowave.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sforthowave.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sforthowave.version('2.1-git')
sforthowave.synopsis('''sforthowave < Fw.rsf > Fo.rsf ref=Fr.rsf snaps=snaps.rsf left=left.rsf right=right.rsf mid=mid.rsf verb=y cmplx=n pad1=1 snap=0''','''''')
rsf.doc.progs['sforthowave']=sforthowave

sfffd2_den_omp = rsf.doc.rsfprog('sfffd2_den_omp','user/songxl/Mffd2_den_omp.c','''2-D Fourier finite-difference wave extrapolation ''')
sfffd2_den_omp.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffd2_den_omp.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffd2_den_omp.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfffd2_den_omp.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfffd2_den_omp.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfffd2_den_omp.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfffd2_den_omp.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfffd2_den_omp.par('irz',rsf.doc.rsfpar('int','isz','',''''''))
sfffd2_den_omp.par('jm',rsf.doc.rsfpar('int','20','',''''''))
sfffd2_den_omp.par('ax',rsf.doc.rsfpar('float','2.0','','''suppress HF parameter'''))
sfffd2_den_omp.par('az',rsf.doc.rsfpar('float','2.0','','''suppress HF parameter'''))
sfffd2_den_omp.par('factor',rsf.doc.rsfpar('float','2.0/3.0','','''suppress HF parameter'''))
sfffd2_den_omp.par('snap',rsf.doc.rsfpar('bool','y','','''Output snapshots'''))
sfffd2_den_omp.par('nbt',rsf.doc.rsfpar('int','0','',''''''))
sfffd2_den_omp.par('nbb',rsf.doc.rsfpar('int','0','',''''''))
sfffd2_den_omp.par('nbl',rsf.doc.rsfpar('int','0','',''''''))
sfffd2_den_omp.par('nbr',rsf.doc.rsfpar('int','0','',''''''))
sfffd2_den_omp.par('sht',rsf.doc.rsfpar('int','0','',''''''))
sfffd2_den_omp.par('ct',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2_den_omp.par('cb',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2_den_omp.par('cl',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2_den_omp.par('cr',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd2_den_omp.version('2.1-git')
sfffd2_den_omp.synopsis('''sfffd2_den_omp > out.rsf vel=vel.rsf den=den.rsf < source.rsf snaps=snaps.rsf dt= nt= isx= isz= irz=isz jm=20 ax=2.0 az=2.0 factor=2.0/3.0 snap=y nbt=0 nbb=0 nbl=0 nbr=0 sht=0 ct=0.01 cb=0.01 cl=0.01 cr=0.01''','''''')
rsf.doc.progs['sfffd2_den_omp']=sfffd2_den_omp

sfffd0 = rsf.doc.rsfprog('sfffd0','user/songxl/Mffd0.c','''2-D FFD zero-offset migration: MPI + OMP''')
sfffd0.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffd0.par('opt',rsf.doc.rsfpar('bool','y','',''''''))
sfffd0.par('jr',rsf.doc.rsfpar('int','1','',''''''))
sfffd0.par('r0',rsf.doc.rsfpar('int','0','',''''''))
sfffd0.par('jm',rsf.doc.rsfpar('int','20','',''''''))
sfffd0.par('err',rsf.doc.rsfpar('float','0.00001','',''''''))
sfffd0.par('alpha',rsf.doc.rsfpar('float','-0.7','',''''''))
sfffd0.par('nbt',rsf.doc.rsfpar('int','44','',''''''))
sfffd0.par('nbb',rsf.doc.rsfpar('int','44','',''''''))
sfffd0.par('nbl',rsf.doc.rsfpar('int','44','',''''''))
sfffd0.par('nbr',rsf.doc.rsfpar('int','44','',''''''))
sfffd0.par('ct',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd0.par('cb',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd0.par('cl',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd0.par('cr',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffd0.par('ax',rsf.doc.rsfpar('float','2.0','','''suppress HF parameter'''))
sfffd0.par('az',rsf.doc.rsfpar('float','2.0','','''suppress HF parameter'''))
sfffd0.par('factor',rsf.doc.rsfpar('float','2.0/3.0','','''suppress HF parameter'''))
sfffd0.version('2.1-git')
sfffd0.synopsis('''sfffd0 vel=vel.rsf < source.rsf > output.rsf opt=y jr=1 r0=0 jm=20 err=0.00001 alpha=-0.7 nbt=44 nbb=44 nbl=44 nbr=44 ct=0.01 cb=0.01 cl=0.01 cr=0.01 ax=2.0 az=2.0 factor=2.0/3.0''','''''')
rsf.doc.progs['sfffd0']=sfffd0

sflffd2an25 = rsf.doc.rsfprog('sflffd2an25','user/songxl/Mlffd2an25.c','''2-D Fourier finite-difference wave extrapolation ''')
sflffd2an25.par('velz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd2an25.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd2an25.par('paras',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd2an25.par('s1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd2an25.par('s2',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflffd2an25.par('dt',rsf.doc.rsfpar('float','','',''''''))
sflffd2an25.par('nt',rsf.doc.rsfpar('int','','',''''''))
sflffd2an25.par('isx',rsf.doc.rsfpar('int','','',''''''))
sflffd2an25.par('isz',rsf.doc.rsfpar('int','','',''''''))
sflffd2an25.par('ax',rsf.doc.rsfpar('float','2.0','','''suppress HF parameter'''))
sflffd2an25.par('az',rsf.doc.rsfpar('float','2.0','','''suppress HF parameter'''))
sflffd2an25.par('factor',rsf.doc.rsfpar('float','1.0','','''suppress HF parameter'''))
sflffd2an25.par('err',rsf.doc.rsfpar('float','0.0001','','''suppress HF parameter'''))
sflffd2an25.par('de',rsf.doc.rsfpar('bool','y','',''''''))
sflffd2an25.version('2.1-git')
sflffd2an25.synopsis('''sflffd2an25 > out.rsf < source.rsf velz=velz.rsf G=G.rsf paras=paras.rsf s1=files1.rsf s2=files2.rsf dt= nt= isx= isz= ax=2.0 az=2.0 factor=1.0 err=0.0001 de=y''','''''')
rsf.doc.progs['sflffd2an25']=sflffd2an25

sfphasescan = rsf.doc.rsfprog('sfphasescan','user/songxl/Mphasescan.c','''Multicomponent data registration analysis. ''')
sfphasescan.par('other',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfphasescan.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity flag '''))
sfphasescan.par('ng',rsf.doc.rsfpar('int','1','','''number of gamma values '''))
sfphasescan.par('g0',rsf.doc.rsfpar('float','','','''gamma origin '''))
sfphasescan.par('dg',rsf.doc.rsfpar('float','g0','','''gamma sampling '''))
sfphasescan.par('rect1',rsf.doc.rsfpar('int','1','','''vertical smoothing '''))
sfphasescan.par('rect2',rsf.doc.rsfpar('int','1','','''gamma smoothing '''))
sfphasescan.par('rect3',rsf.doc.rsfpar('int','1','','''in-line smoothing '''))
sfphasescan.par('rect4',rsf.doc.rsfpar('int','1','','''cross-line smoothing '''))
sfphasescan.par('niter',rsf.doc.rsfpar('int','10','','''number of iterations '''))
sfphasescan.par('accuracy',rsf.doc.rsfpar('int','','[1-4]','''interpolation accuracy '''))
sfphasescan.version('2.1-git Mphasescan.c 744 2004-08-17 18:46:07Z songxl')
sfphasescan.synopsis('''sfphasescan < in.rsf > warped.rsf other=other.rsf verb=y ng=1 g0= dg=g0 rect1=1 rect2=1 rect3=1 rect4=1 niter=10 accuracy=''','''''')
rsf.doc.progs['sfphasescan']=sfphasescan

sforp = rsf.doc.rsfprog('sforp','user/songxl/Morp.c','''2-D 10th-order Finite-difference dispersion''')
sforp.par('vx',rsf.doc.rsfpar('float','2.1','',''''''))
sforp.par('vy',rsf.doc.rsfpar('float','2.05','',''''''))
sforp.par('vz',rsf.doc.rsfpar('float','2.0','',''''''))
sforp.par('e1',rsf.doc.rsfpar('float','0.3','',''''''))
sforp.par('e2',rsf.doc.rsfpar('float','0.1','',''''''))
sforp.par('e3',rsf.doc.rsfpar('float','1.0','',''''''))
sforp.par('phi',rsf.doc.rsfpar('float','45.0','',''''''))
sforp.version('2.1-git')
sforp.synopsis('''sforp > out.rsf < vel.rsf vx=2.1 vy=2.05 vz=2.0 e1=0.3 e2=0.1 e3=1.0 phi=45.0''','''''')
rsf.doc.progs['sforp']=sforp

sfffdtti2 = rsf.doc.rsfprog('sfffdtti2','user/songxl/Mffdtti2.c','''2-D Fourier finite-difference wave extrapolation ''')
sfffdtti2.par('velx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdtti2.par('velz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdtti2.par('yita',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdtti2.par('seta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdtti2.par('opt',rsf.doc.rsfpar('bool','y','','''if y, determine optimal size for efficiency '''))
sfffdtti2.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfffdtti2.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfffdtti2.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfffdtti2.par('isz',rsf.doc.rsfpar('int','0','',''''''))
sfffdtti2.par('err',rsf.doc.rsfpar('float','0.0001','',''''''))
sfffdtti2.par('alpha',rsf.doc.rsfpar('float','-0.7','',''''''))
sfffdtti2.par('nbt',rsf.doc.rsfpar('int','126','',''''''))
sfffdtti2.par('nbb',rsf.doc.rsfpar('int','126','',''''''))
sfffdtti2.par('nbl',rsf.doc.rsfpar('int','128','',''''''))
sfffdtti2.par('nbr',rsf.doc.rsfpar('int','128','',''''''))
sfffdtti2.par('ct',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sfffdtti2.par('cb',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sfffdtti2.par('cl',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sfffdtti2.par('cr',rsf.doc.rsfpar('float','0.002','','''decaying parameter'''))
sfffdtti2.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfffdtti2.par('cmplx',rsf.doc.rsfpar('bool','y','','''use complex FFT '''))
sfffdtti2.par('cmplx',rsf.doc.rsfpar('bool','y','','''use complex FFT '''))
sfffdtti2.par('cmplx',rsf.doc.rsfpar('bool','n','','''use complex FFT '''))
sfffdtti2.version('2.1-git')
sfffdtti2.synopsis('''sfffdtti2 > out.rsf velx=velx.rsf velz=velz.rsf yita=yita.rsf < source.rsf seta=seta.rsf opt=y dt= nt= isx= isz=0 err=0.0001 alpha=-0.7 nbt=126 nbb=126 nbl=128 nbr=128 ct=0.002 cb=0.002 cl=0.002 cr=0.002 pad1=1 cmplx=y cmplx=y cmplx=n''','''''')
rsf.doc.progs['sfffdtti2']=sfffdtti2

sftti4rtm = rsf.doc.rsfprog('sftti4rtm','user/songxl/Mtti4rtm.c','''2-D Fourier finite-difference wave extrapolation: MPI + OMP''')
sftti4rtm.par('geo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftti4rtm.par('velx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftti4rtm.par('velz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftti4rtm.par('yita',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftti4rtm.par('source',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftti4rtm.par('seta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftti4rtm.par('opt',rsf.doc.rsfpar('bool','y','',''''''))
sftti4rtm.par('de',rsf.doc.rsfpar('bool','y','','''if y, determine optimal size for efficiency '''))
sftti4rtm.par('dt',rsf.doc.rsfpar('float','','',''''''))
sftti4rtm.par('nt',rsf.doc.rsfpar('int','','',''''''))
sftti4rtm.par('isz',rsf.doc.rsfpar('int','','',''''''))
sftti4rtm.par('irz',rsf.doc.rsfpar('int','isz','','''if (!sf_getint("r0",&r0)) r0=0; '''))
sftti4rtm.par('jr',rsf.doc.rsfpar('int','1','',''''''))
sftti4rtm.par('jm',rsf.doc.rsfpar('int','20','',''''''))
sftti4rtm.par('nr',rsf.doc.rsfpar('int','','','''streamer total length'''))
sftti4rtm.par('err',rsf.doc.rsfpar('float','0.00001','',''''''))
sftti4rtm.par('alpha',rsf.doc.rsfpar('float','-0.7','',''''''))
sftti4rtm.par('nbt',rsf.doc.rsfpar('int','44','',''''''))
sftti4rtm.par('nbb',rsf.doc.rsfpar('int','44','',''''''))
sftti4rtm.par('nbl',rsf.doc.rsfpar('int','44','',''''''))
sftti4rtm.par('nbr',rsf.doc.rsfpar('int','44','',''''''))
sftti4rtm.par('ct',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sftti4rtm.par('cb',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sftti4rtm.par('cl',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sftti4rtm.par('cr',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sftti4rtm.par('ax',rsf.doc.rsfpar('float','2.0','','''suppress HF parameter'''))
sftti4rtm.par('az',rsf.doc.rsfpar('float','2.0','','''suppress HF parameter'''))
sftti4rtm.par('factor',rsf.doc.rsfpar('float','2.0/3.0','','''suppress HF parameter'''))
sftti4rtm.version('2.1-git')
sftti4rtm.synopsis('''sftti4rtm geo=geo.rsf velx=velx.rsf velz=velz.rsf yita=yita.rsf source=source.rsf seta=seta.rsf opt=y de=y dt= nt= isz= irz=isz jr=1 jm=20 nr= err=0.00001 alpha=-0.7 nbt=44 nbb=44 nbl=44 nbr=44 ct=0.01 cb=0.01 cl=0.01 cr=0.01 ax=2.0 az=2.0 factor=2.0/3.0''','''''')
rsf.doc.progs['sftti4rtm']=sftti4rtm

sfffdrtm = rsf.doc.rsfprog('sfffdrtm','user/songxl/Mffdrtm.c','''2-D FFD RTM: MPI + OMP''')
sfffdrtm.par('geo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdrtm.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdrtm.par('source',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdrtm.par('opt',rsf.doc.rsfpar('bool','y','','''if y, determine optimal size for efficiency '''))
sfffdrtm.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfffdrtm.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfffdrtm.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfffdrtm.par('irz',rsf.doc.rsfpar('int','isz','','''if (!sf_getint("r0",&r0)) r0=0; '''))
sfffdrtm.par('jr',rsf.doc.rsfpar('int','1','',''''''))
sfffdrtm.par('jm',rsf.doc.rsfpar('int','20','',''''''))
sfffdrtm.par('nr',rsf.doc.rsfpar('int','','','''streamer total length'''))
sfffdrtm.par('err',rsf.doc.rsfpar('float','0.00001','',''''''))
sfffdrtm.par('alpha',rsf.doc.rsfpar('float','-0.7','',''''''))
sfffdrtm.par('nbt',rsf.doc.rsfpar('int','44','',''''''))
sfffdrtm.par('nbb',rsf.doc.rsfpar('int','44','',''''''))
sfffdrtm.par('nbl',rsf.doc.rsfpar('int','44','',''''''))
sfffdrtm.par('nbr',rsf.doc.rsfpar('int','44','',''''''))
sfffdrtm.par('ct',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffdrtm.par('cb',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffdrtm.par('cl',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffdrtm.par('cr',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffdrtm.par('ax',rsf.doc.rsfpar('float','2.0','','''suppress HF parameter'''))
sfffdrtm.par('az',rsf.doc.rsfpar('float','2.0','','''suppress HF parameter'''))
sfffdrtm.par('factor',rsf.doc.rsfpar('float','2.0/3.0','','''suppress HF parameter'''))
sfffdrtm.par('sht',rsf.doc.rsfpar('int','0','','''Time shift parameter'''))
sfffdrtm.par('tskip',rsf.doc.rsfpar('int','0','','''Time shift parameter'''))
sfffdrtm.version('2.1-git')
sfffdrtm.synopsis('''sfffdrtm geo=geo.rsf vel=vel.rsf source=source.rsf opt=y dt= nt= isz= irz=isz jr=1 jm=20 nr= err=0.00001 alpha=-0.7 nbt=44 nbb=44 nbl=44 nbr=44 ct=0.01 cb=0.01 cl=0.01 cr=0.01 ax=2.0 az=2.0 factor=2.0/3.0 sht=0 tskip=0''','''''')
rsf.doc.progs['sfffdrtm']=sfffdrtm

sfffdrtms = rsf.doc.rsfprog('sfffdrtms','user/songxl/Mffdrtms.c','''2-D FFD isotropic RTM: MPI + OMP''')
sfffdrtms.par('geo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdrtms.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdrtms.par('source',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfffdrtms.par('opt',rsf.doc.rsfpar('bool','y','','''optimal padding'''))
sfffdrtms.par('dt',rsf.doc.rsfpar('float','','','''time step size'''))
sfffdrtms.par('nt',rsf.doc.rsfpar('int','','','''total time length'''))
sfffdrtms.par('isz',rsf.doc.rsfpar('int','','','''source depth'''))
sfffdrtms.par('irz',rsf.doc.rsfpar('int','isz','','''receiver depth'''))
sfffdrtms.par('jr',rsf.doc.rsfpar('int','1','','''receiver sampling'''))
sfffdrtms.par('jm',rsf.doc.rsfpar('int','20','','''snap sampling'''))
sfffdrtms.par('nr',rsf.doc.rsfpar('int','','','''streamer total length'''))
sfffdrtms.par('nbt',rsf.doc.rsfpar('int','44','','''boundary nodes'''))
sfffdrtms.par('nbb',rsf.doc.rsfpar('int','44','','''boundary nodes'''))
sfffdrtms.par('nbl',rsf.doc.rsfpar('int','44','','''boundary nodes'''))
sfffdrtms.par('nbr',rsf.doc.rsfpar('int','44','','''boundary nodes'''))
sfffdrtms.par('ct',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffdrtms.par('cb',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffdrtms.par('cl',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffdrtms.par('cr',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfffdrtms.par('sht',rsf.doc.rsfpar('int','0','','''Time shift parameter'''))
sfffdrtms.par('tskip',rsf.doc.rsfpar('int','0','','''Time shift parameter'''))
sfffdrtms.par('left',rsf.doc.rsfpar('int','2400','','''left'''))
sfffdrtms.par('right',rsf.doc.rsfpar('int','800','','''right'''))
sfffdrtms.version('2.1-git')
sfffdrtms.synopsis('''sfffdrtms geo=geo.rsf vel=vel.rsf source=source.rsf opt=y dt= nt= isz= irz=isz jr=1 jm=20 nr= nbt=44 nbb=44 nbl=44 nbr=44 ct=0.01 cb=0.01 cl=0.01 cr=0.01 sht=0 tskip=0 left=2400 right=800''','''''')
rsf.doc.progs['sfffdrtms']=sfffdrtms

sfmpiffdrtmto = rsf.doc.rsfprog('sfmpiffdrtmto','user/songxl/Mmpiffdrtmto.c','''2-D FFD RTM: MPI + OMP''')
sfmpiffdrtmto.par('geo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiffdrtmto.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiffdrtmto.par('source',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiffdrtmto.par('opt',rsf.doc.rsfpar('bool','y','',''''''))
sfmpiffdrtmto.par('topo',rsf.doc.rsfpar('bool','y','','''if y, determine optimal size for efficiency '''))
sfmpiffdrtmto.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfmpiffdrtmto.par('nt',rsf.doc.rsfpar('int','','','''if (!sf_getint("r0",&r0)) r0=0; '''))
sfmpiffdrtmto.par('jr',rsf.doc.rsfpar('int','1','',''''''))
sfmpiffdrtmto.par('jm',rsf.doc.rsfpar('int','20','',''''''))
sfmpiffdrtmto.par('nr',rsf.doc.rsfpar('int','','','''streamer total length'''))
sfmpiffdrtmto.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfmpiffdrtmto.par('irz',rsf.doc.rsfpar('int','isz','',''''''))
sfmpiffdrtmto.par('err',rsf.doc.rsfpar('float','0.00001','',''''''))
sfmpiffdrtmto.par('alpha',rsf.doc.rsfpar('float','-0.7','',''''''))
sfmpiffdrtmto.par('nbt',rsf.doc.rsfpar('int','44','',''''''))
sfmpiffdrtmto.par('nbb',rsf.doc.rsfpar('int','44','',''''''))
sfmpiffdrtmto.par('nbl',rsf.doc.rsfpar('int','44','',''''''))
sfmpiffdrtmto.par('nbr',rsf.doc.rsfpar('int','44','',''''''))
sfmpiffdrtmto.par('ct',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfmpiffdrtmto.par('cb',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfmpiffdrtmto.par('cl',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfmpiffdrtmto.par('cr',rsf.doc.rsfpar('float','0.01','','''decaying parameter'''))
sfmpiffdrtmto.par('ax',rsf.doc.rsfpar('float','2.0','','''suppress HF parameter'''))
sfmpiffdrtmto.par('az',rsf.doc.rsfpar('float','2.0','','''suppress HF parameter'''))
sfmpiffdrtmto.par('factor',rsf.doc.rsfpar('float','2.0/3.0','','''suppress HF parameter'''))
sfmpiffdrtmto.par('sht',rsf.doc.rsfpar('int','0','','''Time shift parameter'''))
sfmpiffdrtmto.par('tskip',rsf.doc.rsfpar('int','0','','''Time shift parameter'''))
sfmpiffdrtmto.par('left',rsf.doc.rsfpar('int','2400','',''''''))
sfmpiffdrtmto.par('right',rsf.doc.rsfpar('int','800','',''''''))
sfmpiffdrtmto.version('2.1-git')
sfmpiffdrtmto.synopsis('''sfmpiffdrtmto geo=geo.rsf vel=vel.rsf source=source.rsf opt=y topo=y dt= nt= jr=1 jm=20 nr= isz= irz=isz err=0.00001 alpha=-0.7 nbt=44 nbb=44 nbl=44 nbr=44 ct=0.01 cb=0.01 cl=0.01 cr=0.01 ax=2.0 az=2.0 factor=2.0/3.0 sht=0 tskip=0 left=2400 right=800''','''''')
rsf.doc.progs['sfmpiffdrtmto']=sfmpiffdrtmto

sfttirtmsa = rsf.doc.rsfprog('sfttirtmsa','user/songxl/Mttirtmsa.c','''2-D TTI FFD RTM: MPI + OMP''')
sfttirtmsa.par('geo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfttirtmsa.par('velx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfttirtmsa.par('velz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfttirtmsa.par('yita',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfttirtmsa.par('source',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfttirtmsa.par('seta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfttirtmsa.par('opt',rsf.doc.rsfpar('bool','y','','''optimal padding'''))
sfttirtmsa.par('de',rsf.doc.rsfpar('bool','y','','''in angle'''))
sfttirtmsa.par('dt',rsf.doc.rsfpar('float','','','''time step size'''))
sfttirtmsa.par('nt',rsf.doc.rsfpar('int','','','''total time length'''))
sfttirtmsa.par('isz',rsf.doc.rsfpar('int','','','''source depth'''))
sfttirtmsa.par('irz',rsf.doc.rsfpar('int','isz','','''receiver depth'''))
sfttirtmsa.par('jr',rsf.doc.rsfpar('int','1','','''receiver sampling'''))
sfttirtmsa.par('jm',rsf.doc.rsfpar('int','20','','''snap sampling'''))
sfttirtmsa.par('tskip',rsf.doc.rsfpar('int','1000','','''time skipped'''))
sfttirtmsa.par('sht',rsf.doc.rsfpar('int','0','','''time shift'''))
sfttirtmsa.par('nr',rsf.doc.rsfpar('int','','','''streamer total length'''))
sfttirtmsa.par('err',rsf.doc.rsfpar('float','0.00001','','''error control'''))
sfttirtmsa.par('nbt',rsf.doc.rsfpar('int','102','','''boundary nodes'''))
sfttirtmsa.par('nbb',rsf.doc.rsfpar('int','102','','''boundary nodes'''))
sfttirtmsa.par('nbl',rsf.doc.rsfpar('int','128','','''boundary nodes'''))
sfttirtmsa.par('nbr',rsf.doc.rsfpar('int','127','','''boundary nodes'''))
sfttirtmsa.par('ct',rsf.doc.rsfpar('float','0.02','','''decaying parameter'''))
sfttirtmsa.par('cb',rsf.doc.rsfpar('float','0.02','','''decaying parameter'''))
sfttirtmsa.par('cl',rsf.doc.rsfpar('float','0.02','','''decaying parameter'''))
sfttirtmsa.par('cr',rsf.doc.rsfpar('float','0.02','','''decaying parameter'''))
sfttirtmsa.par('ratio',rsf.doc.rsfpar('float','2.0','','''v0/vmax'''))
sfttirtmsa.par('left',rsf.doc.rsfpar('int','nr*3/2*jr','','''left'''))
sfttirtmsa.par('right',rsf.doc.rsfpar('int','nr/2*jr','','''right'''))
sfttirtmsa.version('2.1-git')
sfttirtmsa.synopsis('''sfttirtmsa geo=geo.rsf velx=velx.rsf velz=velz.rsf yita=yita.rsf source=source.rsf seta=seta.rsf opt=y de=y dt= nt= isz= irz=isz jr=1 jm=20 tskip=1000 sht=0 nr= err=0.00001 nbt=102 nbb=102 nbl=128 nbr=127 ct=0.02 cb=0.02 cl=0.02 cr=0.02 ratio=2.0 left=nr*3/2*jr right=nr/2*jr''','''''')
rsf.doc.progs['sfttirtmsa']=sfttirtmsa

sfortholr = rsf.doc.rsfprog('sfortholr','user/songxl/Mortholr.cc','''Lowrank decomposition for 3-D orthorhombic wave propagation. ''')
sfortholr.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfortholr.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfortholr.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfortholr.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfortholr.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfortholr.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfortholr.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfortholr.version('2.1-git')
sfortholr.synopsis('''sfortholr < velz.rsf fft=fft.rsf > middle.rsf left=left.rsf right=right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfortholr']=sfortholr

sfortlr = rsf.doc.rsfprog('sfortlr','user/songxl/Mortlr.cc','''Lowrank decomposition for 3-D orthorhombic wave propagation. ''')
sfortlr.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfortlr.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfortlr.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfortlr.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfortlr.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfortlr.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfortlr.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfortlr.version('2.1-git')
sfortlr.synopsis('''sfortlr < velz.rsf fft=fft.rsf > middle.rsf left=left.rsf right=right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfortlr']=sfortlr

sforthollr = rsf.doc.rsfprog('sforthollr','user/songxl/Morthollr.cc','''Lowrank decomposition for 3-D orthorhombic wave propagation with linearization. ''')
sforthollr.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sforthollr.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sforthollr.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sforthollr.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sforthollr.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sforthollr.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sforthollr.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sforthollr.version('2.1-git')
sforthollr.synopsis('''sforthollr < velz.rsf fft=fft.rsf > middle.rsf left=left.rsf right=right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sforthollr']=sforthollr

sfortllr = rsf.doc.rsfprog('sfortllr','user/songxl/Mortllr.cc','''Lowrank decomposition for 3-D orthorhombic wave propagation with linearization. ''')
sfortllr.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfortllr.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfortllr.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfortllr.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfortllr.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfortllr.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfortllr.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfortllr.version('2.1-git')
sfortllr.synopsis('''sfortllr < velz.rsf fft=fft.rsf > middle.rsf left=left.rsf right=right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfortllr']=sfortllr

sflfdc1 = rsf.doc.rsfprog('sflfdc1','user/songxl/Mlfdc1.cc','''1D 10th-order Lowrank FD coefficient''')
sflfdc1.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sflfdc1.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sflfdc1.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sflfdc1.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sflfdc1.version('2.1-git')
sflfdc1.synopsis('''sflfdc1 < velf.rsf > outm.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sflfdc1']=sflfdc1

sflfdc2_7 = rsf.doc.rsfprog('sflfdc2_7','user/songxl/Mlfdc2_7.cc','''2D 10th-order Lowrank FD coefficient''')
sflfdc2_7.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sflfdc2_7.par('eps',rsf.doc.rsfpar('','1.e-6','','''tolerance'''))
sflfdc2_7.par('npk',rsf.doc.rsfpar('','50','','''maximum rank'''))
sflfdc2_7.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sflfdc2_7.par('size',rsf.doc.rsfpar('','6','','''stencil length'''))
sflfdc2_7.version('2.1-git')
sflfdc2_7.synopsis('''sflfdc2_7 < velf.rsf > outm.rsf seed=time(NULL eps=1.e-6 npk=50 dt= size=6''','''''')
rsf.doc.progs['sflfdc2_7']=sflfdc2_7

sflfdc2_25 = rsf.doc.rsfprog('sflfdc2_25','user/songxl/Mlfdc2_25.cc','''2D 10th-order Lowrank FD coefficient''')
sflfdc2_25.par('s1',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflfdc2_25.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sflfdc2_25.par('eps',rsf.doc.rsfpar('','1.e-6','','''tolerance'''))
sflfdc2_25.par('npk',rsf.doc.rsfpar('','50','','''maximum rank'''))
sflfdc2_25.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sflfdc2_25.par('size',rsf.doc.rsfpar('','9','','''stencil length'''))
sflfdc2_25.version('2.1-git')
sflfdc2_25.synopsis('''sflfdc2_25 < velf.rsf > outm.rsf s1=s1f.rsf seed=time(NULL eps=1.e-6 npk=50 dt= size=9''','''''')
rsf.doc.progs['sflfdc2_25']=sflfdc2_25

sflfdanc2_25 = rsf.doc.rsfprog('sflfdanc2_25','user/songxl/Mlfdanc2_25.cc','''2D high-order TTI Lowrank FD coefficient''')
sflfdanc2_25.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sflfdanc2_25.par('eps',rsf.doc.rsfpar('','1.e-6','','''tolerance'''))
sflfdanc2_25.par('npk',rsf.doc.rsfpar('','50','','''maximum rank'''))
sflfdanc2_25.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sflfdanc2_25.par('size',rsf.doc.rsfpar('','17','','''stencil length'''))
sflfdanc2_25.par('de',rsf.doc.rsfpar('','1','','''stencil length'''))
sflfdanc2_25.version('2.1-git')
sflfdanc2_25.synopsis('''sflfdanc2_25 < velz.rsf > outm.rsf seed=time(NULL eps=1.e-6 npk=50 dt= size=17 de=1''','''''')
rsf.doc.progs['sflfdanc2_25']=sflfdanc2_25

sflffdan = rsf.doc.rsfprog('sflffdan','user/songxl/Mlffdan.cc','''2D high-order TTI Lowrank FFD coefficient''')
sflffdan.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sflffdan.par('eps',rsf.doc.rsfpar('','1.e-6','','''tolerance'''))
sflffdan.par('npk',rsf.doc.rsfpar('','50','','''maximum rank'''))
sflffdan.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sflffdan.par('pr',rsf.doc.rsfpar('','0.25','','''time step'''))
sflffdan.par('size',rsf.doc.rsfpar('','9','','''stencil length'''))
sflffdan.par('de',rsf.doc.rsfpar('','1','','''stencil length'''))
sflffdan.version('2.1-git')
sflffdan.synopsis('''sflffdan < velz.rsf > outm.rsf seed=time(NULL eps=1.e-6 npk=50 dt= pr=0.25 size=9 de=1''','''''')
rsf.doc.progs['sflffdan']=sflffdan

sflfdp1 = rsf.doc.rsfprog('sflfdp1','user/songxl/Mlfdp1.cc','''1D 10th-order Lowrank FD coefficient''')
sflfdp1.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sflfdp1.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sflfdp1.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sflfdp1.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sflfdp1.par('size',rsf.doc.rsfpar('','6','','''stencil length'''))
sflfdp1.version('2.1-git')
sflfdp1.synopsis('''sflfdp1 < velf.rsf > outm.rsf seed=time(NULL eps=1.e-4 npk=20 dt= size=6''','''''')
rsf.doc.progs['sflfdp1']=sflfdp1

sflfdp2 = rsf.doc.rsfprog('sflfdp2','user/songxl/Mlfdp2.cc','''2D 10th-order Lowrank FD coefficient''')
sflfdp2.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sflfdp2.par('eps',rsf.doc.rsfpar('','1.e-6','','''tolerance'''))
sflfdp2.par('npk',rsf.doc.rsfpar('','50','','''maximum rank'''))
sflfdp2.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sflfdp2.par('size',rsf.doc.rsfpar('','9','','''stencil length'''))
sflfdp2.version('2.1-git')
sflfdp2.synopsis('''sflfdp2 < velf.rsf > outm.rsf seed=time(NULL eps=1.e-6 npk=50 dt= size=9''','''''')
rsf.doc.progs['sflfdp2']=sflfdp2

sformatrix = rsf.doc.rsfprog('sformatrix','user/songxl/Mormatrix.cc','''Lowrank decomposition for 3-D orthorhombic wave propagation. ''')
sformatrix.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sformatrix.par('app',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sformatrix.par('real',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sformatrix.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sformatrix.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sformatrix.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sformatrix.par('xx1',rsf.doc.rsfpar('','','','''x location'''))
sformatrix.par('xx2',rsf.doc.rsfpar('','','','''x location'''))
sformatrix.par('xx3',rsf.doc.rsfpar('','','','''x location'''))
sformatrix.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sformatrix.version('2.1-git')
sformatrix.synopsis('''sformatrix < velz.rsf fft=fft.rsf > middle.rsf app=app.rsf real=real.rsf seed=time(NULL eps=1.e-4 npk=20 xx1= xx2= xx3= dt=''','''''')
rsf.doc.progs['sformatrix']=sformatrix

