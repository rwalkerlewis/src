import rsf.doc

sfpwefd2D = rsf.doc.rsfprog('sfpwefd2D','user/rlwalker/Mpwefd2D.c','''Short description line''')
sfpwefd2D.par('sro',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwefd2D.par('fro',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwefd2D.par('phi',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwefd2D.par('kdr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwefd2D.par('kfl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwefd2D.par('ksg',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwefd2D.par('prm',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwefd2D.par('fvs',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwefd2D.par('shm',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwefd2D.par('tor',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwefd2D.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwefd2D.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpwefd2D.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpwefd2D.par('srctype',rsf.doc.rsfpar('int','0','','''source type, see comments '''))
sfpwefd2D.par('ani',rsf.doc.rsfpar('int','-1','','''Anisotropy type, see comments '''))
sfpwefd2D.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity flag '''))
sfpwefd2D.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sfpwefd2D.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sfpwefd2D.par('dabc',rsf.doc.rsfpar('bool','y','','''use sponge absorbing BC '''))
sfpwefd2D.par('abcone',rsf.doc.rsfpar('bool','n','','''use sharp brake at end of boundary layer '''))
sfpwefd2D.par('debug',rsf.doc.rsfpar('bool','y','','''print debugging info '''))
sfpwefd2D.par('cfl',rsf.doc.rsfpar('bool','y','','''use CFL check, will cause program to fail if not satisfied '''))
sfpwefd2D.par('opot',rsf.doc.rsfpar('bool','n','','''output potentials '''))
sfpwefd2D.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfpwefd2D.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfpwefd2D.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfpwefd2D.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfpwefd2D.par('nbell',rsf.doc.rsfpar('int','1','','''bell size '''))
sfpwefd2D.par('jdata',rsf.doc.rsfpar('int','1','','''Absorbing Boundary '''))
sfpwefd2D.par('nb',rsf.doc.rsfpar('int','100','','''padding size for absorbing boundary '''))
sfpwefd2D.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfpwefd2D.par('fmax',rsf.doc.rsfpar('float','','',''''''))
sfpwefd2D.version('2.1-git')
sfpwefd2D.synopsis('''sfpwefd2D < Fwav.rsf sro=Fsro.rsf fro=Ffro.rsf phi=Fphi.rsf kdr=Fkdr.rsf kfl=Fkfl.rsf ksg=Fksg.rsf prm=Fprm.rsf fvs=Ffvs.rsf shm=Fshm.rsf tor=Ftor.rsf sou=Fsou.rsf rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf srctype=0 ani=-1 verb=y snap=n free=n dabc=y abcone=n debug=y cfl=y opot=n nqz=sf_n(az) nqx=sf_n(ax) oqz=sf_o(az) oqx=sf_o(ax) nbell=1 jdata=1 nb=100 jsnap=nt fmax=''','''Comments here blablabla lorem ipsum dolores sit amet...

You can use several paragraphs for comments, no problem.''')
rsf.doc.progs['sfpwefd2D']=sfpwefd2D

