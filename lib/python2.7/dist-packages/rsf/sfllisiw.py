import rsf.doc

sfkirmig = rsf.doc.rsfprog('sfkirmig','user/llisiw/Mkirmig.c','''2-D Prestack Kirchhoff depth migration. ''')
sfkirmig.par('table',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfkirmig.par('deriv',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfkirmig.par('adj',rsf.doc.rsfpar('bool','y','','''y for migration, n for modeling '''))
sfkirmig.par('cmp',rsf.doc.rsfpar('bool','y','','''y for CMP gather, n for shot gather '''))
sfkirmig.par('nt',rsf.doc.rsfpar('int','','','''time samples '''))
sfkirmig.par('nh',rsf.doc.rsfpar('int','1','','''offset/receiver samples '''))
sfkirmig.par('ns',rsf.doc.rsfpar('int','1','','''shot samples '''))
sfkirmig.par('t0',rsf.doc.rsfpar('float','0.0','','''time origin '''))
sfkirmig.par('dt',rsf.doc.rsfpar('float','','','''time sampling '''))
sfkirmig.par('h0',rsf.doc.rsfpar('float','0.0','','''offset/receiver origin '''))
sfkirmig.par('dh',rsf.doc.rsfpar('float','','','''offset/receiver sampling '''))
sfkirmig.par('s0',rsf.doc.rsfpar('float','0.0','','''shot origin '''))
sfkirmig.par('ds',rsf.doc.rsfpar('float','','','''shot sampling '''))
sfkirmig.par('tau',rsf.doc.rsfpar('float','0.','','''static time-shift (in second) '''))
sfkirmig.par('aperture',rsf.doc.rsfpar('float','90.','','''migration aperture (in degree) '''))
sfkirmig.par('antialias',rsf.doc.rsfpar('float','1.0','','''antialiasing '''))
sfkirmig.par('cig',rsf.doc.rsfpar('bool','n','','''y - output common offset/receiver gathers '''))
sfkirmig.par('type',rsf.doc.rsfpar('string ',desc='''type of interpolation (default Hermit) '''))
sfkirmig.version('2.1-git')
sfkirmig.synopsis('''sfkirmig < dat.rsf > mig.rsf table=tbl.rsf deriv=der.rsf adj=y cmp=y nt= nh=1 ns=1 t0=0.0 dt= h0=0.0 dh= s0=0.0 ds= tau=0. aperture=90. antialias=1.0 cig=n type=''','''''')
rsf.doc.progs['sfkirmig']=sfkirmig

sfkirmig0 = rsf.doc.rsfprog('sfkirmig0','user/llisiw/Mkirmig0.c','''2-D Post-stack Kirchhoff depth migration. ''')
sfkirmig0.par('table',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfkirmig0.par('deriv',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfkirmig0.par('adj',rsf.doc.rsfpar('bool','y','','''y for migration, n for modeling '''))
sfkirmig0.par('nt',rsf.doc.rsfpar('int','','','''time samples '''))
sfkirmig0.par('ns',rsf.doc.rsfpar('int','','','''midpoint samples '''))
sfkirmig0.par('t0',rsf.doc.rsfpar('float','0.0','','''time origin '''))
sfkirmig0.par('dt',rsf.doc.rsfpar('float','','','''time sampling '''))
sfkirmig0.par('s0',rsf.doc.rsfpar('float','0.0','','''midpoint origin '''))
sfkirmig0.par('ds',rsf.doc.rsfpar('float','','','''midpoint sampling '''))
sfkirmig0.par('aperture',rsf.doc.rsfpar('float','90.','','''migration aperture (in degree) '''))
sfkirmig0.par('antialias',rsf.doc.rsfpar('float','1.0','','''antialiasing '''))
sfkirmig0.par('type',rsf.doc.rsfpar('string ',desc='''type of interpolation (default Hermit) '''))
sfkirmig0.version('2.1-git')
sfkirmig0.synopsis('''sfkirmig0 < dat.rsf > mig.rsf table=tbl.rsf deriv=der.rsf adj=y nt= ns= t0=0.0 dt= s0=0.0 ds= aperture=90. antialias=1.0 type=''','''''')
rsf.doc.progs['sfkirmig0']=sfkirmig0

sfdrayinte = rsf.doc.rsfprog('sfdrayinte','user/llisiw/Mdrayinte.c','''2D Dynamic Ray Tracing ''')
sfdrayinte.par('deriv',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdrayinte.par('t0',rsf.doc.rsfpar('float','0.','','''time origin at source '''))
sfdrayinte.par('shift',rsf.doc.rsfpar('float','1.','','''complex source shift '''))
sfdrayinte.par('source',rsf.doc.rsfpar('float','o[1]+(n[1]-1)/2*d[1]','','''source location '''))
sfdrayinte.par('deriv',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfdrayinte.version('2.1-git')
sfdrayinte.synopsis('''sfdrayinte < in.rsf > out.rsf deriv=deriv.rsf t0=0. shift=1. source=o[1]+(n[1]-1)/2*d[1]''','''''')
rsf.doc.progs['sfdrayinte']=sfdrayinte

sftestanal = rsf.doc.rsfprog('sftestanal','user/llisiw/Mtestanal.c','''Test Analytical for constant velocity background ''')
sftestanal.par('source1',rsf.doc.rsfpar('float','o1','',''''''))
sftestanal.par('source2',rsf.doc.rsfpar('float','o2','','''real source point '''))
sftestanal.par('s1',rsf.doc.rsfpar('float','0.','',''''''))
sftestanal.par('s2',rsf.doc.rsfpar('float','0.','',''''''))
sftestanal.par('s3',rsf.doc.rsfpar('float','0.','','''imaginary source point '''))
sftestanal.par('v0',rsf.doc.rsfpar('float','1.','','''constant velocity background '''))
sftestanal.version('2.1-git')
sftestanal.synopsis('''sftestanal < in.rsf > out.rsf source1=o1 source2=o2 s1=0. s2=0. s3=0. v0=1.''','''''')
rsf.doc.progs['sftestanal']=sftestanal

sfgradient = rsf.doc.rsfprog('sfgradient','user/llisiw/Mgradient.c','''Linearized complex eikonal equation ''')
sfgradient.par('s1',rsf.doc.rsfpar('float','o[0]','',''''''))
sfgradient.par('s2',rsf.doc.rsfpar('float','o[1]','',''''''))
sfgradient.par('s3',rsf.doc.rsfpar('float','o[2]','',''''''))
sfgradient.par('v0',rsf.doc.rsfpar('float','1.','',''''''))
sfgradient.par('b',rsf.doc.rsfpar('float','0.','',''''''))
sfgradient.par('s',rsf.doc.rsfpar('float','0.','',''''''))
sfgradient.version('2.1-git')
sfgradient.synopsis('''sfgradient < vel.rsf > time.rsf s1=o[0] s2=o[1] s3=o[2] v0=1. b=0. s=0.''','''''')
rsf.doc.progs['sfgradient']=sfgradient

sfcconst = rsf.doc.rsfprog('sfcconst','user/llisiw/Mcconst.c','''Gaussian beam and exact complex eikonal for constant velocity medium ''')
sfcconst.par('source',rsf.doc.rsfpar('float','o2','','''real source point (on surface) '''))
sfcconst.par('s',rsf.doc.rsfpar('float','0.','','''complex source shift '''))
sfcconst.par('v0',rsf.doc.rsfpar('float','1.','','''constant velocity background '''))
sfcconst.par('angle',rsf.doc.rsfpar('float','45.','','''rotation angle (counter-clock wise with respect to vertically downward) '''))
sfcconst.par('what',rsf.doc.rsfpar('string ',desc='''what to compute (default exact solution) '''))
sfcconst.version('2.1-git')
sfcconst.synopsis('''sfcconst < in.rsf > out.rsf source=o2 s=0. v0=1. angle=45. what=''','''''')
rsf.doc.progs['sfcconst']=sfcconst

sfcgconst = rsf.doc.rsfprog('sfcgconst','user/llisiw/Mcgconst.c','''Test Beam for constant velocity gradient ''')
sfcgconst.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcgconst.par('source',rsf.doc.rsfpar('float','o2','','''real source point '''))
sfcgconst.par('w',rsf.doc.rsfpar('float','0.','','''beam width '''))
sfcgconst.par('v0',rsf.doc.rsfpar('float','1.','','''surface velocity '''))
sfcgconst.par('b',rsf.doc.rsfpar('float','0.','','''velocity gradient '''))
sfcgconst.par('p',rsf.doc.rsfpar('float','1/v0','',''''''))
sfcgconst.version('2.1-git')
sfcgconst.synopsis('''sfcgconst < in.rsf > out.rsf mask=mask.rsf source=o2 w=0. v0=1. b=0. p=1/v0''','''''')
rsf.doc.progs['sfcgconst']=sfcgconst

sffatomo = rsf.doc.rsfprog('sffatomo','user/llisiw/Mfatomo.c','''First-arrival Traveltime Tomography ''')
sffatomo.par('time',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffatomo.par('shot',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffatomo.par('receiver',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffatomo.par('record',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffatomo.par('topo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffatomo.par('gradient',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffatomo.par('misnorm',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffatomo.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag (for what=linear) '''))
sffatomo.par('velocity',rsf.doc.rsfpar('bool','y','','''if y, the input is velocity; n, slowness squared '''))
sffatomo.par('l1norm',rsf.doc.rsfpar('bool','n','','''norm for minimization (default L2 norm) '''))
sffatomo.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sffatomo.par('order',rsf.doc.rsfpar('int','2','','''fast marching accuracy order '''))
sffatomo.par('niter',rsf.doc.rsfpar('int','10','','''number of slowness inversion iterations '''))
sffatomo.par('stiter',rsf.doc.rsfpar('int','200','','''number of step iterations '''))
sffatomo.par('eps',rsf.doc.rsfpar('float','0.','','''regularization parameter '''))
sffatomo.par('perc',rsf.doc.rsfpar('float','90.','',''''''))
sffatomo.par('nfreq',rsf.doc.rsfpar('int','1','','''l1-norm weighting nfreq '''))
sffatomo.par('nmem',rsf.doc.rsfpar('int','1','','''l1-norm weighting nmem '''))
sffatomo.par('what',rsf.doc.rsfpar('string ',desc='''what to compute (default tomography) '''))
sffatomo.par('time',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sffatomo.par('shot',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sffatomo.par('receiver',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sffatomo.par('shot',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sffatomo.par('receiver',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sffatomo.par('record',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sffatomo.par('topo',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sffatomo.par('gradient',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sffatomo.par('misnorm',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sffatomo.version('2.1-git')
sffatomo.synopsis('''sffatomo < sinp.rsf > sout.rsf time=time.rsf shot=shot.rsf receiver=rece.rsf record=reco.rsf topo=topo.rsf gradient=grad.rsf misnorm=norm.rsf adj=n velocity=y l1norm=n verb=n order=2 niter=10 stiter=200 eps=0. perc=90. nfreq=1 nmem=1 what=''','''''')
rsf.doc.progs['sffatomo']=sffatomo

sffatomoomp = rsf.doc.rsfprog('sffatomoomp','user/llisiw/Mfatomoomp.c','''First-arrival Traveltime Tomography (OMP) ''')
sffatomoomp.par('shot',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffatomoomp.par('recv',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffatomoomp.par('reco',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffatomoomp.par('topo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffatomoomp.par('prec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffatomoomp.par('grad',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffatomoomp.par('rayd',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffatomoomp.par('time',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffatomoomp.par('misnorm',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffatomoomp.par('velocity',rsf.doc.rsfpar('bool','y','','''if y, the input is velocity; n, slowness squared '''))
sffatomoomp.par('shape',rsf.doc.rsfpar('bool','n','','''regularization (default Tikhnov) '''))
sffatomoomp.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sffatomoomp.par('order',rsf.doc.rsfpar('int','2','','''fast marching accuracy order '''))
sffatomoomp.par('seg',rsf.doc.rsfpar('int','3','','''maximum number of segments of topography '''))
sffatomoomp.par('niter',rsf.doc.rsfpar('int','1','','''number of slowness inversion iterations '''))
sffatomoomp.par('stiter',rsf.doc.rsfpar('int','100','','''number of inner CG iterations (for both Ticknov and Shaping) '''))
sffatomoomp.par('nstep',rsf.doc.rsfpar('int','10','','''number of linesearch '''))
sffatomoomp.par('eps',rsf.doc.rsfpar('float','0.','','''regularization parameter (for both Ticknov and Shaping) '''))
sffatomoomp.par('weight',rsf.doc.rsfpar('bool','n','','''data weighting '''))
sffatomoomp.par('pow',rsf.doc.rsfpar('float','2.','','''power raised for data weighting '''))
sffatomoomp.par('tol',rsf.doc.rsfpar('float','1.e-6','','''tolerance for shaping regularization '''))
sffatomoomp.par('rect#',rsf.doc.rsfpar('int','(1,1,...)','','''smoothing radius on #-th axis '''))
sffatomoomp.par('what',rsf.doc.rsfpar('string ',desc='''what to compute (default tomography) '''))
sffatomoomp.par('shot',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sffatomoomp.par('recv',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sffatomoomp.par('reco',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sffatomoomp.par('topo',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sffatomoomp.par('prec',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sffatomoomp.par('grad',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sffatomoomp.par('rayd',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sffatomoomp.par('time',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sffatomoomp.par('misnorm',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sffatomoomp.version('2.1-git')
sffatomoomp.synopsis('''sffatomoomp < sinp.rsf > sout.rsf shot=shot.rsf recv=recv.rsf reco=reco.rsf topo=topo.rsf prec=prec.rsf grad=grad.rsf rayd=rayd.rsf time=time.rsf misnorm=norm.rsf velocity=y shape=n verb=n order=2 seg=3 niter=1 stiter=100 nstep=10 eps=0. weight=n pow=2. tol=1.e-6 rect#=(1,1,...) what=''','''''')
rsf.doc.progs['sffatomoomp']=sffatomoomp

sfmkrcv = rsf.doc.rsfprog('sfmkrcv','user/llisiw/Mmkrcv.c','''Make topography mask / receiver list / record list for first-arrival traveltime tomography ''')
sfmkrcv.par('reco',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmkrcv.par('shot',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmkrcv.par('topo',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmkrcv.par('time',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmkrcv.par('air',rsf.doc.rsfpar('float','0.5','','''air velocity for thresholding topography '''))
sfmkrcv.par('velocity',rsf.doc.rsfpar('bool','y','','''if y, the input is velocity; n, slowness squared '''))
sfmkrcv.par('order',rsf.doc.rsfpar('int','2','','''fast marching accuracy order '''))
sfmkrcv.par('fix',rsf.doc.rsfpar('bool','n','','''if y, fixed-spread; n, moving acquisition '''))
sfmkrcv.par('plane',rsf.doc.rsfpar('bool','n','','''if y, plane-wave source; n, point source '''))
sfmkrcv.par('offset1',rsf.doc.rsfpar('int','0','','''receiver offset inline '''))
sfmkrcv.par('offset2',rsf.doc.rsfpar('int','0','','''receiver offset crossline '''))
sfmkrcv.par('np',rsf.doc.rsfpar('int','1','','''ray-parameter number '''))
sfmkrcv.par('p0',rsf.doc.rsfpar('float','0.','','''ray-parameter start '''))
sfmkrcv.par('dp',rsf.doc.rsfpar('float','1.','','''ray-parameter increment '''))
sfmkrcv.par('shot',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfmkrcv.par('topo',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfmkrcv.par('time',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfmkrcv.version('2.1-git')
sfmkrcv.synopsis('''sfmkrcv < in.rsf > out.rsf reco=reco.rsf shot=shot.rsf topo=topo.rsf time=time.rsf air=0.5 velocity=y order=2 fix=n plane=n offset1=0 offset2=0 np=1 p0=0. dp=1.''','''''')
rsf.doc.progs['sfmkrcv']=sfmkrcv

sfcpxeikonal = rsf.doc.rsfprog('sfcpxeikonal','user/llisiw/Mcpxeikonal.c','''Iterative complex eikonal solver ''')
sfcpxeikonal.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcpxeikonal.par('witer',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('dwiter',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('dwsiter',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('rhsiter',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('upiter',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('operiter',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('matriter',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('matiiter',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('x0iter',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('liniter',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('titer',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('wtiter',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('gamiter',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('preciter',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('maskr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcpxeikonal.par('maski',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcpxeikonal.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcpxeikonal.par('wght',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcpxeikonal.par('cray',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcpxeikonal.par('velocity',rsf.doc.rsfpar('bool','y','','''if y, the input is velocity; n, slowness squared '''))
sfcpxeikonal.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfcpxeikonal.par('niter',rsf.doc.rsfpar('int','1','','''number of iterations '''))
sfcpxeikonal.par('cgiter',rsf.doc.rsfpar('int','200','','''number of conjugate gradient iterations '''))
sfcpxeikonal.par('nstep',rsf.doc.rsfpar('int','10','','''number of linesearch '''))
sfcpxeikonal.par('tol',rsf.doc.rsfpar('float','1.e-8','','''thresholding for gradient scaling '''))
sfcpxeikonal.par('wupg',rsf.doc.rsfpar('bool','y','','''compute w for angle preconditioning '''))
sfcpxeikonal.par('term',rsf.doc.rsfpar('bool','n','','''early termination if line-search failure '''))
sfcpxeikonal.par('smooth',rsf.doc.rsfpar('bool','n','','''smooth update after conjugate-gradient '''))
sfcpxeikonal.par('repeat',rsf.doc.rsfpar('int','1','','''number of smoothings '''))
sfcpxeikonal.par('reg',rsf.doc.rsfpar('bool','n','','''regularization (Ticknov) '''))
sfcpxeikonal.par('eps',rsf.doc.rsfpar('float','1.e-2','','''stable division of preconditioner '''))
sfcpxeikonal.par('namda',rsf.doc.rsfpar('float','0.1','','''regularization parameter (Ticknov) '''))
sfcpxeikonal.par('alpha',rsf.doc.rsfpar('float','1.','','''exponential scaling of preconditioning '''))
sfcpxeikonal.par('pvar',rsf.doc.rsfpar('bool','y','','''allow preconditioning to change over iterations '''))
sfcpxeikonal.par('recom',rsf.doc.rsfpar('bool','y','','''recompute initial R according to w estimated from I '''))
sfcpxeikonal.par('rect#',rsf.doc.rsfpar('int','(1,1,...)','','''smoothing radius on #-th axis '''))
sfcpxeikonal.par('vel',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfcpxeikonal.par('symm',rsf.doc.rsfpar('string ',desc='''right-hand side evaluation L_R*I or L_I*R (default both) '''))
sfcpxeikonal.par('prec',rsf.doc.rsfpar('string ',desc='''rhs preconditioning (default angle) '''))
sfcpxeikonal.par('bound',rsf.doc.rsfpar('string ',desc='''avoid overshoot when update (default add) '''))
sfcpxeikonal.par('witer',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('dwiter',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('dwsiter',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('rhsiter',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('upiter',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('operiter',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('matriter',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('matiiter',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('x0iter',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('liniter',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('titer',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('wtiter',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('gamiter',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('preciter',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfcpxeikonal.par('maskr',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfcpxeikonal.par('maski',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfcpxeikonal.par('wght',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfcpxeikonal.par('cray',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfcpxeikonal.version('2.1-git')
sfcpxeikonal.synopsis('''sfcpxeikonal < in.rsf > out.rsf vel=vel.rsf witer=witer.rsf dwiter=dwiter.rsf dwsiter=dwsiter.rsf rhsiter=rhsiter.rsf upiter=upiter.rsf operiter=operiter.rsf matriter=matriter.rsf matiiter=matiiter.rsf x0iter=x0iter.rsf liniter=liniter.rsf titer=titer.rsf wtiter=wtiter.rsf gamiter=gamiter.rsf preciter=preciter.rsf maskr=maskr.rsf maski=maski.rsf ref=ref.rsf wght=wght.rsf cray=cray.rsf velocity=y verb=n niter=1 cgiter=200 nstep=10 tol=1.e-8 wupg=y term=n smooth=n repeat=1 reg=n eps=1.e-2 namda=0.1 alpha=1. pvar=y recom=y rect#=(1,1,...) symm= prec= bound=''','''''')
rsf.doc.progs['sfcpxeikonal']=sfcpxeikonal

sfdrays = rsf.doc.rsfprog('sfdrays','user/llisiw/Mdrays.c','''2D dynamic ray tracing by a Runge-Kutta integrator. ''')
sfdrays.par('shotfile',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdrays.par('anglefile',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdrays.par('rays',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfdrays.par('dmat',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfdrays.par('proj',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfdrays.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfdrays.par('vel',rsf.doc.rsfpar('bool','y','','''If y, input is velocity; if n, slowness '''))
sfdrays.par('order',rsf.doc.rsfpar('int','4','','''Interpolation order '''))
sfdrays.par('nt',rsf.doc.rsfpar('int','','','''Number of time steps '''))
sfdrays.par('dt',rsf.doc.rsfpar('float','','','''Sampling in time '''))
sfdrays.par('verb',rsf.doc.rsfpar('bool','y','','''Verbosity flag '''))
sfdrays.par('shift',rsf.doc.rsfpar('float','0.5','','''Complex source shift '''))
sfdrays.par('zshot',rsf.doc.rsfpar('float','0.','',''''''))
sfdrays.par('yshot',rsf.doc.rsfpar('float','o[1]+0.5*(n[1]-1)*d[1]','',''''''))
sfdrays.par('nr',rsf.doc.rsfpar('int','','','''number of angles (if no anglefile) '''))
sfdrays.par('a0',rsf.doc.rsfpar('float','0.','','''minimum angle (if no anglefile) '''))
sfdrays.par('amax',rsf.doc.rsfpar('float','360.','','''maximum angle (if no anglefile) '''))
sfdrays.par('shotfile',rsf.doc.rsfpar('string ',desc='''file with shot locations [zshot,yshot,nshot] (auxiliary input file name)'''))
sfdrays.par('anglefile',rsf.doc.rsfpar('string ',desc='''file with initial angles [nr,nshot] (auxiliary input file name)'''))
sfdrays.par('rays',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfdrays.par('dmat',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfdrays.par('proj',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfdrays.par('mask',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfdrays.version('2.1-git')
sfdrays.synopsis('''sfdrays < vel.rsf > gbeam.rsf shotfile=shots.rsf anglefile=angles.rsf rays=rays.rsf dmat=dmat.rsf proj=proj.rsf mask=mask.rsf vel=y order=4 nt= dt= verb=y shift=0.5 zshot=0. yshot=o[1]+0.5*(n[1]-1)*d[1] nr= a0=0. amax=360.''','''Angle is 90 deg along y-axis and 180 deg along z-axis, clockwise.
''')
rsf.doc.progs['sfdrays']=sfdrays

sfdsreiko = rsf.doc.rsfprog('sfdsreiko','user/llisiw/Mdsreiko.c','''Double square-root eikonal solver (2D) ''')
sfdsreiko.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdsreiko.par('flag',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfdsreiko.par('alpha',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfdsreiko.par('velocity',rsf.doc.rsfpar('bool','y','','''if y, the input is velocity; n, slowness squared '''))
sfdsreiko.par('thres',rsf.doc.rsfpar('float','5.e-5','','''threshold (percentage) '''))
sfdsreiko.par('tol',rsf.doc.rsfpar('float','1.e-3','','''tolerance for bisection root-search '''))
sfdsreiko.par('nloop',rsf.doc.rsfpar('int','10','','''number of bisection root-search '''))
sfdsreiko.par('causal',rsf.doc.rsfpar('bool','y','','''if y, neglect non-causal branches of DSR '''))
sfdsreiko.par('mask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfdsreiko.par('flag',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfdsreiko.par('alpha',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfdsreiko.version('2.1-git')
sfdsreiko.synopsis('''sfdsreiko < in.rsf > out.rsf mask=mask.rsf flag=flag.rsf alpha=alpha.rsf velocity=y thres=5.e-5 tol=1.e-3 nloop=10 causal=y''','''''')
rsf.doc.progs['sfdsreiko']=sfdsreiko

sfdsrtomo = rsf.doc.rsfprog('sfdsrtomo','user/llisiw/Mdsrtomo.c','''Prestack first-arrival traveltime tomography (DSR) ''')
sfdsrtomo.par('grad',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdsrtomo.par('time',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdsrtomo.par('flag',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdsrtomo.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdsrtomo.par('prec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdsrtomo.par('reco',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdsrtomo.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag (for what=linear) '''))
sfdsrtomo.par('velocity',rsf.doc.rsfpar('bool','y','','''if y, the input is velocity; n, slowness-squared '''))
sfdsrtomo.par('velocity',rsf.doc.rsfpar('bool','y','','''if y, the input is velocity; n, slowness-squared '''))
sfdsrtomo.par('shape',rsf.doc.rsfpar('bool','n','','''shaping regularization (default no) '''))
sfdsrtomo.par('scale',rsf.doc.rsfpar('bool','n','','''if y, scale gradient before line-search '''))
sfdsrtomo.par('scale0',rsf.doc.rsfpar('float','0.5','','''gradient scale max ratio (if scale=y) '''))
sfdsrtomo.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfdsrtomo.par('niter',rsf.doc.rsfpar('int','5','','''number of inversion iterations '''))
sfdsrtomo.par('cgiter',rsf.doc.rsfpar('int','10','','''number of conjugate-gradient iterations '''))
sfdsrtomo.par('liter',rsf.doc.rsfpar('int','5','','''number of line-search iterations '''))
sfdsrtomo.par('thres',rsf.doc.rsfpar('float','5.e-5','','''threshold (percentage) '''))
sfdsrtomo.par('tol',rsf.doc.rsfpar('float','1.e-3','','''tolerance for bisection root-search '''))
sfdsrtomo.par('nloop',rsf.doc.rsfpar('int','10','','''number of bisection root-search '''))
sfdsrtomo.par('eps',rsf.doc.rsfpar('float','0.','','''regularization parameter '''))
sfdsrtomo.par('causal',rsf.doc.rsfpar('bool','y','','''if y, neglect non-causal branches of DSR '''))
sfdsrtomo.par('rect#',rsf.doc.rsfpar('int','(1,1,...)','','''smoothing radius on #-th axis '''))
sfdsrtomo.par('what',rsf.doc.rsfpar('string ',desc='''what to compute (default tomography) '''))
sfdsrtomo.par('grad',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfdsrtomo.par('time',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfdsrtomo.par('flag',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfdsrtomo.par('mask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfdsrtomo.par('prec',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfdsrtomo.par('reco',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfdsrtomo.par('mask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfdsrtomo.par('prec',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfdsrtomo.par('grad',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfdsrtomo.version('2.1-git')
sfdsrtomo.synopsis('''sfdsrtomo < in.rsf > out.rsf grad=grad.rsf time=time.rsf flag=flag.rsf mask=mask.rsf prec=prec.rsf reco=reco.rsf adj=n velocity=y velocity=y shape=n scale=n scale0=0.5 verb=n niter=5 cgiter=10 liter=5 thres=5.e-5 tol=1.e-3 nloop=10 eps=0. causal=y rect#=(1,1,...) what=''','''''')
rsf.doc.progs['sfdsrtomo']=sfdsrtomo

sfeikods = rsf.doc.rsfprog('sfeikods','user/llisiw/Meikods.c','''Fast marching with source perturbation. ''')
sfeikods.par('shotfile',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfeikods.par('tdl1',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfeikods.par('tds1',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfeikods.par('tdl2',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfeikods.par('tds2',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfeikods.par('vel',rsf.doc.rsfpar('bool','y','','''if y, the input is velocity; n, slowness squared '''))
sfeikods.par('order',rsf.doc.rsfpar('int','2','[1,2]','''Accuracy order '''))
sfeikods.par('sweep',rsf.doc.rsfpar('bool','n','','''if y, use fast sweeping instead of fast marching '''))
sfeikods.par('br1',rsf.doc.rsfpar('float','d1','',''''''))
sfeikods.par('br2',rsf.doc.rsfpar('float','d2','',''''''))
sfeikods.par('br3',rsf.doc.rsfpar('float','d3','','''Constant-velocity box around the source (in physical dimensions) '''))
sfeikods.par('plane1',rsf.doc.rsfpar('bool','n','',''''''))
sfeikods.par('plane2',rsf.doc.rsfpar('bool','n','',''''''))
sfeikods.par('plane3',rsf.doc.rsfpar('bool','n','','''plane-wave source '''))
sfeikods.par('b1',rsf.doc.rsfpar('int','plane[2]? n1: (int) (br1/d1+0.5)','',''''''))
sfeikods.par('b2',rsf.doc.rsfpar('int','plane[1]? n2: (int) (br2/d2+0.5)','',''''''))
sfeikods.par('b3',rsf.doc.rsfpar('int','plane[0]? n3: (int) (br3/d3+0.5)','','''Constant-velocity box around the source (in samples) '''))
sfeikods.par('zshot',rsf.doc.rsfpar('float','0.','','''Shot location (used if no shotfile) '''))
sfeikods.par('yshot',rsf.doc.rsfpar('float','o2 + 0.5*(n2-1)*d2','',''''''))
sfeikods.par('xshot',rsf.doc.rsfpar('float','o3 + 0.5*(n3-1)*d3','',''''''))
sfeikods.par('l',rsf.doc.rsfpar('int','1','','''source perturbation direction '''))
sfeikods.par('shotfile',rsf.doc.rsfpar('string ',desc='''File with shot locations (n2=number of shots, n1=3) (auxiliary input file name)'''))
sfeikods.par('tdl1',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfeikods.par('tds1',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfeikods.par('tdl2',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfeikods.par('tds2',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfeikods.version('2.1-git Meikonal.c 7107 2011-04-10 02:04:14Z ivlad')
sfeikods.synopsis('''sfeikods < vel.rsf > time.rsf shotfile=shots.rsf tdl1=tdl1.rsf tds1=tds1.rsf tdl2=tdl2.rsf tds2=tds2.rsf vel=y order=2 sweep=n br1=d1 br2=d2 br3=d3 plane1=n plane2=n plane3=n b1=plane[2]? n1: (int) (br1/d1+0.5) b2=plane[1]? n2: (int) (br2/d2+0.5) b3=plane[0]? n3: (int) (br3/d3+0.5) zshot=0. yshot=o2 + 0.5*(n2-1)*d2 xshot=o3 + 0.5*(n3-1)*d3 l=1''','''''')
rsf.doc.progs['sfeikods']=sfeikods

sftinterp = rsf.doc.rsfprog('sftinterp','user/llisiw/Mtinterp.c','''Traveltime interpolation by cubic Hermite spline ''')
sftinterp.par('deriv',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftinterp.par('pattern',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftinterp.par('type',rsf.doc.rsfpar('string ',desc='''type of interpolation (default Hermit) '''))
sftinterp.par('deriv',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sftinterp.par('pattern',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sftinterp.version('2.1-git')
sftinterp.synopsis('''sftinterp < in.rsf > out.rsf deriv=deriv.rsf pattern=pattern.rsf type=''','''''')
rsf.doc.progs['sftinterp']=sftinterp

sftdconvert = rsf.doc.rsfprog('sftdconvert','user/llisiw/Mtdconvert.c','''Iterative time-to-depth velocity conversion ''')
sftdconvert.par('dix',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftdconvert.par('t0',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sftdconvert.par('x0',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sftdconvert.par('f0',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sftdconvert.par('grad',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sftdconvert.par('cost',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sftdconvert.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftdconvert.par('prec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftdconvert.par('velocity',rsf.doc.rsfpar('bool','y','','''y, input is velocity / n, slowness-squared '''))
sftdconvert.par('order',rsf.doc.rsfpar('int','1','','''fastmarch accuracy order '''))
sftdconvert.par('thres',rsf.doc.rsfpar('float','10.','','''thresholding for caustics '''))
sftdconvert.par('niter',rsf.doc.rsfpar('int','1','','''number of nonlinear updates '''))
sftdconvert.par('cgiter',rsf.doc.rsfpar('int','200','','''number of CG iterations '''))
sftdconvert.par('shape',rsf.doc.rsfpar('bool','n','','''regularization (default Tikhnov) '''))
sftdconvert.par('eps',rsf.doc.rsfpar('float','0.1','','''regularization parameter '''))
sftdconvert.par('nline',rsf.doc.rsfpar('int','0','','''maximum number of line search (default turned-off) '''))
sftdconvert.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sftdconvert.par('tol',rsf.doc.rsfpar('float','1.e-6','','''tolerance for shaping regularization '''))
sftdconvert.par('rect#',rsf.doc.rsfpar('int','(1,1,...)','','''smoothing radius on #-th axis '''))
sftdconvert.par('dix',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sftdconvert.par('t0',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sftdconvert.par('x0',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sftdconvert.par('f0',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sftdconvert.par('grad',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sftdconvert.par('cost',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sftdconvert.par('mask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sftdconvert.par('mval',rsf.doc.rsfpar('string ',desc=''''''))
sftdconvert.par('prec',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sftdconvert.version('2.1-git')
sftdconvert.synopsis('''sftdconvert < in.rsf > out.rsf dix=dix.rsf t0=t_0.rsf x0=x_0.rsf f0=f_0.rsf grad=grad.rsf cost=cost.rsf mask=mini.rsf prec=prec.rsf velocity=y order=1 thres=10. niter=1 cgiter=200 shape=n eps=0.1 nline=0 verb=n tol=1.e-6 rect#=(1,1,...) mval=''','''''')
rsf.doc.progs['sftdconvert']=sftdconvert

sfirays = rsf.doc.rsfprog('sfirays','user/llisiw/Mirays.c','''Fast marching for image rays ''')
sfirays.par('t0',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfirays.par('x0',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfirays.par('f0',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfirays.par('velocity',rsf.doc.rsfpar('bool','y','','''y, inputs are velocity / n, slowness-squared '''))
sfirays.par('order',rsf.doc.rsfpar('int','1','','''fastmarching accuracy order '''))
sfirays.par('thres',rsf.doc.rsfpar('float','10.','','''thresholding for caustics '''))
sfirays.par('t0',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfirays.par('x0',rsf.doc.rsfpar('string ',desc='''output upwind neighbor (auxiliary output file name)'''))
sfirays.par('f0',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfirays.version('2.1-git')
sfirays.synopsis('''sfirays < in.rsf > out.rsf t0=ot0.rsf x0=ox0.rsf f0=of0.rsf velocity=y order=1 thres=10.''','''''')
rsf.doc.progs['sfirays']=sfirays

sft2diter = rsf.doc.rsfprog('sft2diter','user/llisiw/Mt2diter.c','''Time-to-depth conversion (linear operator) ''')
sft2diter.par('s0',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sft2diter.par('t0',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sft2diter.par('x0',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sft2diter.par('f0',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sft2diter.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sft2diter.par('prec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sft2diter.par('dix',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sft2diter.par('velocity',rsf.doc.rsfpar('bool','y','','''y, inputs are velocity / n, slowness-squared '''))
sft2diter.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sft2diter.par('shape',rsf.doc.rsfpar('bool','n','','''regularization (default Tikhnov) '''))
sft2diter.par('eps',rsf.doc.rsfpar('float','0.1','','''regularization parameter '''))
sft2diter.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sft2diter.par('tol',rsf.doc.rsfpar('float','1.e-6','','''tolerance for shaping regularization '''))
sft2diter.par('cgiter',rsf.doc.rsfpar('int','200','','''number of CG iterations '''))
sft2diter.par('rect#',rsf.doc.rsfpar('int','(1,1,...)','','''smoothing radius on #-th axis '''))
sft2diter.par('what',rsf.doc.rsfpar('string ',desc='''what to compute (default inversion) '''))
sft2diter.par('s0',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sft2diter.par('t0',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sft2diter.par('x0',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sft2diter.par('f0',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sft2diter.par('mask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sft2diter.par('prec',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sft2diter.par('dix',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sft2diter.version('2.1-git')
sft2diter.synopsis('''sft2diter < in.rsf > out.rsf s0=is0.rsf t0=it0.rsf x0=ix0.rsf f0=if0.rsf mask=mask.rsf prec=prec.rsf dix=dix.rsf velocity=y adj=n shape=n eps=0.1 verb=n tol=1.e-6 cgiter=200 rect#=(1,1,...) what=''','''''')
rsf.doc.progs['sft2diter']=sft2diter

sfkirdat0 = rsf.doc.rsfprog('sfkirdat0','user/llisiw/Mkirdat0.c','''2-D Post-stack Kirchhoff redatuming. ''')
sfkirdat0.par('green',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfkirdat0.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfkirdat0.par('datum',rsf.doc.rsfpar('float','','','''datum depth '''))
sfkirdat0.par('aperture',rsf.doc.rsfpar('int','50','','''aperture (number of traces) '''))
sfkirdat0.par('taper',rsf.doc.rsfpar('int','10','','''taper (number of traces) '''))
sfkirdat0.par('length',rsf.doc.rsfpar('float','0.025','','''filter length (in seconds) '''))
sfkirdat0.version('2.1-git')
sfkirdat0.synopsis('''sfkirdat0 < in.rsf > out.rsf green=green.rsf verb=n datum= aperture=50 taper=10 length=0.025''','''''')
rsf.doc.progs['sfkirdat0']=sfkirdat0

sfkirdat = rsf.doc.rsfprog('sfkirdat','user/llisiw/Mkirdat.c','''2-D Pre-stack Kirchhoff redatuming. ''')
sfkirdat.par('sgreen',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfkirdat.par('rgreen',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfkirdat.par('interm',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfkirdat.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfkirdat.par('datum',rsf.doc.rsfpar('float','','','''datum depth '''))
sfkirdat.par('aperture',rsf.doc.rsfpar('int','50','','''aperture (number of traces) '''))
sfkirdat.par('taper',rsf.doc.rsfpar('int','10','','''taper (number of traces) '''))
sfkirdat.par('length',rsf.doc.rsfpar('float','0.025','','''filter length (in seconds) '''))
sfkirdat.par('interm',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfkirdat.version('2.1-git')
sfkirdat.synopsis('''sfkirdat < in.rsf > out.rsf sgreen=sgreen.rsf rgreen=rgreen.rsf interm=interm.rsf verb=n datum= aperture=50 taper=10 length=0.025''','''''')
rsf.doc.progs['sfkirdat']=sfkirdat

sfkirmigsr = rsf.doc.rsfprog('sfkirmigsr','user/llisiw/Mkirmigsr.c','''2-D Prestack Kirchhoff depth migration. ''')
sfkirmigsr.par('stable',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfkirmigsr.par('sderiv',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfkirmigsr.par('rtable',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfkirmigsr.par('rderiv',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfkirmigsr.par('adj',rsf.doc.rsfpar('bool','y','','''y for migration, n for modeling '''))
sfkirmigsr.par('cmp',rsf.doc.rsfpar('bool','y','','''y for CMP gather, n for shot gather '''))
sfkirmigsr.par('nt',rsf.doc.rsfpar('int','','','''time samples '''))
sfkirmigsr.par('nh',rsf.doc.rsfpar('int','1','','''offset samples '''))
sfkirmigsr.par('ns',rsf.doc.rsfpar('int','1','','''shot samples '''))
sfkirmigsr.par('t0',rsf.doc.rsfpar('float','0.0','','''time origin '''))
sfkirmigsr.par('dt',rsf.doc.rsfpar('float','','','''time sampling '''))
sfkirmigsr.par('h0',rsf.doc.rsfpar('float','0.0','','''offset origin '''))
sfkirmigsr.par('dh',rsf.doc.rsfpar('float','','','''offset sampling '''))
sfkirmigsr.par('s0',rsf.doc.rsfpar('float','0.0','','''shot origin '''))
sfkirmigsr.par('ds',rsf.doc.rsfpar('float','','','''shot sampling '''))
sfkirmigsr.par('tau',rsf.doc.rsfpar('float','0.','','''static time-shift (in second) '''))
sfkirmigsr.par('aperture',rsf.doc.rsfpar('float','90.','','''migration aperture (in degree) '''))
sfkirmigsr.par('antialias',rsf.doc.rsfpar('float','1.0','','''antialiasing '''))
sfkirmigsr.par('cig',rsf.doc.rsfpar('bool','n','','''y - output common offset gathers '''))
sfkirmigsr.par('type',rsf.doc.rsfpar('string ',desc='''type of interpolation (default Hermit) '''))
sfkirmigsr.version('2.1-git')
sfkirmigsr.synopsis('''sfkirmigsr < dat.rsf > mig.rsf stable=stim.rsf sderiv=sder.rsf rtable=rtim.rsf rderiv=rder.rsf adj=y cmp=y nt= nh=1 ns=1 t0=0.0 dt= h0=0.0 dh= s0=0.0 ds= tau=0. aperture=90. antialias=1.0 cig=n type=''','''''')
rsf.doc.progs['sfkirmigsr']=sfkirmigsr

sfkirdatsr = rsf.doc.rsfprog('sfkirdatsr','user/llisiw/Mkirdatsr.c','''2-D Pre-stack Kirchhoff redatuming. ''')
sfkirdatsr.par('sgreen',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfkirdatsr.par('rgreen',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfkirdatsr.par('interm',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfkirdatsr.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfkirdatsr.par('sdatum',rsf.doc.rsfpar('float','','','''source datum depth '''))
sfkirdatsr.par('rdatum',rsf.doc.rsfpar('float','','','''receiver datum depth '''))
sfkirdatsr.par('aperture',rsf.doc.rsfpar('int','50','','''aperture (number of traces) '''))
sfkirdatsr.par('taper',rsf.doc.rsfpar('int','10','','''taper (number of traces) '''))
sfkirdatsr.par('length',rsf.doc.rsfpar('float','0.025','','''filter length (in seconds) '''))
sfkirdatsr.par('interm',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfkirdatsr.version('2.1-git')
sfkirdatsr.synopsis('''sfkirdatsr < in.rsf > out.rsf sgreen=sgreen.rsf rgreen=rgreen.rsf interm=interm.rsf verb=n sdatum= rdatum= aperture=50 taper=10 length=0.025''','''''')
rsf.doc.progs['sfkirdatsr']=sfkirdatsr

sfftoper = rsf.doc.rsfprog('sfftoper','user/llisiw/Mftoper.c','''First-arrival Traveltime Tomography (linear operator) ''')
sfftoper.par('time',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfftoper.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfftoper.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag '''))
sfftoper.par('time',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfftoper.par('mask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfftoper.version('2.1-git')
sfftoper.synopsis('''sfftoper < in.rsf > out.rsf time=time.rsf mask=mask.rsf adj=n''','''''')
rsf.doc.progs['sfftoper']=sfftoper

sfdsreiko0 = rsf.doc.rsfprog('sfdsreiko0','user/llisiw/Mdsreiko0.c','''Double square-root eikonal solver (2D + explicit) ''')
sfdsreiko0.par('velocity',rsf.doc.rsfpar('bool','y','','''if y, the input is velocity; n, slowness squared '''))
sfdsreiko0.version('2.1-git')
sfdsreiko0.synopsis('''sfdsreiko0 < in.rsf > out.rsf velocity=y''','''''')
rsf.doc.progs['sfdsreiko0']=sfdsreiko0

sfiwipert = rsf.doc.rsfprog('sfiwipert','user/llisiw/Miwipert.c','''Image-domain waveform tomography (image perturbation). ''')
sfiwipert.par('pz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwipert.par('ph',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfiwipert.par('thres',rsf.doc.rsfpar('float','0.01','','''slope thresholding '''))
sfiwipert.par('pz',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwipert.par('ph',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfiwipert.version('2.1-git')
sfiwipert.synopsis('''sfiwipert < in.rsf > out.rsf pz=pz.rsf ph=ph.rsf thres=0.01''','''''')
rsf.doc.progs['sfiwipert']=sfiwipert

sfdsrtomo0 = rsf.doc.rsfprog('sfdsrtomo0','user/llisiw/Mdsrtomo0.c','''Prestack first-arrival traveltime tomography (DSR) ''')
sfdsrtomo0.par('reco',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdsrtomo0.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdsrtomo0.par('prec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdsrtomo0.par('grad',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfdsrtomo0.par('velocity',rsf.doc.rsfpar('bool','y','','''if y, the input is velocity; n, slowness-squared '''))
sfdsrtomo0.par('limit',rsf.doc.rsfpar('bool','n','','''if y, limit computation within receiver coverage '''))
sfdsrtomo0.par('shape',rsf.doc.rsfpar('bool','n','','''shaping regularization (default no) '''))
sfdsrtomo0.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfdsrtomo0.par('niter',rsf.doc.rsfpar('int','5','','''number of inversion iterations '''))
sfdsrtomo0.par('cgiter',rsf.doc.rsfpar('int','10','','''number of conjugate-gradient iterations '''))
sfdsrtomo0.par('thres',rsf.doc.rsfpar('float','5.e-5','','''threshold (percentage) '''))
sfdsrtomo0.par('tol',rsf.doc.rsfpar('float','1.e-3','','''tolerance for bisection root-search '''))
sfdsrtomo0.par('nloop',rsf.doc.rsfpar('int','10','','''number of bisection root-search '''))
sfdsrtomo0.par('eps',rsf.doc.rsfpar('float','0.','','''regularization parameter '''))
sfdsrtomo0.par('causal',rsf.doc.rsfpar('bool','y','','''if y, neglect non-causal branches of DSR '''))
sfdsrtomo0.par('rect#',rsf.doc.rsfpar('int','(1,1,...)','','''smoothing radius on #-th axis '''))
sfdsrtomo0.par('reco',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfdsrtomo0.par('mask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfdsrtomo0.par('prec',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfdsrtomo0.par('grad',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfdsrtomo0.version('2.1-git')
sfdsrtomo0.synopsis('''sfdsrtomo0 < in.rsf > out.rsf reco=reco.rsf mask=mask.rsf prec=prec.rsf grad=grad.rsf velocity=y limit=n shape=n verb=n niter=5 cgiter=10 thres=5.e-5 tol=1.e-3 nloop=10 eps=0. causal=y rect#=(1,1,...)''','''''')
rsf.doc.progs['sfdsrtomo0']=sfdsrtomo0

