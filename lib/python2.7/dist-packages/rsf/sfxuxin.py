import rsf.doc

sfintegral1 = rsf.doc.rsfprog('sfintegral1','user/xuxin/Mintegral1.c','''integration ''')
sfintegral1.par('rule',rsf.doc.rsfpar('string ',desc='''t, s : quadrature rules '''))
sfintegral1.version('2.1-git')
sfintegral1.synopsis('''sfintegral1 < Fin.rsf > Fout.rsf rule=''','''''')
rsf.doc.progs['sfintegral1']=sfintegral1

sfswapbyte = rsf.doc.rsfprog('sfswapbyte','user/xuxin/Mswapbyte.c','''endianness conversion ''')
sfswapbyte.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfswapbyte.version('2.1-git')
sfswapbyte.synopsis('''sfswapbyte < Fin.rsf > Fout.rsf verb=n''','''''')
rsf.doc.progs['sfswapbyte']=sfswapbyte

sfpseudodepth = rsf.doc.rsfprog('sfpseudodepth','user/xuxin/Mpseudodepth.c','''depth to vertical-time interpolation''')
sfpseudodepth.par('tau',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpseudodepth.par('inv',rsf.doc.rsfpar('bool','n','','''if y, tau to z; if n, tau to z '''))
sfpseudodepth.par('linear',rsf.doc.rsfpar('bool','y','','''if y, linear spline; if n, cubic spline (buggy) '''))
sfpseudodepth.par('n',rsf.doc.rsfpar('int','','','''tau n '''))
sfpseudodepth.par('o',rsf.doc.rsfpar('float','0.','','''tau o '''))
sfpseudodepth.par('d',rsf.doc.rsfpar('float','','','''tau d (>0) '''))
sfpseudodepth.version('2.1-git')
sfpseudodepth.synopsis('''sfpseudodepth < Fin.rsf tau=Ftau.rsf > Fout.rsf inv=n linear=y n= o=0. d=''','''z to tau : pseudodepth < FZ.rsf inv=n tau=tau.rsf n=ntau o=otau d=dtau > FT.rsf
tau to z : pseudodepth < FT.rsf inv=y tau=tau.rsf > FZ.rsf ''')
rsf.doc.progs['sfpseudodepth']=sfpseudodepth

sfzomiso = rsf.doc.rsfprog('sfzomiso','user/xuxin/Mzomiso.c','''zero-offset isotropic reverse-time migration''')
sfzomiso.par('velo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzomiso.par('cr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzomiso.par('wave',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfzomiso.par('vmap',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzomiso.par('sigm',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzomiso.par('inv',rsf.doc.rsfpar('bool','n','','''if y, modeling; if n, migration '''))
sfzomiso.par('tau',rsf.doc.rsfpar('bool','n','','''if y, tau domain; if n, cartesian '''))
sfzomiso.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfzomiso.par('opt',rsf.doc.rsfpar('bool','n','','''optimze fft size '''))
sfzomiso.par('nt',rsf.doc.rsfpar('int','1','','''time n (if inv=y) '''))
sfzomiso.par('dt',rsf.doc.rsfpar('float','1.','','''time d (if inv=y) '''))
sfzomiso.par('bzl',rsf.doc.rsfpar('int','0','',''''''))
sfzomiso.par('bzh',rsf.doc.rsfpar('int','0','',''''''))
sfzomiso.par('bxl',rsf.doc.rsfpar('int','0','',''''''))
sfzomiso.par('bxh',rsf.doc.rsfpar('int','0','',''''''))
sfzomiso.par('czl',rsf.doc.rsfpar('float','1.','',''''''))
sfzomiso.par('czh',rsf.doc.rsfpar('float','1.','',''''''))
sfzomiso.par('cxl',rsf.doc.rsfpar('float','1.','',''''''))
sfzomiso.par('cxh',rsf.doc.rsfpar('float','1.','',''''''))
sfzomiso.par('n3',rsf.doc.rsfpar('int','nt','','''wave time n '''))
sfzomiso.par('eps',rsf.doc.rsfpar('float','1','','''regularize sigma '''))
sfzomiso.version('2.1-git')
sfzomiso.synopsis('''sfzomiso velo=Fvelo.rsf cr=Fcr.rsf wave=Fwave.rsf < Fimag.rsf > Fdata.rsf vmap=Fvmap.rsf sigm=Fsigm.rsf inv=n tau=n verb=n opt=n nt=1 dt=1. bzl=0 bzh=0 bxl=0 bxh=0 czl=1. czh=1. cxl=1. cxh=1. n3=nt eps=1''','''* exploding reflector modeling : < imag.rsf sfzomiso inv=y > data.rsf
* zero-offset migration        : < data.rsf sfzomiso inv=n > imag.rsf
* forward modeling             : < data.rsf sfzomiso inv=n > imag.rsf 
Need (1) velo *= 2 (2) nr=1 (3) imag.rsf is useless ''')
rsf.doc.progs['sfzomiso']=sfzomiso

sfzomvti = rsf.doc.rsfprog('sfzomvti','user/xuxin/Mzomvti.c','''acoustic VTI wavefield''')
sfzomvti.par('vnmo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzomvti.par('vz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzomvti.par('eta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzomvti.par('cr',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzomvti.par('wave',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfzomvti.par('vmap',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzomvti.par('sigm',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzomvti.par('inv',rsf.doc.rsfpar('bool','n','','''if y, modeling; if n, migration '''))
sfzomvti.par('tau',rsf.doc.rsfpar('bool','n','','''if y, tau domain; if n, cartesian '''))
sfzomvti.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfzomvti.par('opt',rsf.doc.rsfpar('bool','n','','''optimze fft size '''))
sfzomvti.par('nt',rsf.doc.rsfpar('int','1','','''time n (if inv=y) '''))
sfzomvti.par('dt',rsf.doc.rsfpar('float','1.','','''time d (if inv=y) '''))
sfzomvti.par('bzl',rsf.doc.rsfpar('int','0','',''''''))
sfzomvti.par('bzh',rsf.doc.rsfpar('int','0','',''''''))
sfzomvti.par('bxl',rsf.doc.rsfpar('int','0','',''''''))
sfzomvti.par('bxh',rsf.doc.rsfpar('int','0','',''''''))
sfzomvti.par('czl',rsf.doc.rsfpar('float','1.','',''''''))
sfzomvti.par('czh',rsf.doc.rsfpar('float','1.','',''''''))
sfzomvti.par('cxl',rsf.doc.rsfpar('float','1.','',''''''))
sfzomvti.par('cxh',rsf.doc.rsfpar('float','1.','',''''''))
sfzomvti.par('n3',rsf.doc.rsfpar('int','nt','','''wave time n '''))
sfzomvti.par('eps',rsf.doc.rsfpar('float','1','','''regularize sigma '''))
sfzomvti.version('2.1-git')
sfzomvti.synopsis('''sfzomvti vnmo=Fvnmo.rsf vz=Fvver.rsf eta=Fheta.rsf cr=Fcr.rsf wave=Fwave.rsf < Fimag.rsf > Fdata.rsf vmap=Fvmap.rsf sigm=Fsigm.rsf inv=n tau=n verb=n opt=n nt=1 dt=1. bzl=0 bzh=0 bxl=0 bxh=0 czl=1. czh=1. cxl=1. cxh=1. n3=nt eps=1''','''* exploding reflector modeling : < imag.rsf sfzomvti inv=y > data.rsf
* zero-offset migration        : < data.rsf sfzomvti inv=n > imag.rsf
* prestack forward modeling    : < data.rsf sfzomvti inv=n > imag.rsf
Need (1) vnmo *= 2, vver *= 2 (2) nr=1 ''')
rsf.doc.progs['sfzomvti']=sfzomvti

sfmpirtmiso = rsf.doc.rsfprog('sfmpirtmiso','user/xuxin/Mmpirtmiso.c','''isotropic reverse-time migration ''')
sfmpirtmiso.par('velo',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpirtmiso.par('sour',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpirtmiso.par('nz',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmiso.par('nz',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmiso.par('tz',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmiso.par('dz',rsf.doc.rsfpar('float','','',''''''))
sfmpirtmiso.par('dz',rsf.doc.rsfpar('float','','',''''''))
sfmpirtmiso.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfmpirtmiso.par('z0',rsf.doc.rsfpar('float','','',''''''))
sfmpirtmiso.par('x0',rsf.doc.rsfpar('float','','',''''''))
sfmpirtmiso.par('bzl',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmiso.par('bzh',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmiso.par('bxl',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmiso.par('bxh',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmiso.par('czl',rsf.doc.rsfpar('float','','',''''''))
sfmpirtmiso.par('czh',rsf.doc.rsfpar('float','','',''''''))
sfmpirtmiso.par('cxl',rsf.doc.rsfpar('float','','',''''''))
sfmpirtmiso.par('cxh',rsf.doc.rsfpar('float','','',''''''))
sfmpirtmiso.par('j3',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmiso.par('nh',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmiso.par('ns',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmiso.par('dh',rsf.doc.rsfpar('float','','',''''''))
sfmpirtmiso.par('ds',rsf.doc.rsfpar('float','','',''''''))
sfmpirtmiso.par('h0',rsf.doc.rsfpar('float','','',''''''))
sfmpirtmiso.par('s0',rsf.doc.rsfpar('float','','',''''''))
sfmpirtmiso.par('zr',rsf.doc.rsfpar('float','','',''''''))
sfmpirtmiso.par('zs',rsf.doc.rsfpar('float','','',''''''))
sfmpirtmiso.par('nH',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmiso.par('nC',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmiso.par('dH',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmiso.par('dC',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmiso.par('C0',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmiso.par('mode',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmiso.par('tau',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmiso.version('2.1-git')
sfmpirtmiso.synopsis('''sfmpirtmiso velo=fvelo.rsf sour=fsour.rsf nz= nz= tz= dz= dz= dt= z0= x0= bzl= bzh= bxl= bxh= czl= czh= cxl= cxh= j3= nh= ns= dh= ds= h0= s0= zr= zs= nH= nC= dH= dC= C0= mode= tau=''','''''')
rsf.doc.progs['sfmpirtmiso']=sfmpirtmiso

sfmpirtmvti = rsf.doc.rsfprog('sfmpirtmvti','user/xuxin/Mmpirtmvti.c','''VTI reverse-time migration ''')
sfmpirtmvti.version('2.1-git')
sfmpirtmvti.synopsis('''sfmpirtmvti''','''''')
rsf.doc.progs['sfmpirtmvti']=sfmpirtmvti

