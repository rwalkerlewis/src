import rsf.doc

sfbspvel2 = rsf.doc.rsfprog('sfbspvel2','user/cram/Mbspvel2.c','''B-spline coefficients for a 2-D (an)isotropic velocity model. ''')
sfbspvel2.par('vx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfbspvel2.par('eta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfbspvel2.par('theta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfbspvel2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfbspvel2.par('vx',rsf.doc.rsfpar('string ',desc='''Horizontal velocity (auxiliary input file name)'''))
sfbspvel2.par('eta',rsf.doc.rsfpar('string ',desc='''Anellipticity (auxiliary input file name)'''))
sfbspvel2.par('theta',rsf.doc.rsfpar('string ',desc='''Tilt angle (auxiliary input file name)'''))
sfbspvel2.version('2.1-git')
sfbspvel2.synopsis('''sfbspvel2 < velz.rsf > out.rsf vx=velx.rsf eta=eta.rsf theta=theta.rsf verb=n''','''''')
rsf.doc.progs['sfbspvel2']=sfbspvel2

sfbspvel3 = rsf.doc.rsfprog('sfbspvel3','user/cram/Mbspvel3.c','''B-spline coefficients for a 3-D (an)isotropic velocity model. ''')
sfbspvel3.par('vx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfbspvel3.par('eta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfbspvel3.par('theta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfbspvel3.par('phi',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfbspvel3.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfbspvel3.par('vx',rsf.doc.rsfpar('string ',desc='''Horizontal velocity (auxiliary input file name)'''))
sfbspvel3.par('eta',rsf.doc.rsfpar('string ',desc='''Anellipticity (auxiliary input file name)'''))
sfbspvel3.par('theta',rsf.doc.rsfpar('string ',desc='''Tilt angle elevation (auxiliary input file name)'''))
sfbspvel3.par('phi',rsf.doc.rsfpar('string ',desc='''Tilt angle azimuth (auxiliary input file name)'''))
sfbspvel3.version('2.1-git')
sfbspvel3.synopsis('''sfbspvel3 < velz.rsf > out.rsf vx=velx.rsf eta=eta.rsf theta=theta.rsf phi=phi.rsf verb=n''','''''')
rsf.doc.progs['sfbspvel3']=sfbspvel3

sfcram2 = rsf.doc.rsfprog('sfcram2','user/cram/Mcram2.c','''2-D angle-domain Kirchhoff migration based on escape tables. ''')
sfcram2.par('data',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcram2.par('vz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcram2.par('imap',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram2.par('smap',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram2.par('dipagath',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram2.par('dipimap',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram2.par('dipsmap',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram2.par('full',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram2.par('mute',rsf.doc.rsfpar('bool','n','','''y - mute signal in constant z plane before stacking '''))
sfcram2.par('sqsmb',rsf.doc.rsfpar('bool','n','','''y - output energy traces instead of semblance '''))
sfcram2.par('oazmin',rsf.doc.rsfpar('float','180.0','','''Maximum allowed scattering angle at z min '''))
sfcram2.par('oazmax',rsf.doc.rsfpar('float','180.0','','''Maximum allowed scattering angle at z max '''))
sfcram2.par('dazmin',rsf.doc.rsfpar('float','180.0','','''Maximum allowed dip angle (abs.value) at z min '''))
sfcram2.par('dazmax',rsf.doc.rsfpar('float','180.0','','''Maximum allowed dip angle (abs.value) at z max '''))
sfcram2.par('ts',rsf.doc.rsfpar('int','3','','''Tapering length at the edges of the source direction '''))
sfcram2.par('th',rsf.doc.rsfpar('int','5','','''Tapering length at the edges of the receiver direction '''))
sfcram2.par('vconst',rsf.doc.rsfpar('float','1.5','','''Constant velocity, if vz= is not used '''))
sfcram2.par('smax',rsf.doc.rsfpar('float','10*fabsf (ds)','','''Maximum allowed width of the shot ray branch  '''))
sfcram2.par('hmax',rsf.doc.rsfpar('float','20*fabsf (dh)','','''Maximum allowed width of the receiver ray branch  '''))
sfcram2.par('data',rsf.doc.rsfpar('string ',desc='''Processed prestack data (auxiliary input file name)'''))
sfcram2.par('vz',rsf.doc.rsfpar('string ',desc='''Velocity model for amplitude weights (auxiliary input file name)'''))
sfcram2.par('imap',rsf.doc.rsfpar('string ',desc='''Scattering gathers illumination (angle, z, x) (auxiliary output file name)'''))
sfcram2.par('smap',rsf.doc.rsfpar('string ',desc='''Scattering gathers semblance (angle, z, x) (auxiliary output file name)'''))
sfcram2.par('dipagath',rsf.doc.rsfpar('string ',desc='''Dip angle gathers (angle, z, x) (auxiliary output file name)'''))
sfcram2.par('dipimap',rsf.doc.rsfpar('string ',desc='''Dip gathers illumination (angle, z, x) (auxiliary output file name)'''))
sfcram2.par('dipsmap',rsf.doc.rsfpar('string ',desc='''Dip gathers semblance (angle, z, x) (auxiliary output file name)'''))
sfcram2.par('full',rsf.doc.rsfpar('string ',desc='''Full image (scattering angle, dip angle, z, x) (auxiliary output file name)'''))
sfcram2.version('2.1-git')
sfcram2.synopsis('''sfcram2 < esct.rsf data=data.rsf vz=vz.rsf > oimag.rsf imap=oimap.rsf smap=osmap.rsf dipagath=dimag.rsf dipimap=dimap.rsf dipsmap=dsmap.rsf full=fimag.rsf mute=n sqsmb=n oazmin=180.0 oazmax=180.0 dazmin=180.0 dazmax=180.0 ts=3 th=5 vconst=1.5 smax=10*fabsf (ds) hmax=20*fabsf (dh)''','''''')
rsf.doc.progs['sfcram2']=sfcram2

sfcram3 = rsf.doc.rsfprog('sfcram3','user/cram/Mcram3.c','''3-D angle-domain Kirchhoff migration based on escape tables. ''')
sfcram3.par('data',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcram3.par('ddaemon',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcram3.par('survey',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcram3.par('vz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcram3.par('hits',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram3.par('agath',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram3.par('imap',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram3.par('smap',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram3.par('dipagath',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram3.par('dipimap',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram3.par('dipsmap',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcram3.par('amp',rsf.doc.rsfpar('bool','y','','''n - do not apply amplitude correction weights '''))
sfcram3.par('extrap',rsf.doc.rsfpar('bool','n','','''y - extrapolate migrated samples in gathers '''))
sfcram3.par('mute',rsf.doc.rsfpar('bool','n','','''y - mute signal in constant z plane before stacking '''))
sfcram3.par('outaz',rsf.doc.rsfpar('bool','y','','''n - stack azimuth direction before output '''))
sfcram3.par('inorm',rsf.doc.rsfpar('bool','n','','''y - normalize gathers for illumination '''))
sfcram3.par('oazmin',rsf.doc.rsfpar('float','180.0','','''Maximum allowed scattering angle at z min '''))
sfcram3.par('oazmax',rsf.doc.rsfpar('float','180.0','','''Maximum allowed scattering angle at z max '''))
sfcram3.par('dazmin',rsf.doc.rsfpar('float','180.0','','''Maximum allowed dip angle at z min '''))
sfcram3.par('dazmax',rsf.doc.rsfpar('float','180.0','','''Maximum allowed dip angle at z max '''))
sfcram3.par('dbx',rsf.doc.rsfpar('float','10.0*dx','','''Size of search bins in x '''))
sfcram3.par('dby',rsf.doc.rsfpar('float','10.0*dy','','''Size of search bins in y '''))
sfcram3.par('dxm',rsf.doc.rsfpar('float','5.0*dx','','''Taper length in x '''))
sfcram3.par('dym',rsf.doc.rsfpar('float','5.0*dy','','''Taper length in y '''))
sfcram3.par('armin',rsf.doc.rsfpar('float','0.01*dy*dx','','''Minimum allowed area for an exit ray branch '''))
sfcram3.par('armax',rsf.doc.rsfpar('float','100.0*dy*dx','','''Maximum allowed area for an exit ray branch '''))
sfcram3.par('np',rsf.doc.rsfpar('int','1','','''number of image points to buffer before accessing data '''))
sfcram3.par('vconst',rsf.doc.rsfpar('float','1.5','','''Constant velocity, if vz= is not used '''))
sfcram3.par('nc',rsf.doc.rsfpar('int','0','','''Number of threads to use for ray tracing (OMP_NUM_THREADS by default) '''))
sfcram3.par('data',rsf.doc.rsfpar('string ',desc='''Processed prestack data (auxiliary input file name)'''))
sfcram3.par('ddaemon',rsf.doc.rsfpar('string ',desc='''Daemon for distributed data storage (auxiliary input file name)'''))
sfcram3.par('survey',rsf.doc.rsfpar('string ',desc='''Survey info for input data (auxiliary input file name)'''))
sfcram3.par('vz',rsf.doc.rsfpar('string ',desc='''Velocity model for amplitude weights (auxiliary input file name)'''))
sfcram3.par('hits',rsf.doc.rsfpar('string ',desc='''Image illumination (z, x, y) (auxiliary output file name)'''))
sfcram3.par('agath',rsf.doc.rsfpar('string ',desc='''Scattering angle gathers (angle, azimuth, z, x, y) (auxiliary output file name)'''))
sfcram3.par('imap',rsf.doc.rsfpar('string ',desc='''SCattering gathers illumination (angle, azimuth, z, x, y) (auxiliary output file name)'''))
sfcram3.par('smap',rsf.doc.rsfpar('string ',desc='''Scattering gathers energy (angle, azimuth, z, x, y) (auxiliary output file name)'''))
sfcram3.par('dipagath',rsf.doc.rsfpar('string ',desc='''Dip angle gathers (angle, azimuth, z, x, y) (auxiliary output file name)'''))
sfcram3.par('dipimap',rsf.doc.rsfpar('string ',desc='''Dip gathers illumination (angle, azimuth, z, x, y) (auxiliary output file name)'''))
sfcram3.par('dipsmap',rsf.doc.rsfpar('string ',desc='''Dip gathers energy (angle, azimuth, z, x, y) (auxiliary output file name)'''))
sfcram3.version('2.1-git')
sfcram3.synopsis('''sfcram3 < esct.rsf data=data.rsf ddaemon=ddaemon.rsf survey=survey.rsf vz=vz.rsf > imag.rsf hits=hits.rsf agath=oimag.rsf imap=oimap.rsf smap=osmap.rsf dipagath=dimag.rsf dipimap=dimap.rsf dipsmap=dsmap.rsf amp=y extrap=n mute=n outaz=y inorm=n oazmin=180.0 oazmax=180.0 dazmin=180.0 dazmax=180.0 dbx=10.0*dx dby=10.0*dy dxm=5.0*dx dym=5.0*dy armin=0.01*dy*dx armax=100.0*dy*dx np=1 vconst=1.5 nc=0''','''''')
rsf.doc.progs['sfcram3']=sfcram3

sfcramdd = rsf.doc.rsfprog('sfcramdd','user/cram/Mcramdd.c','''Daemon for distributed storage of prestack data for angle migration. ''')
sfcramdd.par('data',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcramdd.par('port',rsf.doc.rsfpar('int','18003','','''TCP port for listening '''))
sfcramdd.par('ith',rsf.doc.rsfpar('int','0','','''Make every ith process a daemon '''))
sfcramdd.par('inet',rsf.doc.rsfpar('int','1','','''Network interface index '''))
sfcramdd.par('nthreads',rsf.doc.rsfpar('int','2*ncpu','','''Number of threads (connections) per daemon '''))
sfcramdd.par('timeout',rsf.doc.rsfpar('int','10','','''Inactivity time before shutdown (mins) '''))
sfcramdd.par('data',rsf.doc.rsfpar('string ',desc='''Grid of supercells of local escape solutions (auxiliary input file name)'''))
sfcramdd.version('2.1-git')
sfcramdd.synopsis('''sfcramdd < in.rsf > out.rsf data=data.rsf port=18003 ith=0 inet=1 nthreads=2*ncpu timeout=10''','''''')
rsf.doc.progs['sfcramdd']=sfcramdd

sfcrazgathc3 = rsf.doc.rsfprog('sfcrazgathc3','user/cram/Mcrazgathc3.c','''Collapse/stack (partially) azimuthal axis of 3-D angle-domain migration angle gathers. ''')
sfcrazgathc3.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity flag '''))
sfcrazgathc3.par('norm',rsf.doc.rsfpar('bool','n','','''y - normalize after stacking '''))
sfcrazgathc3.par('nth',rsf.doc.rsfpar('int','10','','''leave every nth azimuth '''))
sfcrazgathc3.par('wd',rsf.doc.rsfpar('int','5','','''half-width of stacking base (total base is 2*wd + 1) '''))
sfcrazgathc3.version('2.1-git')
sfcrazgathc3.synopsis('''sfcrazgathc3 < gath.rsf > rgath.rsf verb=y norm=n nth=10 wd=5''','''''')
rsf.doc.progs['sfcrazgathc3']=sfcrazgathc3

sfescbsc3 = rsf.doc.rsfprog('sfescbsc3','user/cram/Mescbsc3.c','''Prepare supercells for stitching escape tables in 3-D. ''')
sfescbsc3.par('vspl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfescbsc3.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfescbsc3.par('nz',rsf.doc.rsfpar('int','','','''Number of samples in z axis '''))
sfescbsc3.par('oz',rsf.doc.rsfpar('float','','','''Beginning of z axis '''))
sfescbsc3.par('dz',rsf.doc.rsfpar('float','','','''Sampling of z axis '''))
sfescbsc3.par('nx',rsf.doc.rsfpar('int','','','''Number of samples in x axis '''))
sfescbsc3.par('ox',rsf.doc.rsfpar('float','','','''Beginning of x axis '''))
sfescbsc3.par('dx',rsf.doc.rsfpar('float','','','''Sampling of x axis '''))
sfescbsc3.par('ny',rsf.doc.rsfpar('int','','','''Number of samples in y axis '''))
sfescbsc3.par('oy',rsf.doc.rsfpar('float','','','''Beginning of y axis '''))
sfescbsc3.par('dy',rsf.doc.rsfpar('float','','','''Sampling of y axis '''))
sfescbsc3.par('na',rsf.doc.rsfpar('int','','','''Number of samples in azimuth dimension '''))
sfescbsc3.par('nb',rsf.doc.rsfpar('int','','','''Number of samples in inclination dimension '''))
sfescbsc3.par('df',rsf.doc.rsfpar('float','0.1','','''< Maximum distance to travel per step (fraction of the cell size) >'''))
sfescbsc3.par('nc',rsf.doc.rsfpar('int','0','','''Number of threads to use for ray tracing (OMP_NUM_THREADS by default) '''))
sfescbsc3.par('parab',rsf.doc.rsfpar('bool','y','','''y - use parabolic approximation of trajectories, n - straight line '''))
sfescbsc3.par('md',rsf.doc.rsfpar('float','dz','','''Half-width of a supercell '''))
sfescbsc3.par('vspl',rsf.doc.rsfpar('string ',desc='''Spline coefficients for velocity model (auxiliary input file name)'''))
sfescbsc3.version('2.1-git')
sfescbsc3.synopsis('''sfescbsc3 < adom.rsf > out.rsf vspl=vspline.rsf verb=n nz= oz= dz= nx= ox= dx= ny= oy= dy= na= nb= df=0.1 nc=0 parab=y md=dz''','''''')
rsf.doc.progs['sfescbsc3']=sfescbsc3

sfescdiff = rsf.doc.rsfprog('sfescdiff','user/cram/Mescdiff.c','''Compute distance and traveltime difference between two escape tables. ''')
sfescdiff.par('esct',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfescdiff.par('maxd',rsf.doc.rsfpar('float','SF_HUGE','','''Maximum allowed distance '''))
sfescdiff.par('maxt',rsf.doc.rsfpar('float','SF_HUGE','','''Maximum allowed time '''))
sfescdiff.par('mask',rsf.doc.rsfpar('float','SF_HUGE','','''Mask for values above maxd= and maxt= thresholds '''))
sfescdiff.par('esct',rsf.doc.rsfpar('string ',desc='''Second set of escape tables (auxiliary input file name)'''))
sfescdiff.version('2.1-git')
sfescdiff.synopsis('''sfescdiff < esct0.rsf > out.rsf esct=esct1.rsf maxd=SF_HUGE maxt=SF_HUGE mask=SF_HUGE''','''''')
rsf.doc.progs['sfescdiff']=sfescdiff

sfescfgrid2 = rsf.doc.rsfprog('sfescfgrid2','user/cram/Mescfgrid2.c','''Solution of escape equations by Gauss-Seidel solver on full grid for 2-D (an)isotropic media. ''')
sfescfgrid2.par('vspl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfescfgrid2.par('na',rsf.doc.rsfpar('int','360','','''Number of phase angles '''))
sfescfgrid2.par('mdist',rsf.doc.rsfpar('float','SF_HUGE','','''Maximum distance between points in F-D stencil '''))
sfescfgrid2.par('thresh',rsf.doc.rsfpar('float','1e-6','','''Convergence threshold '''))
sfescfgrid2.par('morder',rsf.doc.rsfpar('int','ESC2_MORDER','','''Maximum order in F-D stencil '''))
sfescfgrid2.par('niter',rsf.doc.rsfpar('int','nx','','''Maximum number of Gauss-Seidel iterations '''))
sfescfgrid2.par('atraced',rsf.doc.rsfpar('bool','n','','''true - output map of all traced points '''))
sfescfgrid2.par('mtraced',rsf.doc.rsfpar('bool','n','','''true - output map of points traced because of mdist criterion '''))
sfescfgrid2.par('cmix',rsf.doc.rsfpar('bool','n','','''true - check for color mixing '''))
sfescfgrid2.par('tracebc',rsf.doc.rsfpar('bool','y','','''n - do not trace B.C. points '''))
sfescfgrid2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfescfgrid2.par('vspl',rsf.doc.rsfpar('string ',desc='''Spline coefficients for velocity model (auxiliary input file name)'''))
sfescfgrid2.version('2.1-git')
sfescfgrid2.synopsis('''sfescfgrid2 < spdom.rsf > out.rsf vspl=vspline.rsf na=360 mdist=SF_HUGE thresh=1e-6 morder=ESC2_MORDER niter=nx atraced=n mtraced=n cmix=n tracebc=y verb=n''','''''')
rsf.doc.progs['sfescfgrid2']=sfescfgrid2

sfescnband2 = rsf.doc.rsfprog('sfescnband2','user/cram/Mescnband2.c','''Solution of escape equations by hybrid solver with narrow band for 2-D (an)isotropic media. ''')
sfescnband2.par('vspl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfescnband2.par('na',rsf.doc.rsfpar('int','360','','''Number of phase angles '''))
sfescnband2.par('mdist',rsf.doc.rsfpar('float','SF_HUGE','','''Maximum distance between points in F-D stencil '''))
sfescnband2.par('morder',rsf.doc.rsfpar('int','ESC2_MORDER','','''Maximum order in F-D stencil '''))
sfescnband2.par('atraced',rsf.doc.rsfpar('bool','n','','''true - output map of all traced points '''))
sfescnband2.par('mtraced',rsf.doc.rsfpar('bool','n','','''true - output map of points traced because of mdist criterion '''))
sfescnband2.par('cmix',rsf.doc.rsfpar('bool','y','','''true - check for color mixing '''))
sfescnband2.par('tracebc',rsf.doc.rsfpar('bool','y','','''n - do not trace B.C. points '''))
sfescnband2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfescnband2.par('vspl',rsf.doc.rsfpar('string ',desc='''Spline coefficients for velocity model (auxiliary input file name)'''))
sfescnband2.version('2.1-git')
sfescnband2.synopsis('''sfescnband2 < spdom.rsf > out.rsf vspl=vspline.rsf na=360 mdist=SF_HUGE morder=ESC2_MORDER atraced=n mtraced=n cmix=y tracebc=y verb=n''','''''')
rsf.doc.progs['sfescnband2']=sfescnband2

sfescrt2 = rsf.doc.rsfprog('sfescrt2','user/cram/Mescrt2.c','''Escape tables by ray tracing with escape equations in 2-D. ''')
sfescrt2.par('traj',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfescrt2.par('vspl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfescrt2.par('na',rsf.doc.rsfpar('int','360','','''Number of phase angles '''))
sfescrt2.par('df',rsf.doc.rsfpar('float','0.25','','''< Maximum distance to travel per step (fraction of the cell size) >'''))
sfescrt2.par('md',rsf.doc.rsfpar('float','SF_HUGE','','''Maximum distance for a ray to travel (default - up to model boundaries) '''))
sfescrt2.par('aper',rsf.doc.rsfpar('float','SF_HUGE','','''Maximum aperture in x and y directions from current point (default - up to model boundaries) '''))
sfescrt2.par('nc',rsf.doc.rsfpar('int','0','','''Number of threads to use for ray tracing (OMP_NUM_THREADS by default) '''))
sfescrt2.par('parab',rsf.doc.rsfpar('bool','y','','''y - use parabolic approximation of trajectories, n - straight line '''))
sfescrt2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfescrt2.par('nt',rsf.doc.rsfpar('int','1001','','''Number of time samples for each trajectory '''))
sfescrt2.par('dt',rsf.doc.rsfpar('float','0.001','','''Time sampling '''))
sfescrt2.par('traj',rsf.doc.rsfpar('string ',desc='''Trajectory output (auxiliary output file name)'''))
sfescrt2.par('vspl',rsf.doc.rsfpar('string ',desc='''Spline coefficients for velocity model (auxiliary input file name)'''))
sfescrt2.version('2.1-git')
sfescrt2.synopsis('''sfescrt2 < spdom.rsf > out.rsf traj=traj.rsf vspl=vspline.rsf na=360 df=0.25 md=SF_HUGE aper=SF_HUGE nc=0 parab=y verb=n nt=1001 dt=0.001''','''''')
rsf.doc.progs['sfescrt2']=sfescrt2

sfescrt3 = rsf.doc.rsfprog('sfescrt3','user/cram/Mescrt3.c','''Escape tables by ray tracing with escape equations in 3-D. ''')
sfescrt3.par('traj',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfescrt3.par('vspl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfescrt3.par('na',rsf.doc.rsfpar('int','360','','''Number of azimuth phase angles '''))
sfescrt3.par('nb',rsf.doc.rsfpar('int','180','','''Number of inclination phase angles '''))
sfescrt3.par('df',rsf.doc.rsfpar('float','0.1','','''< Maximum distance to travel per step (fraction of the cell size) >'''))
sfescrt3.par('md',rsf.doc.rsfpar('float','SF_HUGE','','''Maximum distance for a ray to travel (default - up to model boundaries) '''))
sfescrt3.par('aper',rsf.doc.rsfpar('float','SF_HUGE','','''Maximum aperture in x and y directions from current point (default - up to model boundaries) '''))
sfescrt3.par('nc',rsf.doc.rsfpar('int','0','','''Number of threads to use for ray tracing (OMP_NUM_THREADS by default) '''))
sfescrt3.par('parab',rsf.doc.rsfpar('bool','y','','''y - use parabolic approximation of trajectories, n - straight line '''))
sfescrt3.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfescrt3.par('nt',rsf.doc.rsfpar('int','1001','','''Number of time samples for each trajectory '''))
sfescrt3.par('dt',rsf.doc.rsfpar('float','0.001','','''Time sampling '''))
sfescrt3.par('traj',rsf.doc.rsfpar('string ',desc='''Trajectory output (auxiliary output file name)'''))
sfescrt3.par('vspl',rsf.doc.rsfpar('string ',desc='''Spline coefficients for velocity model (auxiliary input file name)'''))
sfescrt3.version('2.1-git')
sfescrt3.synopsis('''sfescrt3 < spdom.rsf > out.rsf traj=traj.rsf vspl=vspline.rsf na=360 nb=180 df=0.1 md=SF_HUGE aper=SF_HUGE nc=0 parab=y verb=n nt=1001 dt=0.001''','''''')
rsf.doc.progs['sfescrt3']=sfescrt3

sfescscd3 = rsf.doc.rsfprog('sfescscd3','user/cram/Mescscd3.c','''Daemon for distributed computation of stitched escape solutions in supercells in 3-D. ''')
sfescscd3.par('scgrid',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfescscd3.par('nab',rsf.doc.rsfpar('int','1','','''Number of angular blocks to keep in memory per daemon '''))
sfescscd3.par('port',rsf.doc.rsfpar('int','29542','','''TCP port for listening '''))
sfescscd3.par('ith',rsf.doc.rsfpar('int','0','','''Make every ith process a daemon '''))
sfescscd3.par('inet',rsf.doc.rsfpar('int','1','','''Network interface index '''))
sfescscd3.par('ma',rsf.doc.rsfpar('int','20','','''How many azimuth angles to expect per request '''))
sfescscd3.par('mb',rsf.doc.rsfpar('int','20','','''How many inclination angles to expect per request '''))
sfescscd3.par('nthreads',rsf.doc.rsfpar('int','2*ncpu','','''Number of threads (connections) per daemon '''))
sfescscd3.par('timeout',rsf.doc.rsfpar('int','10','','''Inactivity time before shutdown (mins) '''))
sfescscd3.par('tdelay',rsf.doc.rsfpar('int','0','','''Time delay before accessing data, tdel*icpu (secs) '''))
sfescscd3.par('scgrid',rsf.doc.rsfpar('string ',desc='''Grid of supercells of local escape solutions (auxiliary input file name)'''))
sfescscd3.version('2.1-git')
sfescscd3.synopsis('''sfescscd3 < in.rsf > out.rsf scgrid=scgrid.rsf nab=1 port=29542 ith=0 inet=1 ma=20 mb=20 nthreads=2*ncpu timeout=10 tdelay=0''','''''')
rsf.doc.progs['sfescscd3']=sfescscd3

sfescst3 = rsf.doc.rsfprog('sfescst3','user/cram/Mescst3.c','''Escape tables by stitching of escape solutions in supercells in 3-D. ''')
sfescst3.par('vspl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfescst3.par('scgrid',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfescst3.par('scdaemon',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfescst3.par('na',rsf.doc.rsfpar('int','360','','''Number of azimuth phase angles '''))
sfescst3.par('nb',rsf.doc.rsfpar('int','180','','''Number of inclination phase angles '''))
sfescst3.par('mp',rsf.doc.rsfpar('int','1','','''Bufferization factor for multicore processing (number of points in buffer = mp*nc) '''))
sfescst3.par('nc',rsf.doc.rsfpar('int','0','','''Number of threads to use for ray tracing (OMP_NUM_THREADS by default) '''))
sfescst3.par('aper',rsf.doc.rsfpar('float','SF_HUGE','','''Maximum aperture in x and y directions from current point (default - up to grid boundaries) '''))
sfescst3.par('parab',rsf.doc.rsfpar('bool','y','','''y - use parabolic approximation of trajectories, n - straight line '''))
sfescst3.par('mmaped',rsf.doc.rsfpar('bool','y','','''n - do not use memory mapping for local data access '''))
sfescst3.par('rfail',rsf.doc.rsfpar('bool','y','','''n - do not quit if remote processing fails, try local processing '''))
sfescst3.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfescst3.par('morder',rsf.doc.rsfpar('int','1','','''Order of interpolation accuracy in the angular domain (1-3) '''))
sfescst3.par('inet',rsf.doc.rsfpar('int','1','','''Network interface index '''))
sfescst3.par('tdel',rsf.doc.rsfpar('int','0','','''Optional delay time before connecting (seconds) '''))
sfescst3.par('vspl',rsf.doc.rsfpar('string ',desc='''Spline coefficients for velocity model (auxiliary input file name)'''))
sfescst3.par('scgrid',rsf.doc.rsfpar('string ',desc='''Grid of supercells of local escape solutions (auxiliary input file name)'''))
sfescst3.par('scdaemon',rsf.doc.rsfpar('string ',desc='''Daemon for distributed computation (auxiliary input file name)'''))
sfescst3.version('2.1-git')
sfescst3.synopsis('''sfescst3 < spdom.rsf > out.rsf vspl=vspline.rsf scgrid=scgrid.rsf scdaemon=scdaemon.rsf na=360 nb=180 mp=1 nc=0 aper=SF_HUGE parab=y mmaped=y rfail=y verb=n morder=1 inet=1 tdel=0''','''''')
rsf.doc.progs['sfescst3']=sfescst3

sfesctbl2 = rsf.doc.rsfprog('sfesctbl2','user/cram/Mesctbl2.c','''Esctape tables from solution of escape equations by the hybrid solver with narrow band. ''')
sfesctbl2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfesctbl2.version('2.1-git')
sfesctbl2.synopsis('''sfesctbl2 < in.rsf > out.rsf verb=n''','''''')
rsf.doc.progs['sfesctbl2']=sfesctbl2

sfpcrdata2 = rsf.doc.rsfprog('sfpcrdata2','user/cram/Mpcrdata2.c','''Prepare data for 2-D angle-domain migration. ''')
sfpcrdata2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfpcrdata2.par('absoff',rsf.doc.rsfpar('bool','n','','''y - absolute offset (default - relative to shot axis) '''))
sfpcrdata2.par('filter',rsf.doc.rsfpar('bool','y','','''y - antialiasing filter for data '''))
sfpcrdata2.par('KMAH',rsf.doc.rsfpar('bool','y','','''y - account for phase shifts due to KMAH index '''))
sfpcrdata2.par('diff',rsf.doc.rsfpar('bool','y','','''y - apply half-order differentiation '''))
sfpcrdata2.version('2.1-git')
sfpcrdata2.synopsis('''sfpcrdata2 < data.rsf > out.rsf verb=n absoff=n filter=y KMAH=y diff=y''','''''')
rsf.doc.progs['sfpcrdata2']=sfpcrdata2

sfpcrdata3 = rsf.doc.rsfprog('sfpcrdata3','user/cram/Mpcrdata3.c','''Prepare data for 3-D angle-domain migration. ''')
sfpcrdata3.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfpcrdata3.par('erefl',rsf.doc.rsfpar('bool','n','','''y - assume data modeled with exploding reflector '''))
sfpcrdata3.par('filter',rsf.doc.rsfpar('bool','y','','''y - antialiasing filter for data '''))
sfpcrdata3.par('KMAH',rsf.doc.rsfpar('bool','y','','''y - account for phase shifts due to KMAH index '''))
sfpcrdata3.par('diff',rsf.doc.rsfpar('bool','y','','''y - apply differentiation '''))
sfpcrdata3.version('2.1-git')
sfpcrdata3.synopsis('''sfpcrdata3 < data.rsf > out.rsf verb=n erefl=n filter=y KMAH=y diff=y''','''''')
rsf.doc.progs['sfpcrdata3']=sfpcrdata3

sfpcrsurv3 = rsf.doc.rsfprog('sfpcrsurv3','user/cram/Mpcrsurv3.c','''Prepare survey info for 3-D angle-domain migration. ''')
sfpcrsurv3.par('sxsy',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpcrsurv3.par('gxgy',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpcrsurv3.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfpcrsurv3.par('tri',rsf.doc.rsfpar('bool','n','','''triangulation flag '''))
sfpcrsurv3.par('esmax',rsf.doc.rsfpar('float','0.2','','''Maximum edge length in the shot triangulation '''))
sfpcrsurv3.par('ehmax',rsf.doc.rsfpar('float','0.1','','''Maximum edge length in the receiver triangulation '''))
sfpcrsurv3.par('sxsy',rsf.doc.rsfpar('string ',desc='''File with shot coordinates (auxiliary input file name)'''))
sfpcrsurv3.par('gxgy',rsf.doc.rsfpar('string ',desc='''File with receiver coordinates (auxiliary input file name)'''))
sfpcrsurv3.version('2.1-git')
sfpcrsurv3.synopsis('''sfpcrsurv3 < data.rsf > survey.rsf sxsy=sxsy.rsf gxgy=gxgy.rsf verb=n tri=n esmax=0.2 ehmax=0.1''','''''')
rsf.doc.progs['sfpcrsurv3']=sfpcrsurv3

sfrpslow2 = rsf.doc.rsfprog('sfrpslow2','user/cram/Mrpslow2.c','''Full angle-dependent slowness volume for 3-D reduced phase space. ''')
sfrpslow2.par('vspl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfrpslow2.par('na',rsf.doc.rsfpar('int','360','','''Number of phase angles '''))
sfrpslow2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfrpslow2.par('vspl',rsf.doc.rsfpar('string ',desc='''Spline coefficients for velocity model (auxiliary input file name)'''))
sfrpslow2.version('2.1-git')
sfrpslow2.synopsis('''sfrpslow2 < spdom.rsf > out.rsf vspl=vspline.rsf na=360 verb=n''','''''')
rsf.doc.progs['sfrpslow2']=sfrpslow2

