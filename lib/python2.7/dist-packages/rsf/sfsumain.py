import rsf.doc

sfkdmig2d = rsf.doc.rsfprog('sfkdmig2d','su/main/kdmig2d.c','''2-D Prestack Kirchhoff depth migration (SU version). ''')
sfkdmig2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfkdmig2d.par('dxm',rsf.doc.rsfpar('float','0.5*ds','','''sampling interval of midpoints '''))
sfkdmig2d.par('rscale',rsf.doc.rsfpar('float','RSCALE_KDMIG','','''scaling for roundoff error suppression '''))
sfkdmig2d.par('nxo',rsf.doc.rsfpar('int','(nxt-1)*2+1','','''number of output traces '''))
sfkdmig2d.par('fxo',rsf.doc.rsfpar('float','fxt','','''x-coordinate of first output trace '''))
sfkdmig2d.par('dxo',rsf.doc.rsfpar('float','dxt*0.5','','''horizontal spacing of output trace '''))
sfkdmig2d.par('nzo',rsf.doc.rsfpar('int','(nzt-1)*5+1','','''number of points in output trace '''))
sfkdmig2d.par('fzo',rsf.doc.rsfpar('float','fzt','','''z-coordinate of first point in output trace '''))
sfkdmig2d.par('dzo',rsf.doc.rsfpar('float','dzt*0.2','','''vertical spacing of output trace '''))
sfkdmig2d.par('v0',rsf.doc.rsfpar('float','1.5','','''reference velocity value at surface '''))
sfkdmig2d.par('dvz',rsf.doc.rsfpar('float','0','','''reference velocity vertical gradient '''))
sfkdmig2d.par('angmax',rsf.doc.rsfpar('float','60.','','''migration angle aperature from vertical '''))
sfkdmig2d.par('aperx',rsf.doc.rsfpar('float','0.5*nxt*dxt','','''migration lateral aperature '''))
sfkdmig2d.par('offmax',rsf.doc.rsfpar('float','3.0','','''maximum absolute offset allowed in migration '''))
sfkdmig2d.par('fmax',rsf.doc.rsfpar('float','0.25/dt','','''frequency-highcut for input traces '''))
sfkdmig2d.par('noff',rsf.doc.rsfpar('int','1','','''number of offsets in output '''))
sfkdmig2d.par('off0',rsf.doc.rsfpar('float','0.','','''first offest in output '''))
sfkdmig2d.par('doff',rsf.doc.rsfpar('float','0.1','','''offset increment in output '''))
sfkdmig2d.par('ls',rsf.doc.rsfpar('int','1','','''flag for line source '''))
sfkdmig2d.par('absoff',rsf.doc.rsfpar('int','0','','''1 - use absolute value of offset, 0 - use offset =gx-sx '''))
sfkdmig2d.par('limoff',rsf.doc.rsfpar('int','0','','''1 - limit traces used by offset, 0 - use all traces '''))
sfkdmig2d.par('ntr',rsf.doc.rsfpar('int','sf_leftsize (infp, 1)','','''maximum number of input traces to be migrated '''))
sfkdmig2d.par('mtr',rsf.doc.rsfpar('int','100','','''print verbal information at every mtr traces '''))
sfkdmig2d.par('npv',rsf.doc.rsfpar('int','0','','''1 - compute quantities for velocity analysis '''))
sfkdmig2d.par('ttfile',rsf.doc.rsfpar('string ',desc='''input traveltime tables '''))
sfkdmig2d.par('tvfile',rsf.doc.rsfpar('string ',desc='''input file of traveltime variation tables '''))
sfkdmig2d.par('csfile',rsf.doc.rsfpar('string ',desc='''input file of cosine tables '''))
sfkdmig2d.par('outfile1',rsf.doc.rsfpar('string ',desc='''file containning additional migration output '''))
sfkdmig2d.version('2.1-git')
sfkdmig2d.synopsis('''sfkdmig2d < infp.rsf > outfp.rsf verb=n dxm=0.5*ds rscale=RSCALE_KDMIG nxo=(nxt-1)*2+1 fxo=fxt dxo=dxt*0.5 nzo=(nzt-1)*5+1 fzo=fzt dzo=dzt*0.2 v0=1.5 dvz=0 angmax=60. aperx=0.5*nxt*dxt offmax=3.0 fmax=0.25/dt noff=1 off0=0. doff=0.1 ls=1 absoff=0 limoff=0 ntr=sf_leftsize (infp, 1) mtr=100 npv=0 ttfile= tvfile= csfile= outfile1=''','''''')
rsf.doc.progs['sfkdmig2d']=sfkdmig2d

sfmakevel = rsf.doc.rsfprog('sfmakevel','su/main/makevel.c','''Make a velocity function v(x,y,z) ''')
sfmakevel.par('n2',rsf.doc.rsfpar('int','','','''number of x samples (2nd dimension), must be provided!'''))
sfmakevel.par('n1',rsf.doc.rsfpar('int','','','''number of z samples (1st dimension)), must be provided!'''))
sfmakevel.par('n3',rsf.doc.rsfpar('int','1','','''number of y samples (3rd dimension)'''))
sfmakevel.par('d2',rsf.doc.rsfpar('float','1.0','','''2nd dimension sampling interval'''))
sfmakevel.par('d3',rsf.doc.rsfpar('float','1.0','','''3rd dimension sampling interval'''))
sfmakevel.par('d1',rsf.doc.rsfpar('float','1.0','','''1st dimension sampling interval'''))
sfmakevel.par('o2',rsf.doc.rsfpar('float','0.0','','''Origin 2nd dimension'''))
sfmakevel.par('o3',rsf.doc.rsfpar('float','0.0','','''Origin 3rd dimension'''))
sfmakevel.par('o1',rsf.doc.rsfpar('float','0.0','','''Origin 1st dimension'''))
sfmakevel.par('v000',rsf.doc.rsfpar('float','2.0','','''velocity at (x=0,y=0,z=0)'''))
sfmakevel.par('dvdx2',rsf.doc.rsfpar('float','0.0','','''velocity gradient with respect to 2nd dimension'''))
sfmakevel.par('dvdx3',rsf.doc.rsfpar('float','0.0','','''velocity gradient with respect to 3rd dimension'''))
sfmakevel.par('dvdx1',rsf.doc.rsfpar('float','0.0','','''velocity gradient with respect to 1st dimension'''))
sfmakevel.par('x2lens',rsf.doc.rsfpar('float','fx','','''2nd dimension coordinate of center of parabolic lens'''))
sfmakevel.par('x3lens',rsf.doc.rsfpar('float','fy','','''3rd dimension coordinate of center of parabolic lens'''))
sfmakevel.par('x1lens',rsf.doc.rsfpar('float','fz','','''1st dimension coordinate of center of parabolic lens'''))
sfmakevel.par('vlens',rsf.doc.rsfpar('float','0.0','','''velocity perturbation in parabolic lens'''))
sfmakevel.par('dlens',rsf.doc.rsfpar('float','1.0','','''diameter of parabolic lens'''))
sfmakevel.par('tlens',rsf.doc.rsfpar('float','1.0','','''thickness of parabolic lens'''))
sfmakevel.par('vran',rsf.doc.rsfpar('float','0.0','','''standard deviation of random perturbation'''))
sfmakevel.par('vx1ran',rsf.doc.rsfpar('float','0.0','','''standard deviation of random perturbation to 1st dimension'''))
sfmakevel.par('vx1c',rsf.doc.rsfpar('float','0.0','','''1st dimension v(z) chirp amplitude'''))
sfmakevel.par('x11c',rsf.doc.rsfpar('float','fz','','''1st dimension at which to begin chirp'''))
sfmakevel.par('x12c',rsf.doc.rsfpar('float','fz+(nz-1)*dz','','''1st dimension at which to end chirp'''))
sfmakevel.par('l1c',rsf.doc.rsfpar('float','dz','','''wavelength at beginning of chirp'''))
sfmakevel.par('l2c',rsf.doc.rsfpar('float','dz','','''wavelength at end of chirp'''))
sfmakevel.par('exc',rsf.doc.rsfpar('float','1.0','','''exponent of chirp'''))
sfmakevel.par('vzfile',rsf.doc.rsfpar('string ',desc=''''''))
sfmakevel.par('vx1file',rsf.doc.rsfpar('string ',desc='''file containing v(z) 1st dimension profile'''))
sfmakevel.version('2.1-git')
sfmakevel.synopsis('''sfmakevel > out.rsf n2= n1= n3=1 d2=1.0 d3=1.0 d1=1.0 o2=0.0 o3=0.0 o1=0.0 v000=2.0 dvdx2=0.0 dvdx3=0.0 dvdx1=0.0 x2lens=fx x3lens=fy x1lens=fz vlens=0.0 dlens=1.0 tlens=1.0 vran=0.0 vx1ran=0.0 vx1c=0.0 x11c=fz x12c=fz+(nz-1)*dz l1c=dz l2c=dz exc=1.0 vzfile= vx1file=''','''''')
rsf.doc.progs['sfmakevel']=sfmakevel

sfpef = rsf.doc.rsfprog('sfpef','su/main/pef.c','''Wiener predictive error filtering ''')
sfpef.par('wiener',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpef.par('mix',rsf.doc.rsfpar('floats','','','''weights for moving average of the autocorrelations  [nmix]'''))
sfpef.par('minlag',rsf.doc.rsfpar('float','','','''first lag of prediction filter (sec) '''))
sfpef.par('maxlag',rsf.doc.rsfpar('float','','','''last lag of prediction filter (sec) '''))
sfpef.par('pnoise',rsf.doc.rsfpar('float','0.001','','''relative additive noise level '''))
sfpef.par('nmix',rsf.doc.rsfpar('int','1','','''number of weights (floats) for moving averages '''))
sfpef.par('mincorr',rsf.doc.rsfpar('float','','','''start of autocorrelation window in sec '''))
sfpef.par('maxcorr',rsf.doc.rsfpar('float','','','''end of autocorrelation window in sec '''))
sfpef.par('wiener',rsf.doc.rsfpar('string ',desc='''file to output Wiener filter (auxiliary output file name)'''))
sfpef.version('2.1-git')
sfpef.synopsis('''sfpef < inp.rsf > out.rsf wiener=wien.rsf mix= minlag= maxlag= pnoise=0.001 nmix=1 mincorr= maxcorr=''','''''')
rsf.doc.progs['sfpef']=sfpef

sfsinc = rsf.doc.rsfprog('sfsinc','su/main/sinc.c','''1-D sinc interpolation.''')
sfsinc.par('pattern',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsinc.par('pattern',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfsinc.version('2.1-git')
sfsinc.synopsis('''sfsinc < in.rsf > out.rsf pattern=pattern.rsf''','''
Specify either n1= o1= d1= or pattern=
''')
rsf.doc.progs['sfsinc']=sfsinc

sftraces = rsf.doc.rsfprog('sftraces','su/main/traces.c','''Make traces with reverberations for testing deconvolution. ''')
sftraces.version('2.1-git')
sftraces.synopsis('''sftraces > traces.rsf''','''''')
rsf.doc.progs['sftraces']=sftraces

