import rsf.doc

sfshpwstack = rsf.doc.rsfprog('sfshpwstack','user/kregimbal/Mshpwstack.c','''Recursive stacking by plane-wave construction. ''')
sfshpwstack.par('velocity',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfshpwstack.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfshpwstack.par('offset',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfshpwstack.par('half',rsf.doc.rsfpar('bool','y','','''if y, the second axis is half-offset instead of full offset '''))
sfshpwstack.par('slowness',rsf.doc.rsfpar('bool','n','','''if y, use slowness instead of velocity '''))
sfshpwstack.par('verb',rsf.doc.rsfpar('bool','n','',''''''))
sfshpwstack.par('eps',rsf.doc.rsfpar('float','0.01','','''regularization '''))
sfshpwstack.par('velocity',rsf.doc.rsfpar('float','0.0f','','''constant velocity '''))
sfshpwstack.par('nmo',rsf.doc.rsfpar('bool','n','','''if y, apply constant velocity NMO '''))
sfshpwstack.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfshpwstack.par('mode',rsf.doc.rsfpar('int','1','','''1: predict backward, 2: predict forward then backward '''))
sfshpwstack.par('h0',rsf.doc.rsfpar('float','0.','','''reference offset '''))
sfshpwstack.par('eps1',rsf.doc.rsfpar('float','0.01','','''stretch regularization '''))
sfshpwstack.par('jump',rsf.doc.rsfpar('int','1','','''subsampling '''))
sfshpwstack.par('niter',rsf.doc.rsfpar('int','10','','''number of iterations '''))
sfshpwstack.par('restart',rsf.doc.rsfpar('int','niter','','''GMRES memory '''))
sfshpwstack.par('tol',rsf.doc.rsfpar('float','1e-5','','''GMRES tolerance '''))
sfshpwstack.par('flo',rsf.doc.rsfpar('float','','','''Low frequency in band, default is 0 '''))
sfshpwstack.par('fhi',rsf.doc.rsfpar('float','','','''High frequency in band, default is Nyquist '''))
sfshpwstack.par('nplo',rsf.doc.rsfpar('int','6','','''number of poles for low cutoff '''))
sfshpwstack.par('nphi',rsf.doc.rsfpar('int','6','','''number of poles for high cutoff '''))
sfshpwstack.par('offset',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfshpwstack.version('2.1-git')
sfshpwstack.synopsis('''sfshpwstack < cmp.rsf velocity=velocity.rsf > stack.rsf dip=dip.rsf offset=offset.rsf half=y slowness=n verb=n eps=0.01 velocity=0.0f nmo=n order=1 mode=1 h0=0. eps1=0.01 jump=1 niter=10 restart=niter tol=1e-5 flo= fhi= nplo=6 nphi=6''','''''')
rsf.doc.progs['sfshpwstack']=sfshpwstack

sfshstack = rsf.doc.rsfprog('sfshstack','user/kregimbal/Mshstack.c','''Shaping stack. ''')
sfshstack.par('velocity',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfshstack.par('offset',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfshstack.par('half',rsf.doc.rsfpar('bool','y','','''if y, the second axis is half-offset instead of full offset '''))
sfshstack.par('slowness',rsf.doc.rsfpar('bool','n','','''if y, use slowness instead of velocity '''))
sfshstack.par('h0',rsf.doc.rsfpar('float','0.','','''reference offset '''))
sfshstack.par('eps',rsf.doc.rsfpar('float','0.01','','''stretch regularization '''))
sfshstack.par('jump',rsf.doc.rsfpar('int','1','','''subsampling '''))
sfshstack.par('niter',rsf.doc.rsfpar('int','10','','''number of iterations '''))
sfshstack.par('restart',rsf.doc.rsfpar('int','niter','','''GMRES memory '''))
sfshstack.par('tol',rsf.doc.rsfpar('float','1e-5','','''GMRES tolerance '''))
sfshstack.par('flo',rsf.doc.rsfpar('float','','','''Low frequency in band, default is 0 '''))
sfshstack.par('fhi',rsf.doc.rsfpar('float','','','''High frequency in band, default is Nyquist '''))
sfshstack.par('nplo',rsf.doc.rsfpar('int','6','','''number of poles for low cutoff '''))
sfshstack.par('nphi',rsf.doc.rsfpar('int','6','','''number of poles for high cutoff '''))
sfshstack.par('offset',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfshstack.version('2.1-git')
sfshstack.synopsis('''sfshstack < cmp.rsf velocity=velocity.rsf > stack.rsf offset=offset.rsf half=y slowness=n h0=0. eps=0.01 jump=1 niter=10 restart=niter tol=1e-5 flo= fhi= nplo=6 nphi=6''','''''')
rsf.doc.progs['sfshstack']=sfshstack

