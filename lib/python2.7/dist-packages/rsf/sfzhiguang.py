import rsf.doc

sfctscigadj = rsf.doc.rsfprog('sfctscigadj','user/zhiguang/Mctscigadj.c','''Correcting time-shift gathers and its adjoint ''')
sfctscigadj.par('Fdertau',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfctscigadj.par('Fder0',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfctscigadj.par('velocity',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfctscigadj.par('adj',rsf.doc.rsfpar('bool','y','',''''''))
sfctscigadj.par('dt',rsf.doc.rsfpar('float','0.001','',''''''))
sfctscigadj.par('pad',rsf.doc.rsfpar('int','100','','''files '''))
sfctscigadj.version('2.1-git')
sfctscigadj.synopsis('''sfctscigadj < Ftg.rsf Fdertau=Fdertau.rsf > Fcg.rsf Fder0=Fder0.rsf velocity=Fvel.rsf adj=y dt=0.001 pad=100''','''''')
rsf.doc.progs['sfctscigadj']=sfctscigadj

sfctscigder = rsf.doc.rsfprog('sfctscigder','user/zhiguang/Mctscigder.c','''Get the derivative of time-shift gathers ''')
sfctscigder.par('velocity',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfctscigder.par('dt',rsf.doc.rsfpar('float','0.001','',''''''))
sfctscigder.par('pad',rsf.doc.rsfpar('int','30','',''''''))
sfctscigder.version('2.1-git')
sfctscigder.synopsis('''sfctscigder < Ftg.rsf > Fder.rsf velocity=Fvel.rsf dt=0.001 pad=30''','''''')
rsf.doc.progs['sfctscigder']=sfctscigder

sfctshift = rsf.doc.rsfprog('sfctshift','user/zhiguang/Mctshift.c','''Correct time-shift gathers ''')
sfctshift.par('velocity',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfctshift.par('dt',rsf.doc.rsfpar('float','0.001','',''''''))
sfctshift.par('pad',rsf.doc.rsfpar('int','30','',''''''))
sfctshift.version('2.1-git')
sfctshift.synopsis('''sfctshift < tgather.rsf > cgather.rsf velocity=vel.rsf dt=0.001 pad=30''','''''')
rsf.doc.progs['sfctshift']=sfctshift

sffftfwi_sparse_2d = rsf.doc.rsfprog('sffftfwi_sparse_2d','user/zhiguang/Mfftfwi_sparse_2d.c','''2D frequency domain full waveform inversion with sparsity regularization. ''')
sffftfwi_sparse_2d.par('receiver',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftfwi_sparse_2d.par('source',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftfwi_sparse_2d.par('record',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftfwi_sparse_2d.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftfwi_sparse_2d.par('vout',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffftfwi_sparse_2d.par('misfit',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffftfwi_sparse_2d.par('sparsity',rsf.doc.rsfpar('bool','y','','''if true, sparsity constriant; if false, normal FWI '''))
sffftfwi_sparse_2d.par('niter',rsf.doc.rsfpar('int','10','','''number of iteration '''))
sffftfwi_sparse_2d.par('npml',rsf.doc.rsfpar('int','20','','''PML width '''))
sffftfwi_sparse_2d.par('par',rsf.doc.rsfpar('int','1','','''seislet transform accuracy order '''))
sffftfwi_sparse_2d.par('pclip',rsf.doc.rsfpar('float','8.','','''soft thresholding parameter '''))
sffftfwi_sparse_2d.par('uts',rsf.doc.rsfpar('int','0','',''''''))
sffftfwi_sparse_2d.par('order',rsf.doc.rsfpar('string ',desc='''discretization scheme (default optimal 9-point) '''))
sffftfwi_sparse_2d.par('type',rsf.doc.rsfpar('string ',desc='''[haar,linear,biorthogonal] wavelet type, the default is biorthogonal '''))
sffftfwi_sparse_2d.par('receiver',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sffftfwi_sparse_2d.par('source',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sffftfwi_sparse_2d.par('record',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sffftfwi_sparse_2d.par('dip',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sffftfwi_sparse_2d.par('vout',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sffftfwi_sparse_2d.par('misfit',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sffftfwi_sparse_2d.version('2.1-git')
sffftfwi_sparse_2d.synopsis('''sffftfwi_sparse_2d < in.rsf > out.rsf receiver=receiver.rsf source=source.rsf record=record.rsf dip=dip.rsf vout=vout.rsf misfit=misfit.rsf sparsity=y niter=10 npml=20 par=1 pclip=8. uts=0 order= type=''','''''')
rsf.doc.progs['sffftfwi_sparse_2d']=sffftfwi_sparse_2d

sfpad2 = rsf.doc.rsfprog('sfpad2','user/zhiguang/Mpad2.c','''Pad boundary ''')
sfpad2.par('top',rsf.doc.rsfpar('int','0','',''''''))
sfpad2.par('bottom',rsf.doc.rsfpar('int','0','',''''''))
sfpad2.par('left',rsf.doc.rsfpar('int','0','',''''''))
sfpad2.par('right',rsf.doc.rsfpar('int','0','',''''''))
sfpad2.version('2.1-git')
sfpad2.synopsis('''sfpad2 < Fin.rsf > Fout.rsf top=0 bottom=0 left=0 right=0''','''''')
rsf.doc.progs['sfpad2']=sfpad2

sfpadzero = rsf.doc.rsfprog('sfpadzero','user/zhiguang/Mpadzero.c','''Interpolation from a coarser grid to finer grid with zero padded ''')
sfpadzero.par('scalex',rsf.doc.rsfpar('int','','',''''''))
sfpadzero.par('scalez',rsf.doc.rsfpar('int','','',''''''))
sfpadzero.version('2.1-git')
sfpadzero.synopsis('''sfpadzero < in.rsf > out.rsf scalex= scalez=''','''''')
rsf.doc.progs['sfpadzero']=sfpadzero

sfpostrtm2d = rsf.doc.rsfprog('sfpostrtm2d','user/zhiguang/Mpostrtm2d.c','''2-D exploding-reflector RTM and its adjoint ''')
sfpostrtm2d.par('velocity',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpostrtm2d.par('wave',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpostrtm2d.par('adj',rsf.doc.rsfpar('bool','y','','''adjoint flag, 0: modeling, 1: migration '''))
sfpostrtm2d.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshot flag '''))
sfpostrtm2d.par('n0',rsf.doc.rsfpar('int','0','','''surface '''))
sfpostrtm2d.par('jt',rsf.doc.rsfpar('int','50','','''time interval of wavefield snapshot '''))
sfpostrtm2d.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfpostrtm2d.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfpostrtm2d.par('padx',rsf.doc.rsfpar('int','nz/2','',''''''))
sfpostrtm2d.par('padz',rsf.doc.rsfpar('int','nz/2','',''''''))
sfpostrtm2d.version('2.1-git')
sfpostrtm2d.synopsis('''sfpostrtm2d < in.rsf > out.rsf velocity=vel.rsf wave=wave.rsf adj=y snap=n n0=0 jt=50 nt= dt= padx=nz/2 padz=nz/2''','''''')
rsf.doc.progs['sfpostrtm2d']=sfpostrtm2d

sfsgfdewe2d = rsf.doc.rsfprog('sfsgfdewe2d','user/zhiguang/Msgfdewe2d.c','''2-D staggered-grid elastic time-domain FD modeling ''')
sfsgfdewe2d.par('datax',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsgfdewe2d.par('dataz',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfsgfdewe2d.par('vp',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgfdewe2d.par('vs',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgfdewe2d.par('rho',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfsgfdewe2d.par('nshot',rsf.doc.rsfpar('int','1','','''number of shots '''))
sfsgfdewe2d.par('dshot',rsf.doc.rsfpar('int','1','','''shot interval, multiple of receiver intervals '''))
sfsgfdewe2d.par('nx',rsf.doc.rsfpar('int','nvx','','''coverage area for each shot '''))
sfsgfdewe2d.par('nabs',rsf.doc.rsfpar('int','50','','''width of padded boundary '''))
sfsgfdewe2d.par('sx_ini',rsf.doc.rsfpar('int','','','''horizontal position of shot point '''))
sfsgfdewe2d.par('sz_ini',rsf.doc.rsfpar('int','5','','''vertical position of shot point '''))
sfsgfdewe2d.par('hsz',rsf.doc.rsfpar('int','5','','''vertical position of recerivers '''))
sfsgfdewe2d.par('tmax',rsf.doc.rsfpar('float','','','''record length '''))
sfsgfdewe2d.par('dt',rsf.doc.rsfpar('float','','','''time interval '''))
sfsgfdewe2d.par('peak',rsf.doc.rsfpar('float','20','','''peak frequency for Ricker wavelet (in Hz) '''))
sfsgfdewe2d.version('2.1-git')
sfsgfdewe2d.synopsis('''sfsgfdewe2d datax=dataxf.rsf dataz=datazf.rsf vp=vpf.rsf vs=vsf.rsf rho=rhof.rsf nshot=1 dshot=1 nx=nvx nabs=50 sx_ini= sz_ini=5 hsz=5 tmax= dt= peak=20''','''
10th order in space, 2th order in time. 
''')
rsf.doc.progs['sfsgfdewe2d']=sfsgfdewe2d

sfupsamp1 = rsf.doc.rsfprog('sfupsamp1','user/zhiguang/Mupsamp1.c','''1-D linear interpolation ''')
sfupsamp1.par('scale',rsf.doc.rsfpar('int','','',''''''))
sfupsamp1.version('2.1-git')
sfupsamp1.synopsis('''sfupsamp1 < in.rsf > out.rsf scale=''','''''')
rsf.doc.progs['sfupsamp1']=sfupsamp1

sffwiupdate = rsf.doc.rsfprog('sffwiupdate','user/zhiguang/Mfwiupdate.c','''Update model with search direction and step length in FWI''')
sffwiupdate.par('direction',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffwiupdate.par('alpha',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffwiupdate.par('alpha0',rsf.doc.rsfpar('float','','',''''''))
sffwiupdate.par('max',rsf.doc.rsfpar('float','0.','','''if max=0, no normalization; if max!=0, normalization by alpha*max/dmax '''))
sffwiupdate.par('alpha',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sffwiupdate.version('2.1-git')
sffwiupdate.synopsis('''sffwiupdate < in.rsf > out.rsf direction=dir.rsf alpha=alpha.rsf alpha0= max=0.''','''''')
rsf.doc.progs['sffwiupdate']=sffwiupdate

sffwidir = rsf.doc.rsfprog('sffwidir','user/zhiguang/Mfwidir.c','''Update the conjugate direction in full waveform inversion ''')
sffwidir.par('grad0',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffwidir.par('grad1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffwidir.par('beta',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffwidir.par('option',rsf.doc.rsfpar('string ',desc='''CG update parameter (Polak, Fletcher-Reeves, Fletcher, Dai-Yuan) '''))
sffwidir.par('beta',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sffwidir.version('2.1-git')
sffwidir.synopsis('''sffwidir < in.rsf > out.rsf grad0=grad0.rsf grad1=grad1.rsf beta=beta.rsf option=''','''''')
rsf.doc.progs['sffwidir']=sffwidir

sffwipe = rsf.doc.rsfprog('sffwipe','user/zhiguang/Mfwipe.c','''Phase encoding ''')
sffwipe.par('oldrec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffwipe.par('newrec',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffwipe.par('encoding',rsf.doc.rsfpar('bool','y','',''''''))
sffwipe.par('nsim',rsf.doc.rsfpar('int','ns','',''''''))
sffwipe.par('nsource',rsf.doc.rsfpar('int','1','','''check '''))
sffwipe.par('seed',rsf.doc.rsfpar('int','time(NULL)','',''''''))
sffwipe.version('2.1-git')
sffwipe.synopsis('''sffwipe < in.rsf > out.rsf oldrec=oldrec.rsf newrec=newrec.rsf encoding=y nsim=ns nsource=1 seed=time(NULL)''','''''')
rsf.doc.progs['sffwipe']=sffwipe

sffwigrad = rsf.doc.rsfprog('sffwigrad','user/zhiguang/Mfwigrad.c','''2D Gradient Calculation in Full Waveform Inversion ''')
sffwigrad.par('misfit',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffwigrad.par('source',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffwigrad.par('receiver',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffwigrad.par('record',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffwigrad.par('npml',rsf.doc.rsfpar('int','20','',''''''))
sffwigrad.par('omega',rsf.doc.rsfpar('float','','',''''''))
sffwigrad.par('order',rsf.doc.rsfpar('string ',desc='''discretization scheme (default optimal 9-point) '''))
sffwigrad.version('2.1-git')
sffwigrad.synopsis('''sffwigrad < in.rsf > out.rsf misfit=misfit.rsf source=source.rsf receiver=receiver.rsf record=record.rsf npml=20 omega= order=''','''''')
rsf.doc.progs['sffwigrad']=sffwigrad

sffwiobj = rsf.doc.rsfprog('sffwiobj','user/zhiguang/Mfwiobj.c','''Calculate the misfit fuction  in Full Waveform Inversion ''')
sffwiobj.par('source',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffwiobj.par('receiver',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffwiobj.par('record',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffwiobj.par('npml',rsf.doc.rsfpar('int','20','',''''''))
sffwiobj.par('omega',rsf.doc.rsfpar('float','','',''''''))
sffwiobj.par('order',rsf.doc.rsfpar('string ',desc='''discretization scheme (default optimal 9-point) '''))
sffwiobj.version('2.1-git')
sffwiobj.synopsis('''sffwiobj < in.rsf > out.rsf source=source.rsf receiver=receiver.rsf record=record.rsf npml=20 omega= order=''','''''')
rsf.doc.progs['sffwiobj']=sffwiobj

sfdzest2d = rsf.doc.rsfprog('sfdzest2d','user/zhiguang/Mdzest2d.c','''Estimation of depth-delay of common-image gathers ''')
sfdzest2d.par('Fp',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfdzest2d.par('adj',rsf.doc.rsfpar('bool','n','','''if adj=y, adjoint operator '''))
sfdzest2d.par('inv',rsf.doc.rsfpar('bool','n','','''if inv=y, perform inversion '''))
sfdzest2d.par('shape',rsf.doc.rsfpar('bool','n','','''if shape=y, use projection method '''))
sfdzest2d.par('niter',rsf.doc.rsfpar('int','100','','''number of iterations '''))
sfdzest2d.par('eps1',rsf.doc.rsfpar('float','0.','','''shaping regularization parameter '''))
sfdzest2d.par('rect1',rsf.doc.rsfpar('int','3','','''shaping smoothing parameter in 1st axis '''))
sfdzest2d.par('rect2',rsf.doc.rsfpar('int','3','','''shaping smoothing parameter in 2nd axis '''))
sfdzest2d.par('seed',rsf.doc.rsfpar('int','0','','''index of reference trace '''))
sfdzest2d.par('eps2',rsf.doc.rsfpar('float','1e3','','''regularization parameter in model constraint '''))
sfdzest2d.version('2.1-git')
sfdzest2d.synopsis('''sfdzest2d Fp=Fp.rsf < Fnp.rsf > Fs.rsf adj=n inv=n shape=n niter=100 eps1=0. rect1=3 rect2=3 seed=0 eps2=1e3''','''''')
rsf.doc.progs['sfdzest2d']=sfdzest2d

sfpickmaxima = rsf.doc.rsfprog('sfpickmaxima','user/zhiguang/Mpickmaxima.c','''Picking local maxima on the first axis with evenly spaced windows. ''')
sfpickmaxima.par('semblance',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpickmaxima.par('npicks',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpickmaxima.par('min',rsf.doc.rsfpar('float','o1','','''minimum value of time '''))
sfpickmaxima.par('max',rsf.doc.rsfpar('float','o1+(n1-1)*d1','','''maximum value of time '''))
sfpickmaxima.par('np',rsf.doc.rsfpar('int','n1','','''maximum number of picks '''))
sfpickmaxima.par('nw',rsf.doc.rsfpar('int','1','','''number of windows '''))
sfpickmaxima.par('space',rsf.doc.rsfpar('float','100.','','''minimum distance bewteen picked events '''))
sfpickmaxima.par('parab',rsf.doc.rsfpar('bool','n','','''if y, parabolic interpolation '''))
sfpickmaxima.par('removal',rsf.doc.rsfpar('bool','y','','''if y, remove adjacent events based on semblance '''))
sfpickmaxima.version('2.1-git')
sfpickmaxima.synopsis('''sfpickmaxima < in.rsf > out.rsf semblance=semblance.rsf npicks=npicks.rsf min=o1 max=o1+(n1-1)*d1 np=n1 nw=1 space=100. parab=n removal=y''','''''')
rsf.doc.progs['sfpickmaxima']=sfpickmaxima

sfpickprint = rsf.doc.rsfprog('sfpickprint','user/zhiguang/Mpickprint.c','''Write predictive painting result into a txt file ''')
sfpickprint.par('pick',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpickprint.par('npick',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpickprint.par('semblance',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpickprint.par('verb',rsf.doc.rsfpar('bool','y','','''if y, print icdp/ncdp during operation '''))
sfpickprint.par('cut',rsf.doc.rsfpar('float','0.','','''muting value in boundary '''))
sfpickprint.version('2.1-git')
sfpickprint.synopsis('''sfpickprint < in.rsf pick=pick.rsf npick=npick.rsf semblance=semblance.rsf verb=y cut=0.''','''''')
rsf.doc.progs['sfpickprint']=sfpickprint

sfaddimag = rsf.doc.rsfprog('sfaddimag','user/zhiguang/Maddimag.c','''Convert large-size (with n3=) real data to complex (by adding zero imaginary part) ''')
sfaddimag.version('2.1-git')
sfaddimag.synopsis('''sfaddimag < in.rsf > out.rsf''','''''')
rsf.doc.progs['sfaddimag']=sfaddimag

sflsLU = rsf.doc.rsfprog('sflsLU','user/zhiguang/MlsLU.c','''Local similarity filter (direct solving) ''')
sflsLU.par('obs',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflsLU.par('adj1',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflsLU.par('adj2',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflsLU.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity flag '''))
sflsLU.par('shift',rsf.doc.rsfpar('bool','n','','''use shift instead of stretch '''))
sflsLU.par('adjsrc',rsf.doc.rsfpar('bool','n','','''use shift instead of stretch '''))
sflsLU.par('rect1',rsf.doc.rsfpar('int','50','','''smoothing along first axis '''))
sflsLU.par('nw',rsf.doc.rsfpar('int','','','''number of omega values '''))
sflsLU.par('dw',rsf.doc.rsfpar('float','','','''omega sampling '''))
sflsLU.par('w0',rsf.doc.rsfpar('float','','','''omega origin '''))
sflsLU.version('2.1-git')
sflsLU.synopsis('''sflsLU obs=dat.rsf < mat.rsf > flt.rsf adj1=adj1.rsf adj2=adj2.rsf verb=y shift=n adjsrc=n rect1=50 nw= dw= w0=''','''''')
rsf.doc.progs['sflsLU']=sflsLU

sfbrfault = rsf.doc.rsfprog('sfbrfault','user/zhiguang/Mbrfault.c','''Bridge fault zones with smooth transition ''')
sfbrfault.par('slip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfbrfault.par('shift',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfbrfault.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfbrfault.par('replace',rsf.doc.rsfpar('bool','n','',''''''))
sfbrfault.par('mode',rsf.doc.rsfpar('bool','y','',''''''))
sfbrfault.par('width',rsf.doc.rsfpar('int','9','',''''''))
sfbrfault.par('order',rsf.doc.rsfpar('int','1','',''''''))
sfbrfault.version('2.1-git')
sfbrfault.synopsis('''sfbrfault < in.rsf slip=slip.rsf > out.rsf shift=shift.rsf mask=mask.rsf replace=n mode=y width=9 order=1''','''''')
rsf.doc.progs['sfbrfault']=sfbrfault

sfpadfault = rsf.doc.rsfprog('sfpadfault','user/zhiguang/Mpadfault.c','''Horizontally pad fault  ''')
sfpadfault.par('slip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpadfault.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpadfault.par('bound',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpadfault.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpadfault.par('shift',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpadfault.par('newdip',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpadfault.par('ppbig',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpadfault.par('extend',rsf.doc.rsfpar('bool','y','',''''''))
sfpadfault.par('mode',rsf.doc.rsfpar('bool','y','',''''''))
sfpadfault.par('conf',rsf.doc.rsfpar('int','1','',''''''))
sfpadfault.par('order',rsf.doc.rsfpar('int','2','',''''''))
sfpadfault.version('2.1-git')
sfpadfault.synopsis('''sfpadfault < in.rsf slip=slip.rsf > out.rsf mask=mask.rsf bound=bound.rsf dip=dip.rsf shift=shift.rsf newdip=newdip.rsf ppbig=ppbig.rsf extend=y mode=y conf=1 order=2''','''''')
rsf.doc.progs['sfpadfault']=sfpadfault

sfunfault = rsf.doc.rsfprog('sfunfault','user/zhiguang/Munfault.c','''Unfault image ''')
sfunfault.par('slip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfunfault.par('shift',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfunfault.par('dip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfunfault.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfunfault.par('inv',rsf.doc.rsfpar('bool','n','',''''''))
sfunfault.par('mode',rsf.doc.rsfpar('bool','y','',''''''))
sfunfault.par('niter',rsf.doc.rsfpar('int','100','','''number of iterations '''))
sfunfault.par('off',rsf.doc.rsfpar('int','2','','''offset to fault '''))
sfunfault.par('lam',rsf.doc.rsfpar('float','1','','''regularization '''))
sfunfault.version('2.1-git')
sfunfault.synopsis('''sfunfault < in.rsf slip=slip.rsf > out.rsf shift=shift.rsf dip=dip.rsf mask=mask.rsf inv=n mode=y niter=100 off=2 lam=1''','''''')
rsf.doc.progs['sfunfault']=sfunfault

sfmpifdlsrtm = rsf.doc.rsfprog('sfmpifdlsrtm','user/zhiguang/Mmpifdlsrtm.c','''2-D prestack reverse time migration and its adjoint with MPI for full coverage''')
sfmpifdlsrtm.par('input',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpifdlsrtm.par('velocity',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpifdlsrtm.par('wavelet',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpifdlsrtm.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpifdlsrtm.par('snapshot',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpifdlsrtm.par('adj',rsf.doc.rsfpar('bool','y','',''''''))
sfmpifdlsrtm.par('verb',rsf.doc.rsfpar('bool','n','',''''''))
sfmpifdlsrtm.par('snap',rsf.doc.rsfpar('bool','n','',''''''))
sfmpifdlsrtm.par('nr',rsf.doc.rsfpar('int','','',''''''))
sfmpifdlsrtm.par('dr',rsf.doc.rsfpar('float','','',''''''))
sfmpifdlsrtm.par('r0',rsf.doc.rsfpar('float','','',''''''))
sfmpifdlsrtm.par('ns',rsf.doc.rsfpar('int','','',''''''))
sfmpifdlsrtm.par('ds',rsf.doc.rsfpar('float','','',''''''))
sfmpifdlsrtm.par('s0',rsf.doc.rsfpar('float','','',''''''))
sfmpifdlsrtm.par('zr',rsf.doc.rsfpar('float','0.0','',''''''))
sfmpifdlsrtm.par('zs',rsf.doc.rsfpar('float','0.0','',''''''))
sfmpifdlsrtm.par('jt',rsf.doc.rsfpar('int','100','',''''''))
sfmpifdlsrtm.par('padz',rsf.doc.rsfpar('int','nz','',''''''))
sfmpifdlsrtm.par('padx',rsf.doc.rsfpar('int','nz','',''''''))
sfmpifdlsrtm.version('2.1-git')
sfmpifdlsrtm.synopsis('''sfmpifdlsrtm input=in.rsf velocity=vel.rsf wavelet=wavelet.rsf output=out.rsf snapshot=snapshot.rsf adj=y verb=n snap=n nr= dr= r0= ns= ds= s0= zr=0.0 zs=0.0 jt=100 padz=nz padx=nz''','''''')
rsf.doc.progs['sfmpifdlsrtm']=sfmpifdlsrtm

sfmpilrrtm = rsf.doc.rsfprog('sfmpilrrtm','user/zhiguang/Mmpilrrtm.c','''2-D Low-rank One-step Reverse-Time-Migration (simultaneous sources data and incomplete data) ''')
sfmpilrrtm.par('src',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilrrtm.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpilrrtm.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilrrtm.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilrrtm.par('leftb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilrrtm.par('rightb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilrrtm.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilrrtm.par('tmpwf',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpilrrtm.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilrrtm.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity'''))
sfmpilrrtm.par('adj',rsf.doc.rsfpar('bool','y','','''migration'''))
sfmpilrrtm.par('wantwf',rsf.doc.rsfpar('bool','n','','''output forward and backward wavefield'''))
sfmpilrrtm.par('wantrecord',rsf.doc.rsfpar('bool','y','','''if n, using record data generated by this program '''))
sfmpilrrtm.par('illum',rsf.doc.rsfpar('bool','n','','''if n, no source illumination applied '''))
sfmpilrrtm.par('roll',rsf.doc.rsfpar('bool','y','','''if n, receiver is independent of source location and gpl=nx'''))
sfmpilrrtm.par('fm',rsf.doc.rsfpar('bool','n','','''if n, Born modelling  '''))
sfmpilrrtm.par('incom',rsf.doc.rsfpar('bool','n','','''if n, use complete data '''))
sfmpilrrtm.par('shtbgn',rsf.doc.rsfpar('int','','',''''''))
sfmpilrrtm.par('sht0',rsf.doc.rsfpar('int','shtbgn','','''actual shot origin on grid'''))
sfmpilrrtm.par('shtend',rsf.doc.rsfpar('int','','',''''''))
sfmpilrrtm.par('shtint',rsf.doc.rsfpar('int','','',''''''))
sfmpilrrtm.par('spz',rsf.doc.rsfpar('int','','',''''''))
sfmpilrrtm.par('gpz',rsf.doc.rsfpar('int','','',''''''))
sfmpilrrtm.par('gpl',rsf.doc.rsfpar('int','','',''''''))
sfmpilrrtm.par('snapinter',rsf.doc.rsfpar('int','1','','''snap interval '''))
sfmpilrrtm.par('wfint',rsf.doc.rsfpar('int','50','','''snap interval '''))
sfmpilrrtm.par('srctrunc',rsf.doc.rsfpar('float','0.4','',''''''))
sfmpilrrtm.par('rectz',rsf.doc.rsfpar('int','2','',''''''))
sfmpilrrtm.par('rectx',rsf.doc.rsfpar('int','2','',''''''))
sfmpilrrtm.par('repeat',rsf.doc.rsfpar('int','2','','''abc parameters '''))
sfmpilrrtm.par('top',rsf.doc.rsfpar('int','40','',''''''))
sfmpilrrtm.par('bot',rsf.doc.rsfpar('int','40','',''''''))
sfmpilrrtm.par('lft',rsf.doc.rsfpar('int','40','',''''''))
sfmpilrrtm.par('rht',rsf.doc.rsfpar('int','40','','''simultaneous sources parameter '''))
sfmpilrrtm.par('nsource',rsf.doc.rsfpar('int','1','',''''''))
sfmpilrrtm.par('dsource',rsf.doc.rsfpar('int','0','',''''''))
sfmpilrrtm.par('tdelay',rsf.doc.rsfpar('float','0','',''''''))
sfmpilrrtm.par('choose',rsf.doc.rsfpar('int','nsource','','''Set I/O file'''))
sfmpilrrtm.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfmpilrrtm.version('2.1-git')
sfmpilrrtm.synopsis('''sfmpilrrtm src=Fsrc.rsf rec=Frcd.rsf left=left.rsf right=right.rsf leftb=leftb.rsf rightb=rightb.rsf vel=Fvel.rsf tmpwf=Ftmpwf.rsf mask=mask.rsf verb=n adj=y wantwf=n wantrecord=y illum=n roll=y fm=n incom=n shtbgn= sht0=shtbgn shtend= shtint= spz= gpz= gpl= snapinter=1 wfint=50 srctrunc=0.4 rectz=2 rectx=2 repeat=2 top=40 bot=40 lft=40 rht=40 nsource=1 dsource=0 tdelay=0 choose=nsource pad1=1''','''''')
rsf.doc.progs['sfmpilrrtm']=sfmpilrrtm

sfmpilrmodel = rsf.doc.rsfprog('sfmpilrmodel','user/zhiguang/Mmpilrmodel.c','''One-step lowrank modeling ''')
sfmpilrmodel.par('Fwfld',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpilrmodel.par('Fpadvel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilrmodel.par('wantwf',rsf.doc.rsfpar('bool','n','','''want wavefield or not '''))
sfmpilrmodel.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfmpilrmodel.par('nb',rsf.doc.rsfpar('int','','','''boundary width '''))
sfmpilrmodel.par('srctrunc',rsf.doc.rsfpar('float','0.4','','''source truncation '''))
sfmpilrmodel.par('rectx',rsf.doc.rsfpar('int','2','','''source smoothing in x-direction '''))
sfmpilrmodel.par('rectz',rsf.doc.rsfpar('int','2','','''source smoothing in z-direction '''))
sfmpilrmodel.par('repeat',rsf.doc.rsfpar('int','2','','''repeat numbers of source smoothing '''))
sfmpilrmodel.par('scalet',rsf.doc.rsfpar('int','1','','''wavefield storage interval '''))
sfmpilrmodel.par('snap',rsf.doc.rsfpar('int','100','','''wavefield output interval when wantwf=y '''))
sfmpilrmodel.par('snapshot',rsf.doc.rsfpar('int','0','','''print out the wavefield snapshots of this shot '''))
sfmpilrmodel.par('ns',rsf.doc.rsfpar('int','','','''shot number '''))
sfmpilrmodel.par('ds',rsf.doc.rsfpar('float','','','''shot interval '''))
sfmpilrmodel.par('s0',rsf.doc.rsfpar('float','','','''shot origin '''))
sfmpilrmodel.par('rnx',rsf.doc.rsfpar('int','','','''coverage area of one shot '''))
sfmpilrmodel.par('nr',rsf.doc.rsfpar('int','rnx','','''receiver number '''))
sfmpilrmodel.par('ndr',rsf.doc.rsfpar('int','1','','''receiver interval '''))
sfmpilrmodel.par('nr0',rsf.doc.rsfpar('int','0','','''receiver origin '''))
sfmpilrmodel.par('gpz',rsf.doc.rsfpar('int','','','''depth of geophone '''))
sfmpilrmodel.par('spx',rsf.doc.rsfpar('int','','','''horizontal location of source '''))
sfmpilrmodel.par('spz',rsf.doc.rsfpar('int','','','''depth of source '''))
sfmpilrmodel.par('path1',rsf.doc.rsfpar('string ',desc='''path of left matrices './mat/left' '''))
sfmpilrmodel.par('path2',rsf.doc.rsfpar('string ',desc='''path of right matrices './mat/left' '''))
sfmpilrmodel.version('2.1-git')
sfmpilrmodel.synopsis('''sfmpilrmodel Fwfld=Fwfld.rsf Fpadvel=Fvel.rsf wantwf=n pad1=1 nb= srctrunc=0.4 rectx=2 rectz=2 repeat=2 scalet=1 snap=100 snapshot=0 ns= ds= s0= rnx= nr=rnx ndr=1 nr0=0 gpz= spx= spz= path1= path2=''','''''')
rsf.doc.progs['sfmpilrmodel']=sfmpilrmodel

sfmpilrrtm_ts = rsf.doc.rsfprog('sfmpilrrtm_ts','user/zhiguang/Mmpilrrtm_ts.c','''One-step lowrank RTM with time-shift imaging condition ''')
sfmpilrrtm_ts.par('Fimg2',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpilrrtm_ts.par('Fsrc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilrrtm_ts.par('Fpadvel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilrrtm_ts.par('Ffwf',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpilrrtm_ts.par('Fbwf',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpilrrtm_ts.par('taper',rsf.doc.rsfpar('int','0','','''if not 0, tapering in the frequency domain '''))
sfmpilrrtm_ts.par('thresh',rsf.doc.rsfpar('float','0.92','','''tapering threshold '''))
sfmpilrrtm_ts.par('wantwf',rsf.doc.rsfpar('bool','n','','''if true, output wavefield of a certain (snapshot=) shot '''))
sfmpilrrtm_ts.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfmpilrrtm_ts.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfmpilrrtm_ts.par('nb',rsf.doc.rsfpar('int','','','''padded boundary width '''))
sfmpilrrtm_ts.par('srctrunc',rsf.doc.rsfpar('float','0.4','','''source truncation '''))
sfmpilrrtm_ts.par('rectx',rsf.doc.rsfpar('int','2','','''source smoothing in x-direction '''))
sfmpilrrtm_ts.par('rectz',rsf.doc.rsfpar('int','2','','''source smoothing in z-direction '''))
sfmpilrrtm_ts.par('repeat',rsf.doc.rsfpar('int','2','','''repeat numbers of source smoothing '''))
sfmpilrrtm_ts.par('scalet',rsf.doc.rsfpar('int','1','','''wavefield storage interval '''))
sfmpilrrtm_ts.par('snap',rsf.doc.rsfpar('int','100','','''wavefield output interval when wantwf=y '''))
sfmpilrrtm_ts.par('snapshot',rsf.doc.rsfpar('int','0','','''print out the wavefield snapshots of this shot '''))
sfmpilrrtm_ts.par('nds',rsf.doc.rsfpar('int','','','''source interval in number of dx '''))
sfmpilrrtm_ts.par('gpz',rsf.doc.rsfpar('int','','','''depth of geophone '''))
sfmpilrrtm_ts.par('spx',rsf.doc.rsfpar('int','','','''horizontal location of source '''))
sfmpilrrtm_ts.par('spz',rsf.doc.rsfpar('int','','','''depth of source '''))
sfmpilrrtm_ts.par('rnx',rsf.doc.rsfpar('int','','','''coverage area of one shot '''))
sfmpilrrtm_ts.par('ndr',rsf.doc.rsfpar('int','1','','''receiver interval '''))
sfmpilrrtm_ts.par('nr0',rsf.doc.rsfpar('int','0','','''receiver starting point in rnx '''))
sfmpilrrtm_ts.par('ntau',rsf.doc.rsfpar('int','','','''number of time-shift '''))
sfmpilrrtm_ts.par('dtau',rsf.doc.rsfpar('float','','','''interval of time-shift '''))
sfmpilrrtm_ts.par('tau0',rsf.doc.rsfpar('float','','','''origin of time-shift '''))
sfmpilrrtm_ts.par('ncut',rsf.doc.rsfpar('int','0','','''number of cutting samples for generating non-negative source wavelet '''))
sfmpilrrtm_ts.par('path1',rsf.doc.rsfpar('string ',desc='''path of left matrices './mat/left' '''))
sfmpilrrtm_ts.par('path2',rsf.doc.rsfpar('string ',desc='''path of right matrices './mat/left' '''))
sfmpilrrtm_ts.version('2.1-git')
sfmpilrrtm_ts.synopsis('''sfmpilrrtm_ts Fimg2=Fimg2.rsf Fsrc=Fsrc.rsf Fpadvel=Fvel.rsf Ffwf=Ffwf.rsf Fbwf=Fbwf.rsf taper=0 thresh=0.92 wantwf=n verb=n pad1=1 nb= srctrunc=0.4 rectx=2 rectz=2 repeat=2 scalet=1 snap=100 snapshot=0 nds= gpz= spx= spz= rnx= ndr=1 nr0=0 ntau= dtau= tau0= ncut=0 path1= path2=''','''''')
rsf.doc.progs['sfmpilrrtm_ts']=sfmpilrrtm_ts

sfmpiprertm2d = rsf.doc.rsfprog('sfmpiprertm2d','user/zhiguang/Mmpiprertm2d.c','''2-D prestack reverse-time migration and its adjoint with MPI ''')
sfmpiprertm2d.par('input',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiprertm2d.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiprertm2d.par('velocity',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiprertm2d.par('wavelet',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiprertm2d.par('snapshot',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiprertm2d.par('adj',rsf.doc.rsfpar('bool','y','',''''''))
sfmpiprertm2d.par('verb',rsf.doc.rsfpar('bool','n','',''''''))
sfmpiprertm2d.par('snap',rsf.doc.rsfpar('bool','n','',''''''))
sfmpiprertm2d.par('nr',rsf.doc.rsfpar('int','','',''''''))
sfmpiprertm2d.par('dr',rsf.doc.rsfpar('float','','',''''''))
sfmpiprertm2d.par('r0',rsf.doc.rsfpar('float','','',''''''))
sfmpiprertm2d.par('ns',rsf.doc.rsfpar('int','','',''''''))
sfmpiprertm2d.par('ds',rsf.doc.rsfpar('float','','',''''''))
sfmpiprertm2d.par('s0',rsf.doc.rsfpar('float','','',''''''))
sfmpiprertm2d.par('zr',rsf.doc.rsfpar('float','0.0','',''''''))
sfmpiprertm2d.par('zs',rsf.doc.rsfpar('float','0.0','',''''''))
sfmpiprertm2d.par('jt',rsf.doc.rsfpar('int','100','',''''''))
sfmpiprertm2d.par('nx',rsf.doc.rsfpar('int','','',''''''))
sfmpiprertm2d.par('padz',rsf.doc.rsfpar('int','','',''''''))
sfmpiprertm2d.par('padx',rsf.doc.rsfpar('int','','',''''''))
sfmpiprertm2d.version('2.1-git')
sfmpiprertm2d.synopsis('''sfmpiprertm2d input=in.rsf output=out.rsf velocity=vel.rsf wavelet=wavelet.rsf snapshot=snapshot.rsf adj=y verb=n snap=n nr= dr= r0= ns= ds= s0= zr=0.0 zs=0.0 jt=100 nx= padz= padx=''','''''')
rsf.doc.progs['sfmpiprertm2d']=sfmpiprertm2d

sfmpisglrrtm2 = rsf.doc.rsfprog('sfmpisglrrtm2','user/zhiguang/Mmpisglrrtm2.c','''Paralleled stagger-grid lowrank RTM modified based on sfsglfdrtm2 (serial program)''')
sfmpisglrrtm2.par('img2',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpisglrrtm2.par('fvel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpisglrrtm2.par('fden',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpisglrrtm2.par('bvel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpisglrrtm2.par('bden',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpisglrrtm2.par('record',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpisglrrtm2.par('tmpfwf',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpisglrrtm2.par('tmpbwf',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpisglrrtm2.par('Gx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpisglrrtm2.par('Gz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpisglrrtm2.par('sxx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpisglrrtm2.par('sxz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpisglrrtm2.par('szx',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpisglrrtm2.par('szz',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpisglrrtm2.par('verb',rsf.doc.rsfpar('bool','y','',''''''))
sfmpisglrrtm2.par('wantrecord',rsf.doc.rsfpar('bool','n','',''''''))
sfmpisglrrtm2.par('wantwf',rsf.doc.rsfpar('bool','n','',''''''))
sfmpisglrrtm2.par('onlyrecord',rsf.doc.rsfpar('bool','n','',''''''))
sfmpisglrrtm2.par('srcdecay',rsf.doc.rsfpar('bool','y','',''''''))
sfmpisglrrtm2.par('srcrange',rsf.doc.rsfpar('int','3','',''''''))
sfmpisglrrtm2.par('srctrunc',rsf.doc.rsfpar('float','0.2','',''''''))
sfmpisglrrtm2.par('srcalpha',rsf.doc.rsfpar('float','0.5','',''''''))
sfmpisglrrtm2.par('pmlsize',rsf.doc.rsfpar('int','30','',''''''))
sfmpisglrrtm2.par('nfd',rsf.doc.rsfpar('int','','',''''''))
sfmpisglrrtm2.par('pmld0',rsf.doc.rsfpar('float','200','',''''''))
sfmpisglrrtm2.par('shtnmb',rsf.doc.rsfpar('int','','',''''''))
sfmpisglrrtm2.par('shtinv',rsf.doc.rsfpar('int','','',''''''))
sfmpisglrrtm2.par('shtbgn',rsf.doc.rsfpar('int','0','',''''''))
sfmpisglrrtm2.par('snapturn',rsf.doc.rsfpar('int','1','',''''''))
sfmpisglrrtm2.par('ginv',rsf.doc.rsfpar('int','1','',''''''))
sfmpisglrrtm2.par('wfinv',rsf.doc.rsfpar('int','1','',''''''))
sfmpisglrrtm2.par('spz',rsf.doc.rsfpar('int','6','',''''''))
sfmpisglrrtm2.par('gp',rsf.doc.rsfpar('int','0','',''''''))
sfmpisglrrtm2.par('ntau',rsf.doc.rsfpar('int','1','',''''''))
sfmpisglrrtm2.par('dtau',rsf.doc.rsfpar('float','wfdt','',''''''))
sfmpisglrrtm2.par('tau0',rsf.doc.rsfpar('float','0','',''''''))
sfmpisglrrtm2.version('2.1-git')
sfmpisglrrtm2.synopsis('''sfmpisglrrtm2 img2=Fimg2.rsf fvel=Ffvel.rsf fden=Ffden.rsf bvel=Fbvel.rsf bden=Fbden.rsf record=Frcd.rsf tmpfwf=Ftmpfwf.rsf tmpbwf=Ftmpbwf.rsf Gx=FGx.rsf Gz=FGz.rsf sxx=Fsxx.rsf sxz=Fsxz.rsf szx=Fszx.rsf szz=Fszz.rsf verb=y wantrecord=n wantwf=n onlyrecord=n srcdecay=y srcrange=3 srctrunc=0.2 srcalpha=0.5 pmlsize=30 nfd= pmld0=200 shtnmb= shtinv= shtbgn=0 snapturn=1 ginv=1 wfinv=1 spz=6 gp=0 ntau=1 dtau=wfdt tau0=0''','''''')
rsf.doc.progs['sfmpisglrrtm2']=sfmpisglrrtm2

sfmpisfwi = rsf.doc.rsfprog('sfmpisfwi','user/zhiguang/Mmpisfwi.c','''Acoustic Forward Modeling, FWI, and RTM (FWI has the options of seislet regularization, smoothing kernels, simultaneous source, and static phase encoding) ''')
sfmpisfwi.par('Fvel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpisfwi.par('Fwavelet',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpisfwi.par('Fdip',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpisfwi.par('Fcode',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpisfwi.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpisfwi.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpisfwi.par('Ferr',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpisfwi.par('Fmod',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpisfwi.par('Fgrad',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpisfwi.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpisfwi.par('function',rsf.doc.rsfpar('int','2','','''if 1, forward modeling; if 2, FWI; if 3, RTM '''))
sfmpisfwi.par('seislet',rsf.doc.rsfpar('int','0','','''if 0, no seislet regularization; if 1, seislet regularization '''))
sfmpisfwi.par('encode',rsf.doc.rsfpar('int','0','','''if 0, no phase encoding; if 1, phase encoding '''))
sfmpisfwi.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfmpisfwi.par('nb',rsf.doc.rsfpar('int','100','','''boundary width '''))
sfmpisfwi.par('coef',rsf.doc.rsfpar('float','0.002','','''absorbing boundary coefficient '''))
sfmpisfwi.par('acqui_type',rsf.doc.rsfpar('int','1','','''if 1, fixed acquisition; if 2, marine acquisition; if 3, symmetric acquisition '''))
sfmpisfwi.par('ns',rsf.doc.rsfpar('int','','','''shot number '''))
sfmpisfwi.par('ds',rsf.doc.rsfpar('float','','','''shot interval '''))
sfmpisfwi.par('s0',rsf.doc.rsfpar('float','','','''shot origin '''))
sfmpisfwi.par('sz',rsf.doc.rsfpar('int','5','','''source depth '''))
sfmpisfwi.par('nr',rsf.doc.rsfpar('int','acpar->nx','','''number of receiver '''))
sfmpisfwi.par('dr',rsf.doc.rsfpar('float','acpar->dx','','''receiver interval '''))
sfmpisfwi.par('r0',rsf.doc.rsfpar('float','acpar->x0','','''receiver origin '''))
sfmpisfwi.par('rz',rsf.doc.rsfpar('int','5','','''receiver depth '''))
sfmpisfwi.par('interval',rsf.doc.rsfpar('int','1','','''wavefield storing interval '''))
sfmpisfwi.par('fhi',rsf.doc.rsfpar('float','0.5/acpar->dt','','''high frequency in band, default is Nyquist '''))
sfmpisfwi.par('flo',rsf.doc.rsfpar('float','0.','','''low frequency in band, default is zero '''))
sfmpisfwi.par('frectx',rsf.doc.rsfpar('int','2','','''source smoothing in x '''))
sfmpisfwi.par('frectz',rsf.doc.rsfpar('int','2','','''source smoothing in z '''))
sfmpisfwi.par('nsource',rsf.doc.rsfpar('int','1','','''number of sources in a supershot '''))
sfmpisfwi.par('dsource',rsf.doc.rsfpar('int','0','','''interval of sources in a supershot '''))
sfmpisfwi.par('pclip',rsf.doc.rsfpar('float','15','','''soft thresholding parameter '''))
sfmpisfwi.par('order',rsf.doc.rsfpar('int','1','','''accuracy order of seislet transform '''))
sfmpisfwi.par('eps',rsf.doc.rsfpar('float','0.1','','''seislet regularization parameter '''))
sfmpisfwi.par('onlygrad',rsf.doc.rsfpar('bool','n','','''only calculate gradident or not '''))
sfmpisfwi.par('wt1',rsf.doc.rsfpar('float','acpar->t0','','''window data residual: tmin '''))
sfmpisfwi.par('wt2',rsf.doc.rsfpar('float','acpar->t0+(acpar->nt-1)*acpar->dt','','''window data residual: tmax '''))
sfmpisfwi.par('woff1',rsf.doc.rsfpar('float','acpar->r0','','''window data residual: rmin '''))
sfmpisfwi.par('woff2',rsf.doc.rsfpar('float','acpar->r0+(acpar->nr-1)*acpar->dr','','''window data residual: rmax '''))
sfmpisfwi.par('gain',rsf.doc.rsfpar('float','1','','''vertical gain power of data residual '''))
sfmpisfwi.par('waterz',rsf.doc.rsfpar('int','51','','''water layer depth '''))
sfmpisfwi.par('grectx',rsf.doc.rsfpar('int','3','','''gradient smoothing radius in x '''))
sfmpisfwi.par('grectz',rsf.doc.rsfpar('int','3','','''gradient smoothing radius in z '''))
sfmpisfwi.par('drectx',rsf.doc.rsfpar('int','1','','''smoothing kernel radius in x '''))
sfmpisfwi.par('drectz',rsf.doc.rsfpar('int','1','','''smoothing kernel radius in z '''))
sfmpisfwi.par('nrepeat',rsf.doc.rsfpar('int','1','','''smoothing kernel repeat number '''))
sfmpisfwi.par('tangent',rsf.doc.rsfpar('int','0','','''if 1, calculate prediction corrector '''))
sfmpisfwi.par('sigma1',rsf.doc.rsfpar('float','-1','','''smoothing kernel radius moving step in z '''))
sfmpisfwi.par('sigma2',rsf.doc.rsfpar('float','-1','','''smoothing kernel radius moving step in x '''))
sfmpisfwi.par('v1',rsf.doc.rsfpar('float','0.','','''lower limit of estimated velocity '''))
sfmpisfwi.par('v2',rsf.doc.rsfpar('float','10.','','''upper limit of estimated velocity '''))
sfmpisfwi.par('niter',rsf.doc.rsfpar('int','','','''iteration number '''))
sfmpisfwi.par('conv_error',rsf.doc.rsfpar('float','','','''final convergence error '''))
sfmpisfwi.par('npair',rsf.doc.rsfpar('int','20','','''number of l-BFGS pairs '''))
sfmpisfwi.par('nls',rsf.doc.rsfpar('int','20','','''line search number '''))
sfmpisfwi.par('factor',rsf.doc.rsfpar('float','10','','''step length increase factor '''))
sfmpisfwi.par('repeat',rsf.doc.rsfpar('int','5','','''after how many iterations the step length goes back to 1 '''))
sfmpisfwi.par('err_type',rsf.doc.rsfpar('int','0','','''if 0, true misfit function; if 1, both smoothing kernel and original L2 norm misfits '''))
sfmpisfwi.par('seislet_type',rsf.doc.rsfpar('string ',desc='''[haar, linear, biorthogonal] '''))
sfmpisfwi.version('2.1-git')
sfmpisfwi.synopsis('''sfmpisfwi Fvel=Fv.rsf Fwavelet=Fw.rsf Fdip=Fdip.rsf Fcode=Fcode.rsf output=Fdat.rsf output=Finv.rsf Ferr=Ferr.rsf Fmod=Fmod.rsf Fgrad=Fgrad.rsf output=Fimg.rsf function=2 seislet=0 encode=0 verb=n nb=100 coef=0.002 acqui_type=1 ns= ds= s0= sz=5 nr=acpar->nx dr=acpar->dx r0=acpar->x0 rz=5 interval=1 fhi=0.5/acpar->dt flo=0. frectx=2 frectz=2 nsource=1 dsource=0 pclip=15 order=1 eps=0.1 onlygrad=n wt1=acpar->t0 wt2=acpar->t0+(acpar->nt-1)*acpar->dt woff1=acpar->r0 woff2=acpar->r0+(acpar->nr-1)*acpar->dr gain=1 waterz=51 grectx=3 grectz=3 drectx=1 drectz=1 nrepeat=1 tangent=0 sigma1=-1 sigma2=-1 v1=0. v2=10. niter= conv_error= npair=20 nls=20 factor=10 repeat=5 err_type=0 seislet_type=''','''''')
rsf.doc.progs['sfmpisfwi']=sfmpisfwi

sfmpiqfwi = rsf.doc.rsfprog('sfmpiqfwi','user/zhiguang/Mmpiqfwi.c','''Visco-acoustic (SLS) Forward Modeling, FWI, and RTM ''')
sfmpiqfwi.par('Fvel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiqfwi.par('Fq',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiqfwi.par('Ftau',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiqfwi.par('Fwavelet',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiqfwi.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiqfwi.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiqfwi.par('Ferr',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiqfwi.par('Fgrad',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiqfwi.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiqfwi.par('function',rsf.doc.rsfpar('int','2','','''if 1, forward modeling; if 2, FWI; if 3, RTM '''))
sfmpiqfwi.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfmpiqfwi.par('f0',rsf.doc.rsfpar('float','','','''reference frequency '''))
sfmpiqfwi.par('nb',rsf.doc.rsfpar('int','100','','''boundary width '''))
sfmpiqfwi.par('coef',rsf.doc.rsfpar('float','0.002','','''absorbing boundary coefficient '''))
sfmpiqfwi.par('acqui_type',rsf.doc.rsfpar('int','1','','''if 1, fixed acquisition; if 2, marine acquisition; if 3, symmetric acquisition '''))
sfmpiqfwi.par('ns',rsf.doc.rsfpar('int','','','''shot number '''))
sfmpiqfwi.par('ds',rsf.doc.rsfpar('float','','','''shot interval '''))
sfmpiqfwi.par('s0',rsf.doc.rsfpar('float','','','''shot origin '''))
sfmpiqfwi.par('sz',rsf.doc.rsfpar('int','5','','''source depth '''))
sfmpiqfwi.par('nr',rsf.doc.rsfpar('int','acpar->nx','','''number of receiver '''))
sfmpiqfwi.par('dr',rsf.doc.rsfpar('float','acpar->dx','','''receiver interval '''))
sfmpiqfwi.par('r0',rsf.doc.rsfpar('float','acpar->x0','','''receiver origin '''))
sfmpiqfwi.par('rz',rsf.doc.rsfpar('int','5','','''receiver depth '''))
sfmpiqfwi.par('interval',rsf.doc.rsfpar('int','1','','''wavefield storing interval '''))
sfmpiqfwi.par('fhi',rsf.doc.rsfpar('float','0.5/acpar->dt','','''high frequency in band, default is Nyquist '''))
sfmpiqfwi.par('flo',rsf.doc.rsfpar('float','0.','','''low frequency in band, default is zero '''))
sfmpiqfwi.par('frectx',rsf.doc.rsfpar('int','2','','''source smoothing in x '''))
sfmpiqfwi.par('frectz',rsf.doc.rsfpar('int','2','','''source smoothing in z '''))
sfmpiqfwi.par('onlygrad',rsf.doc.rsfpar('bool','n','','''only calculate gradident or not '''))
sfmpiqfwi.par('grad_type',rsf.doc.rsfpar('int','1','','''if 1, velocity; if 2, Q; if 3, velocity and Q '''))
sfmpiqfwi.par('wt1',rsf.doc.rsfpar('float','acpar->t0','','''window data residual: tmin '''))
sfmpiqfwi.par('wt2',rsf.doc.rsfpar('float','acpar->t0+(acpar->nt-1)*acpar->dt','','''window data residual: tmax '''))
sfmpiqfwi.par('woff1',rsf.doc.rsfpar('float','acpar->r0','','''window data residual: rmin '''))
sfmpiqfwi.par('woff2',rsf.doc.rsfpar('float','acpar->r0+(acpar->nr-1)*acpar->dr','','''window data residual: rmax '''))
sfmpiqfwi.par('gain',rsf.doc.rsfpar('float','1','','''vertical gain power of data residual '''))
sfmpiqfwi.par('waterz',rsf.doc.rsfpar('int','51','','''water layer depth '''))
sfmpiqfwi.par('grectx',rsf.doc.rsfpar('int','3','','''gradient smoothing radius in x '''))
sfmpiqfwi.par('grectz',rsf.doc.rsfpar('int','3','','''gradient smoothing radius in z '''))
sfmpiqfwi.par('v1',rsf.doc.rsfpar('float','0.','','''lower limit of estimated velocity '''))
sfmpiqfwi.par('v2',rsf.doc.rsfpar('float','10.','','''upper limit of estimated velocity '''))
sfmpiqfwi.par('tau1',rsf.doc.rsfpar('float','0.','','''lower limit of estimated tau '''))
sfmpiqfwi.par('tau2',rsf.doc.rsfpar('float','0.2','','''upper limit of estimated tau '''))
sfmpiqfwi.par('niter',rsf.doc.rsfpar('int','','','''iteration number '''))
sfmpiqfwi.par('conv_error',rsf.doc.rsfpar('float','','','''final convergence error '''))
sfmpiqfwi.par('npair',rsf.doc.rsfpar('int','20','','''number of l-BFGS pairs '''))
sfmpiqfwi.par('nls',rsf.doc.rsfpar('int','20','','''line search number '''))
sfmpiqfwi.par('factor',rsf.doc.rsfpar('float','10','','''step length increase factor '''))
sfmpiqfwi.par('repeat',rsf.doc.rsfpar('int','5','','''after how many iterations the step length goes back to 1 '''))
sfmpiqfwi.version('2.1-git')
sfmpiqfwi.synopsis('''sfmpiqfwi Fvel=Fv.rsf Fq=Fq.rsf Ftau=Ftau.rsf Fwavelet=Fw.rsf output=Fdat.rsf output=Finv.rsf Ferr=Ferr.rsf Fgrad=Fgrad.rsf output=Fimg.rsf function=2 verb=n f0= nb=100 coef=0.002 acqui_type=1 ns= ds= s0= sz=5 nr=acpar->nx dr=acpar->dx r0=acpar->x0 rz=5 interval=1 fhi=0.5/acpar->dt flo=0. frectx=2 frectz=2 onlygrad=n grad_type=1 wt1=acpar->t0 wt2=acpar->t0+(acpar->nt-1)*acpar->dt woff1=acpar->r0 woff2=acpar->r0+(acpar->nr-1)*acpar->dr gain=1 waterz=51 grectx=3 grectz=3 v1=0. v2=10. tau1=0. tau2=0.2 niter= conv_error= npair=20 nls=20 factor=10 repeat=5''','''''')
rsf.doc.progs['sfmpiqfwi']=sfmpiqfwi

sfmpidfwi = rsf.doc.rsfprog('sfmpidfwi','user/zhiguang/Mmpidfwi.c','''Variable-density acoustic Forward Modeling, FWI, and RTM ''')
sfmpidfwi.par('Fvel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpidfwi.par('Fd',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpidfwi.par('Fwavelet',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpidfwi.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpidfwi.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpidfwi.par('Ferr',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpidfwi.par('Fmod',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpidfwi.par('Fgrad',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpidfwi.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpidfwi.par('function',rsf.doc.rsfpar('int','2','','''if 1, forward modeling; if 2, FWI; if 3, RTM '''))
sfmpidfwi.par('para_type',rsf.doc.rsfpar('int','1','','''if 1, velocity and density; if 2, velocity and impedance '''))
sfmpidfwi.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfmpidfwi.par('nb',rsf.doc.rsfpar('int','20','','''PML boundary width '''))
sfmpidfwi.par('coef',rsf.doc.rsfpar('float','5.','','''maximum velocity of the medium '''))
sfmpidfwi.par('acqui_type',rsf.doc.rsfpar('int','1','','''if 1, fixed acquisition; if 2, marine acquisition; if 3, symmetric acquisition '''))
sfmpidfwi.par('ns',rsf.doc.rsfpar('int','','','''shot number '''))
sfmpidfwi.par('ds',rsf.doc.rsfpar('float','','','''shot interval '''))
sfmpidfwi.par('s0',rsf.doc.rsfpar('float','','','''shot origin '''))
sfmpidfwi.par('sz',rsf.doc.rsfpar('int','3','','''source depth '''))
sfmpidfwi.par('nr',rsf.doc.rsfpar('int','acpar->nx','','''number of receiver '''))
sfmpidfwi.par('dr',rsf.doc.rsfpar('float','acpar->dx','','''receiver interval '''))
sfmpidfwi.par('r0',rsf.doc.rsfpar('float','acpar->x0','','''receiver origin '''))
sfmpidfwi.par('rz',rsf.doc.rsfpar('int','3','','''receiver depth '''))
sfmpidfwi.par('interval',rsf.doc.rsfpar('int','1','','''wavefield storing interval '''))
sfmpidfwi.par('fhi',rsf.doc.rsfpar('float','0.5/acpar->dt','','''high frequency in band, default is Nyquist '''))
sfmpidfwi.par('flo',rsf.doc.rsfpar('float','0.','','''low frequency in band, default is zero '''))
sfmpidfwi.par('frectx',rsf.doc.rsfpar('int','2','','''source smoothing in x '''))
sfmpidfwi.par('frectz',rsf.doc.rsfpar('int','2','','''source smoothing in z '''))
sfmpidfwi.par('onlygrad',rsf.doc.rsfpar('bool','n','','''only calculate gradident or not '''))
sfmpidfwi.par('grad_type',rsf.doc.rsfpar('int','1','','''if 1, velocity; if 2, impedance or density '''))
sfmpidfwi.par('rfwi',rsf.doc.rsfpar('int','0','','''if 0, fwi gradient; if 1, rfwi gradient with Vp-Ip scale separation '''))
sfmpidfwi.par('wt1',rsf.doc.rsfpar('float','acpar->t0','','''window data residual: tmin '''))
sfmpidfwi.par('wt2',rsf.doc.rsfpar('float','acpar->t0+(acpar->nt-1)*acpar->dt','','''window data residual: tmax '''))
sfmpidfwi.par('woff1',rsf.doc.rsfpar('float','acpar->r0','','''window data residual: rmin '''))
sfmpidfwi.par('woff2',rsf.doc.rsfpar('float','acpar->r0+(acpar->nr-1)*acpar->dr','','''window data residual: rmax '''))
sfmpidfwi.par('v0',rsf.doc.rsfpar('float','1.5','','''surface velocity for cutting direct wave '''))
sfmpidfwi.par('t0',rsf.doc.rsfpar('float','-1.','','''starting time for cutting direct wave '''))
sfmpidfwi.par('gain',rsf.doc.rsfpar('float','1','','''vertical gain power of data residual '''))
sfmpidfwi.par('waterz',rsf.doc.rsfpar('int','51','','''water layer depth '''))
sfmpidfwi.par('grectx',rsf.doc.rsfpar('int','3','','''gradient smoothing radius in x '''))
sfmpidfwi.par('grectz',rsf.doc.rsfpar('int','3','','''gradient smoothing radius in z '''))
sfmpidfwi.par('v1',rsf.doc.rsfpar('float','0.','','''lower limit of estimated velocity '''))
sfmpidfwi.par('v2',rsf.doc.rsfpar('float','10.','','''upper limit of estimated velocity '''))
sfmpidfwi.par('den1',rsf.doc.rsfpar('float','0.','','''lower limit of estimated density or impedance '''))
sfmpidfwi.par('den2',rsf.doc.rsfpar('float','10.','','''upper limit of estimated density or impedance '''))
sfmpidfwi.par('niter',rsf.doc.rsfpar('int','','','''iteration number '''))
sfmpidfwi.par('conv_error',rsf.doc.rsfpar('float','','','''final convergence error '''))
sfmpidfwi.par('npair',rsf.doc.rsfpar('int','20','','''number of l-BFGS pairs '''))
sfmpidfwi.par('nls',rsf.doc.rsfpar('int','20','','''line search number '''))
sfmpidfwi.par('factor',rsf.doc.rsfpar('float','10','','''step length increase factor '''))
sfmpidfwi.par('repeat',rsf.doc.rsfpar('int','5','','''after how many iterations the step length goes back to 1 '''))
sfmpidfwi.version('2.1-git')
sfmpidfwi.synopsis('''sfmpidfwi Fvel=Fv.rsf Fd=Fd.rsf Fwavelet=Fw.rsf output=Fdat.rsf output=Finv.rsf Ferr=Ferr.rsf Fmod=Fmod.rsf Fgrad=Fgrad.rsf output=Fimg.rsf function=2 para_type=1 verb=n nb=20 coef=5. acqui_type=1 ns= ds= s0= sz=3 nr=acpar->nx dr=acpar->dx r0=acpar->x0 rz=3 interval=1 fhi=0.5/acpar->dt flo=0. frectx=2 frectz=2 onlygrad=n grad_type=1 rfwi=0 wt1=acpar->t0 wt2=acpar->t0+(acpar->nt-1)*acpar->dt woff1=acpar->r0 woff2=acpar->r0+(acpar->nr-1)*acpar->dr v0=1.5 t0=-1. gain=1 waterz=51 grectx=3 grectz=3 v1=0. v2=10. den1=0. den2=10. niter= conv_error= npair=20 nls=20 factor=10 repeat=5''','''''')
rsf.doc.progs['sfmpidfwi']=sfmpidfwi

sfmpignfwi = rsf.doc.rsfprog('sfmpignfwi','user/zhiguang/Mmpignfwi.c','''Acoustic FWI using Gauss-Newton optimization ''')
sfmpignfwi.par('Fvel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpignfwi.par('Fwavelet',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpignfwi.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpignfwi.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpignfwi.par('Ferr',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpignfwi.par('Fmod',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpignfwi.par('Fgrad',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpignfwi.par('function',rsf.doc.rsfpar('int','2','','''if 1, forward modeling; if 2, FWI '''))
sfmpignfwi.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfmpignfwi.par('nb',rsf.doc.rsfpar('int','100','','''boundary width '''))
sfmpignfwi.par('coef',rsf.doc.rsfpar('float','0.002','','''absorbing boundary coefficient '''))
sfmpignfwi.par('acqui_type',rsf.doc.rsfpar('int','1','','''if 1, fixed acquisition; if 2, marine acquisition; if 3, symmetric acquisition '''))
sfmpignfwi.par('ns',rsf.doc.rsfpar('int','','','''shot number '''))
sfmpignfwi.par('ds',rsf.doc.rsfpar('float','','','''shot interval '''))
sfmpignfwi.par('s0',rsf.doc.rsfpar('float','','','''shot origin '''))
sfmpignfwi.par('sz',rsf.doc.rsfpar('int','3','','''source depth '''))
sfmpignfwi.par('nr',rsf.doc.rsfpar('int','acpar->nx','','''number of receiver '''))
sfmpignfwi.par('dr',rsf.doc.rsfpar('float','acpar->dx','','''receiver interval '''))
sfmpignfwi.par('r0',rsf.doc.rsfpar('float','acpar->x0','','''receiver origin '''))
sfmpignfwi.par('rz',rsf.doc.rsfpar('int','3','','''receiver depth '''))
sfmpignfwi.par('fhi',rsf.doc.rsfpar('float','0.5/acpar->dt','','''high frequency in band, default is Nyquist '''))
sfmpignfwi.par('flo',rsf.doc.rsfpar('float','0.','','''low frequency in band, default is zero '''))
sfmpignfwi.par('frectx',rsf.doc.rsfpar('int','2','','''source smoothing in x '''))
sfmpignfwi.par('frectz',rsf.doc.rsfpar('int','2','','''source smoothing in z '''))
sfmpignfwi.par('onlygrad',rsf.doc.rsfpar('bool','n','','''only calculate gradident or not '''))
sfmpignfwi.par('wt1',rsf.doc.rsfpar('float','acpar->t0','','''window data residual: tmin '''))
sfmpignfwi.par('wt2',rsf.doc.rsfpar('float','acpar->t0+(acpar->nt-1)*acpar->dt','','''window data residual: tmax '''))
sfmpignfwi.par('woff1',rsf.doc.rsfpar('float','acpar->r0','','''window data residual: rmin '''))
sfmpignfwi.par('woff2',rsf.doc.rsfpar('float','acpar->r0+(acpar->nr-1)*acpar->dr','','''window data residual: rmax '''))
sfmpignfwi.par('gain',rsf.doc.rsfpar('float','1','','''vertical gain power of data residual '''))
sfmpignfwi.par('waterz',rsf.doc.rsfpar('int','51','','''water layer depth '''))
sfmpignfwi.par('grectx',rsf.doc.rsfpar('int','3','','''gradient smoothing radius in x '''))
sfmpignfwi.par('grectz',rsf.doc.rsfpar('int','3','','''gradient smoothing radius in z '''))
sfmpignfwi.par('drectx',rsf.doc.rsfpar('int','1','','''smoothing kernel radius in x '''))
sfmpignfwi.par('drectz',rsf.doc.rsfpar('int','1','','''smoothing kernel radius in z '''))
sfmpignfwi.par('nrepeat',rsf.doc.rsfpar('int','1','','''smoothing kernel repeat number '''))
sfmpignfwi.par('tangent',rsf.doc.rsfpar('int','0','','''if 1, calculate prediction corrector '''))
sfmpignfwi.par('sigma1',rsf.doc.rsfpar('float','-1','','''smoothing kernel radius moving step in z '''))
sfmpignfwi.par('sigma2',rsf.doc.rsfpar('float','-1','','''smoothing kernel radius moving step in x '''))
sfmpignfwi.par('v1',rsf.doc.rsfpar('float','0.','','''lower limit of estimated velocity '''))
sfmpignfwi.par('v2',rsf.doc.rsfpar('float','10.','','''upper limit of estimated velocity '''))
sfmpignfwi.par('lniter',rsf.doc.rsfpar('int','10','','''CG iteration number '''))
sfmpignfwi.par('niter',rsf.doc.rsfpar('int','','','''iteration number '''))
sfmpignfwi.par('conv_error',rsf.doc.rsfpar('float','','','''final convergence error '''))
sfmpignfwi.par('nls',rsf.doc.rsfpar('int','20','','''line search number '''))
sfmpignfwi.par('factor',rsf.doc.rsfpar('float','10','','''step length increase factor '''))
sfmpignfwi.par('repeat',rsf.doc.rsfpar('int','5','','''after how many iterations the step length goes back to 1 '''))
sfmpignfwi.par('err_type',rsf.doc.rsfpar('int','0','','''if 0, true misfit function; if 1, both smoothing kernel and original L2 norm misfits '''))
sfmpignfwi.version('2.1-git')
sfmpignfwi.synopsis('''sfmpignfwi Fvel=Fv.rsf Fwavelet=Fw.rsf output=Fdat.rsf output=Finv.rsf Ferr=Ferr.rsf Fmod=Fmod.rsf Fgrad=Fgrad.rsf function=2 verb=n nb=100 coef=0.002 acqui_type=1 ns= ds= s0= sz=3 nr=acpar->nx dr=acpar->dx r0=acpar->x0 rz=3 fhi=0.5/acpar->dt flo=0. frectx=2 frectz=2 onlygrad=n wt1=acpar->t0 wt2=acpar->t0+(acpar->nt-1)*acpar->dt woff1=acpar->r0 woff2=acpar->r0+(acpar->nr-1)*acpar->dr gain=1 waterz=51 grectx=3 grectz=3 drectx=1 drectz=1 nrepeat=1 tangent=0 sigma1=-1 sigma2=-1 v1=0. v2=10. lniter=10 niter= conv_error= nls=20 factor=10 repeat=5 err_type=0''','''''')
rsf.doc.progs['sfmpignfwi']=sfmpignfwi

sfmpifd2d = rsf.doc.rsfprog('sfmpifd2d','user/zhiguang/Mmpifd2d.c','''Acoustic wave equation forward modeling with MPI and OpenMP ''')
sfmpifd2d.par('rho',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpifd2d.par('wavelet',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpifd2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfmpifd2d.par('ns',rsf.doc.rsfpar('int','','','''shot number '''))
sfmpifd2d.par('ds',rsf.doc.rsfpar('float','','','''shot interval '''))
sfmpifd2d.par('s0',rsf.doc.rsfpar('float','','','''shot origin '''))
sfmpifd2d.par('sz',rsf.doc.rsfpar('int','5','','''source depth '''))
sfmpifd2d.par('nr',rsf.doc.rsfpar('int','','','''number of receiver '''))
sfmpifd2d.par('dr',rsf.doc.rsfpar('float','','','''receiver interval '''))
sfmpifd2d.par('r0',rsf.doc.rsfpar('float','','','''receiver origin '''))
sfmpifd2d.par('rz',rsf.doc.rsfpar('int','sz','','''receiver depth '''))
sfmpifd2d.par('nb',rsf.doc.rsfpar('int','80','','''boundary width '''))
sfmpifd2d.par('coef',rsf.doc.rsfpar('float','0.003','','''absorbing boundary coefficient '''))
sfmpifd2d.par('rectx',rsf.doc.rsfpar('int','2','','''source smooothing parameter '''))
sfmpifd2d.par('rectz',rsf.doc.rsfpar('int','2','','''source smooothing parameter '''))
sfmpifd2d.version('2.1-git')
sfmpifd2d.synopsis('''sfmpifd2d rho=Frho.rsf wavelet=Fw.rsf verb=n ns= ds= s0= sz=5 nr= dr= r0= rz=sz nb=80 coef=0.003 rectx=2 rectz=2''','''''')
rsf.doc.progs['sfmpifd2d']=sfmpifd2d

sfmpidip2 = rsf.doc.rsfprog('sfmpidip2','user/zhiguang/Mmpidip2.c','''2-D dip estimation by plane wave destruction with MPI parallelization. ''')
sfmpidip2.par('dip0',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpidip2.par('mask',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpidip2.par('niter',rsf.doc.rsfpar('int','5','','''number of iterations '''))
sfmpidip2.par('liter',rsf.doc.rsfpar('int','20','','''number of linear iterations '''))
sfmpidip2.par('rect1',rsf.doc.rsfpar('int','1','','''dip smoothness on 1st axis '''))
sfmpidip2.par('rect2',rsf.doc.rsfpar('int','1','','''dip smoothness on 2nd axis '''))
sfmpidip2.par('p0',rsf.doc.rsfpar('float','0.','','''initial dip '''))
sfmpidip2.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfmpidip2.par('nj1',rsf.doc.rsfpar('int','1','','''antialiasing '''))
sfmpidip2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfmpidip2.par('pmin',rsf.doc.rsfpar('float','-FLT_MAX','','''minimum dip '''))
sfmpidip2.par('pmax',rsf.doc.rsfpar('float','+FLT_MAX','','''maximum dip '''))
sfmpidip2.par('eps',rsf.doc.rsfpar('float','0.0f','','''regularization '''))
sfmpidip2.par('dip0',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfmpidip2.par('mask',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfmpidip2.version('2.1-git')
sfmpidip2.synopsis('''sfmpidip2 dip0=dip0.rsf mask=mask.rsf niter=5 liter=20 rect1=1 rect2=1 p0=0. order=1 nj1=1 verb=n pmin=-FLT_MAX pmax=+FLT_MAX eps=0.0f''','''''')
rsf.doc.progs['sfmpidip2']=sfmpidip2

sfmpipaint2 = rsf.doc.rsfprog('sfmpipaint2','user/zhiguang/Mmpipaint2.c','''2-D painting by plane-wave construction with MPI parallelization. ''')
sfmpipaint2.par('verb',rsf.doc.rsfpar('bool','n','',''''''))
sfmpipaint2.par('eps',rsf.doc.rsfpar('float','0.01','','''regularization '''))
sfmpipaint2.par('i0',rsf.doc.rsfpar('int','0','','''reference trace '''))
sfmpipaint2.par('order',rsf.doc.rsfpar('int','1','','''accuracy order '''))
sfmpipaint2.version('2.1-git Mflat.c 1131 2005-04-20 18:19:10Z fomels')
sfmpipaint2.synopsis('''sfmpipaint2 verb=n eps=0.01 i0=0 order=1''','''''')
rsf.doc.progs['sfmpipaint2']=sfmpipaint2

sfmpictshiftlr = rsf.doc.rsfprog('sfmpictshiftlr','user/zhiguang/Mmpictshiftlr.c','''Correct time-shift gathers with two-step lowrank propagator ''')
sfmpictshiftlr.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpictshiftlr.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpictshiftlr.par('dt',rsf.doc.rsfpar('float','0.001','','''time interval '''))
sfmpictshiftlr.par('nb',rsf.doc.rsfpar('int','60','','''boundary width '''))
sfmpictshiftlr.par('par',rsf.doc.rsfpar('float','0.01','','''absorbing boundary coefficient '''))
sfmpictshiftlr.par('cmplx',rsf.doc.rsfpar('bool','n','','''use complex FFT '''))
sfmpictshiftlr.par('abc',rsf.doc.rsfpar('bool','y','','''absorbing boundary condition '''))
sfmpictshiftlr.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfmpictshiftlr.par('taper',rsf.doc.rsfpar('bool','y','','''tapering '''))
sfmpictshiftlr.par('thresh',rsf.doc.rsfpar('float','0.92','','''thresholding '''))
sfmpictshiftlr.version('2.1-git')
sfmpictshiftlr.synopsis('''sfmpictshiftlr left=left.rsf right=right.rsf dt=0.001 nb=60 par=0.01 cmplx=n abc=y pad1=1 taper=y thresh=0.92''','''''')
rsf.doc.progs['sfmpictshiftlr']=sfmpictshiftlr

sfmpilsLU = rsf.doc.rsfprog('sfmpilsLU','user/zhiguang/MmpilsLU.c','''Local similarity filter (solving with band matrix LU decomposition and parallelization) ''')
sfmpilsLU.par('obs',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsLU.par('input',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsLU.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpilsLU.par('adj1',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpilsLU.par('adj2',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpilsLU.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity flag '''))
sfmpilsLU.par('shift',rsf.doc.rsfpar('bool','n','','''use shift instead of stretch '''))
sfmpilsLU.par('adjsrc',rsf.doc.rsfpar('bool','n','','''use shift instead of stretch '''))
sfmpilsLU.par('rect1',rsf.doc.rsfpar('int','50','','''smoothing along first axis '''))
sfmpilsLU.par('nw',rsf.doc.rsfpar('int','','','''number of omega values '''))
sfmpilsLU.par('dw',rsf.doc.rsfpar('float','','','''omega sampling '''))
sfmpilsLU.par('w0',rsf.doc.rsfpar('float','','','''omega origin '''))
sfmpilsLU.version('2.1-git')
sfmpilsLU.synopsis('''sfmpilsLU obs=dat.rsf input=mat.rsf output=flt.rsf adj1=adj1.rsf adj2=adj2.rsf verb=y shift=n adjsrc=n rect1=50 nw= dw= w0=''','''''')
rsf.doc.progs['sfmpilsLU']=sfmpilsLU

sfmpifwigradlr = rsf.doc.rsfprog('sfmpifwigradlr','user/zhiguang/Mmpifwigradlr.c','''Conventional FWI misfit and gradient calculation using one-step low-rank wave extrapolation ''')
sfmpifwigradlr.par('Fvel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpifwigradlr.par('Fsrc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpifwigradlr.par('Fleft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpifwigradlr.par('Fright',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpifwigradlr.par('Fdat',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpifwigradlr.par('Fmisfit',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpifwigradlr.par('Fleftb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpifwigradlr.par('Frightb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpifwigradlr.par('Fq',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpifwigradlr.par('Fgrad',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpifwigradlr.par('Fwav',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpifwigradlr.par('Fwav2',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpifwigradlr.par('Fres',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpifwigradlr.par('function',rsf.doc.rsfpar('int','3','','''if 1, forward modeling; if 2, only calculate misfit; if 3, calculate gradient '''))
sfmpifwigradlr.par('ns',rsf.doc.rsfpar('int','','','''shot number '''))
sfmpifwigradlr.par('ds',rsf.doc.rsfpar('float','','','''shot interval '''))
sfmpifwigradlr.par('s0',rsf.doc.rsfpar('float','','','''shot origin '''))
sfmpifwigradlr.par('sz',rsf.doc.rsfpar('int','5','','''source depth '''))
sfmpifwigradlr.par('nr',rsf.doc.rsfpar('int','rnx','','''number of receiver '''))
sfmpifwigradlr.par('dr',rsf.doc.rsfpar('float','dx','','''receiver interval '''))
sfmpifwigradlr.par('r0',rsf.doc.rsfpar('float','x0','','''receiver origin '''))
sfmpifwigradlr.par('rz',rsf.doc.rsfpar('int','5','','''receiver depth '''))
sfmpifwigradlr.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfmpifwigradlr.par('scomp',rsf.doc.rsfpar('bool','n','','''source wavefield compensation flag '''))
sfmpifwigradlr.par('adjtest',rsf.doc.rsfpar('bool','n','','''test of adjointness '''))
sfmpifwigradlr.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfmpifwigradlr.par('nb',rsf.doc.rsfpar('int','','',''''''))
sfmpifwigradlr.par('w0',rsf.doc.rsfpar('float','','','''reference frequency '''))
sfmpifwigradlr.par('rectx',rsf.doc.rsfpar('int','3','',''''''))
sfmpifwigradlr.par('rectz',rsf.doc.rsfpar('int','3','',''''''))
sfmpifwigradlr.par('scalet',rsf.doc.rsfpar('int','1','','''time interval '''))
sfmpifwigradlr.version('2.1-git')
sfmpifwigradlr.synopsis('''sfmpifwigradlr Fvel=Fvel.rsf Fsrc=Fsrc.rsf Fleft=Fleft.rsf Fright=Fright.rsf Fdat=Fdat.rsf Fmisfit=Fmisfit.rsf Fleftb=Fleftb.rsf Frightb=Frightb.rsf Fq=Fq.rsf Fgrad=Fgrad.rsf Fwav=Fwav.rsf Fwav2=Fwav2.rsf Fres=Fres.rsf function=3 ns= ds= s0= sz=5 nr=rnx dr=dx r0=x0 rz=5 verb=n scomp=n adjtest=n pad1=1 nb= w0= rectx=3 rectz=3 scalet=1''','''''')
rsf.doc.progs['sfmpifwigradlr']=sfmpifwigradlr

sfmpifwigrad = rsf.doc.rsfprog('sfmpifwigrad','user/zhiguang/Mmpifwigrad.c','''Calculate acoustic FWI gradient with the prepared adjoint source ''')
sfmpifwigrad.par('Fvel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpifwigrad.par('Fwavelet',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpifwigrad.par('Fadj',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpifwigrad.par('Fgrad',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpifwigrad.par('Fwfl1',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpifwigrad.par('Fwfl2',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpifwigrad.par('ns',rsf.doc.rsfpar('int','','','''shot number '''))
sfmpifwigrad.par('ds',rsf.doc.rsfpar('float','','','''shot interval '''))
sfmpifwigrad.par('s0',rsf.doc.rsfpar('float','','','''shot origin '''))
sfmpifwigrad.par('sz',rsf.doc.rsfpar('int','5','','''source depth '''))
sfmpifwigrad.par('nr',rsf.doc.rsfpar('int','nx','','''number of receiver '''))
sfmpifwigrad.par('dr',rsf.doc.rsfpar('float','dx','','''receiver interval '''))
sfmpifwigrad.par('r0',rsf.doc.rsfpar('float','x0','','''receiver origin '''))
sfmpifwigrad.par('rz',rsf.doc.rsfpar('int','5','','''receiver depth '''))
sfmpifwigrad.par('frectx',rsf.doc.rsfpar('int','2','','''source smoothing in x '''))
sfmpifwigrad.par('frectz',rsf.doc.rsfpar('int','2','','''source smoothing in z '''))
sfmpifwigrad.par('nb',rsf.doc.rsfpar('int','100','','''boundary width '''))
sfmpifwigrad.par('coef',rsf.doc.rsfpar('float','0.002','','''absorbing boundary coefficient '''))
sfmpifwigrad.version('2.1-git')
sfmpifwigrad.synopsis('''sfmpifwigrad Fvel=Fv.rsf Fwavelet=Fw.rsf Fadj=Fadj.rsf Fgrad=Fgrad.rsf Fwfl1=Fwfl1.rsf Fwfl2=Fwfl2.rsf ns= ds= s0= sz=5 nr=nx dr=dx r0=x0 rz=5 frectx=2 frectz=2 nb=100 coef=0.002''','''''')
rsf.doc.progs['sfmpifwigrad']=sfmpifwigrad

sfmpirfwigrad = rsf.doc.rsfprog('sfmpirfwigrad','user/zhiguang/Mmpirfwigrad.c','''Calculate acoustic Reflection FWI gradient with the prepared adjoint source (velocity-impedance scale separation) ''')
sfmpirfwigrad.par('Fvel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpirfwigrad.par('Fd',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpirfwigrad.par('Fd0',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpirfwigrad.par('Fwavelet',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpirfwigrad.par('Fadj',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpirfwigrad.par('Fgrad',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpirfwigrad.par('ns',rsf.doc.rsfpar('int','','','''shot number '''))
sfmpirfwigrad.par('ds',rsf.doc.rsfpar('float','','','''shot interval '''))
sfmpirfwigrad.par('s0',rsf.doc.rsfpar('float','','','''shot origin '''))
sfmpirfwigrad.par('sz',rsf.doc.rsfpar('int','3','','''source depth '''))
sfmpirfwigrad.par('nr',rsf.doc.rsfpar('int','nx','','''number of receiver '''))
sfmpirfwigrad.par('dr',rsf.doc.rsfpar('float','dx','','''receiver interval '''))
sfmpirfwigrad.par('r0',rsf.doc.rsfpar('float','x0','','''receiver origin '''))
sfmpirfwigrad.par('rz',rsf.doc.rsfpar('int','3','','''receiver depth '''))
sfmpirfwigrad.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfmpirfwigrad.par('frectx',rsf.doc.rsfpar('int','2','','''source smoothing in x '''))
sfmpirfwigrad.par('frectz',rsf.doc.rsfpar('int','2','','''source smoothing in z '''))
sfmpirfwigrad.par('nb',rsf.doc.rsfpar('int','20','','''PML boundary width '''))
sfmpirfwigrad.par('coef',rsf.doc.rsfpar('float','5.','','''maximum velocity of the medium '''))
sfmpirfwigrad.par('interval',rsf.doc.rsfpar('int','1','','''wavefield storing interval '''))
sfmpirfwigrad.par('acqui_type',rsf.doc.rsfpar('int','1','','''acquisition type '''))
sfmpirfwigrad.version('2.1-git')
sfmpirfwigrad.synopsis('''sfmpirfwigrad Fvel=Fv.rsf Fd=Fd.rsf Fd0=Fd0.rsf Fwavelet=Fw.rsf Fadj=Fadj.rsf Fgrad=Fgrad.rsf ns= ds= s0= sz=3 nr=nx dr=dx r0=x0 rz=3 verb=n frectx=2 frectz=2 nb=20 coef=5. interval=1 acqui_type=1''','''''')
rsf.doc.progs['sfmpirfwigrad']=sfmpirfwigrad

sffdlsrtm = rsf.doc.rsfprog('sffdlsrtm','user/zhiguang/Mfdlsrtm.py','''Finite difference RTM as a linear operator''')
sffdlsrtm.version('2.1-git')
sffdlsrtm.synopsis('''sffdlsrtm''','''''')
rsf.doc.progs['sffdlsrtm']=sffdlsrtm

sflrrtm = rsf.doc.rsfprog('sflrrtm','user/zhiguang/Mlrrtm.py','''Lowrank prestack RTM as a linear operator''')
sflrrtm.version('2.1-git')
sflrrtm.synopsis('''sflrrtm''','''''')
rsf.doc.progs['sflrrtm']=sflrrtm

