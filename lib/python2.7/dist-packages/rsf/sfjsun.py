import rsf.doc

sffftwave1dd = rsf.doc.rsfprog('sffftwave1dd','user/jsun/Mfftwave1dd.c','''1-D lowrank FFT wave extrapolation using real to complex to real fft (with wavelet injection)''')
sffftwave1dd.par('refl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftwave1dd.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftwave1dd.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftwave1dd.version('2.1-git')
sffftwave1dd.synopsis('''sffftwave1dd < Fw.rsf > Fo.rsf refl=Fr.rsf left=left.rsf right=right.rsf''','''''')
rsf.doc.progs['sffftwave1dd']=sffftwave1dd

sfcfftwave1dd = rsf.doc.rsfprog('sfcfftwave1dd','user/jsun/Mcfftwave1dd.c','''1-D complex lowrank FFT wave extrapolation using complex to complex fft using initial condition''')
sfcfftwave1dd.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave1dd.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave1dd.par('prop',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave1dd.par('sub',rsf.doc.rsfpar('bool','n','','''if -1 is included in the matrix '''))
sfcfftwave1dd.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfcfftwave1dd.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfcfftwave1dd.par('right',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfcfftwave1dd.version('2.1-git')
sfcfftwave1dd.synopsis('''sfcfftwave1dd < Fw.rsf > Fo.rsf left=left.rsf right=right.rsf prop=prop.rsf sub=n nt= dt=''','''''')
rsf.doc.progs['sfcfftwave1dd']=sfcfftwave1dd

sfcfftwave1in = rsf.doc.rsfprog('sfcfftwave1in','user/jsun/Mcfftwave1in.c','''1-D complex lowrank FFT wave extrapolation using complex to complex fft BY INJECTION''')
sfcfftwave1in.par('refl',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave1in.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave1in.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave1in.version('2.1-git')
sfcfftwave1in.synopsis('''sfcfftwave1in < Fw.rsf > Fo.rsf refl=Fr.rsf left=left.rsf right=right.rsf''','''''')
rsf.doc.progs['sfcfftwave1in']=sfcfftwave1in

sffftwave2p = rsf.doc.rsfprog('sffftwave2p','user/jsun/Mfftwave2p.c','''Simple 2-D wave propagation with multi-threaded fftw3 ''')
sffftwave2p.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftwave2p.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffftwave2p.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftwave2p.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftwave2p.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sffftwave2p.par('abc',rsf.doc.rsfpar('bool','n','','''absorbing flag '''))
sffftwave2p.par('nbt',rsf.doc.rsfpar('int','','',''''''))
sffftwave2p.par('nbb',rsf.doc.rsfpar('int','nbt','',''''''))
sffftwave2p.par('nbl',rsf.doc.rsfpar('int','nbt','',''''''))
sffftwave2p.par('nbr',rsf.doc.rsfpar('int','nbt','',''''''))
sffftwave2p.par('ct',rsf.doc.rsfpar('float','','',''''''))
sffftwave2p.par('cb',rsf.doc.rsfpar('float','ct','',''''''))
sffftwave2p.par('cl',rsf.doc.rsfpar('float','ct','',''''''))
sffftwave2p.par('cr',rsf.doc.rsfpar('float','ct','',''''''))
sffftwave2p.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sffftwave2p.par('cmplx',rsf.doc.rsfpar('bool','n','','''use complex FFT '''))
sffftwave2p.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sffftwave2p.version('2.1-git')
sffftwave2p.synopsis('''sffftwave2p < Fw.rsf > Fo.rsf ref=Fr.rsf snaps=snaps.rsf left=left.rsf right=right.rsf verb=n abc=n nbt= nbb=nbt nbl=nbt nbr=nbt ct= cb=ct cl=ct cr=ct snap=0 cmplx=n pad1=1''','''''')
rsf.doc.progs['sffftwave2p']=sffftwave2p

sffftwave3p = rsf.doc.rsfprog('sffftwave3p','user/jsun/Mfftwave3p.c','''Simple 3-D wave propagation with multi-threaded fftw3''')
sffftwave3p.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftwave3p.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffftwave3p.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftwave3p.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftwave3p.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity '''))
sffftwave3p.par('cmplx',rsf.doc.rsfpar('bool','n','','''use complex FFT '''))
sffftwave3p.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sffftwave3p.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sffftwave3p.version('2.1-git')
sffftwave3p.synopsis('''sffftwave3p < Fw.rsf > Fo.rsf ref=Fr.rsf snaps=snaps.rsf left=left.rsf right=right.rsf verb=y cmplx=n pad1=1 snap=0''','''''')
rsf.doc.progs['sffftwave3p']=sffftwave3p

sfcfftwave2 = rsf.doc.rsfprog('sfcfftwave2','user/jsun/Mcfftwave2.c','''Complex 2-D wave propagation (with multi-threaded FFTW3)''')
sfcfftwave2.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave2.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfcfftwave2.par('cmplx',rsf.doc.rsfpar('bool','y','','''outputs complex wavefield '''))
sfcfftwave2.par('os',rsf.doc.rsfpar('bool','y','','''one-step flag '''))
sfcfftwave2.par('sub',rsf.doc.rsfpar('bool','n','','''subtraction flag '''))
sfcfftwave2.par('sub',rsf.doc.rsfpar('bool','y','','''subtraction flag '''))
sfcfftwave2.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfcfftwave2.version('2.1-git')
sfcfftwave2.synopsis('''sfcfftwave2 < Fw.rsf > Fo.rsf ref=Fr.rsf left=left.rsf right=right.rsf verb=n cmplx=y os=y sub=n sub=y pad1=1''','''''')
rsf.doc.progs['sfcfftwave2']=sfcfftwave2

sfcfftwave3 = rsf.doc.rsfprog('sfcfftwave3','user/jsun/Mcfftwave3.c','''Simple 3-D lowrank onestep wave propagation ''')
sfcfftwave3.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave3.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcfftwave3.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave3.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave3.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity '''))
sfcfftwave3.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfcfftwave3.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sfcfftwave3.version('2.1-git')
sfcfftwave3.synopsis('''sfcfftwave3 < Fw.rsf > Fo.rsf ref=Fr.rsf snaps=snaps.rsf left=left.rsf right=right.rsf verb=y pad1=1 snap=0''','''''')
rsf.doc.progs['sfcfftwave3']=sfcfftwave3

sfcfftexpmig2 = rsf.doc.rsfprog('sfcfftexpmig2','user/jsun/Mcfftexpmig2.c','''Complex 2-D exploding reflector migration (read in initial complex wavefield in depth) ''')
sfcfftexpmig2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftexpmig2.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftexpmig2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfcfftexpmig2.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfcfftexpmig2.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfcfftexpmig2.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfcfftexpmig2.version('2.1-git')
sfcfftexpmig2.synopsis('''sfcfftexpmig2 < wvfld.rsf > image.rsf left=left.rsf right=right.rsf verb=n nt= dt= pad1=1''','''''')
rsf.doc.progs['sfcfftexpmig2']=sfcfftexpmig2

sffftexp0test = rsf.doc.rsfprog('sffftexp0test','user/jsun/Mfftexp0test.c','''2-D FFT-based zero-offset exploding reflector modeling/migration (outputs time volume; can be used to generate movies) ''')
sffftexp0test.par('movie',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffftexp0test.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftexp0test.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftexp0test.par('mig',rsf.doc.rsfpar('bool','n','','''if n, modeling; if y, migration '''))
sffftexp0test.par('cmplx',rsf.doc.rsfpar('bool','n','','''use complex FFT '''))
sffftexp0test.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sffftexp0test.par('nz',rsf.doc.rsfpar('int','','','''time samples (if migration) '''))
sffftexp0test.par('dz',rsf.doc.rsfpar('float','','','''time sampling (if migration) '''))
sffftexp0test.par('nt',rsf.doc.rsfpar('int','','','''time samples (if modeling) '''))
sffftexp0test.par('dt',rsf.doc.rsfpar('float','','','''time sampling (if modeling) '''))
sffftexp0test.par('jt',rsf.doc.rsfpar('int','1','','''time interval '''))
sffftexp0test.version('2.1-git')
sffftexp0test.synopsis('''sffftexp0test movie=movie.rsf < data.rsf > image.rsf left=left.rsf right=right.rsf mig=n cmplx=n pad1=1 nz= dz= nt= dt= jt=1''','''''')
rsf.doc.progs['sffftexp0test']=sffftexp0test

sffd2d = rsf.doc.rsfprog('sffd2d','user/jsun/Mfd2d.c','''2-D Fourth-order Finite-difference wave extrapolation with ABC ''')
sffd2d.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffd2d.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffd2d.par('verb',rsf.doc.rsfpar('bool','0','','''setup I/O files '''))
sffd2d.par('nb',rsf.doc.rsfpar('int','30','','''boundary length '''))
sffd2d.par('c',rsf.doc.rsfpar('float','0.01','','''decaying parameter '''))
sffd2d.version('2.1-git')
sffd2d.synopsis('''sffd2d < Fw.rsf vel=Fv.rsf ref=Fr.rsf > Fo.rsf verb=0 nb=30 c=0.01''','''''')
rsf.doc.progs['sffd2d']=sffd2d

sfcfftexp2 = rsf.doc.rsfprog('sfcfftexp2','user/jsun/Mcfftexp2.c','''2-D FFT-based zero-offset exploding reflector modeling/migration  ''')
sfcfftexp2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftexp2.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftexp2.par('mig',rsf.doc.rsfpar('bool','n','','''if n, modeling; if y, migration '''))
sfcfftexp2.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfcfftexp2.par('nz',rsf.doc.rsfpar('int','','','''depth samples (if migration) '''))
sfcfftexp2.par('dz',rsf.doc.rsfpar('float','','','''depth sampling (if migration) '''))
sfcfftexp2.par('nt',rsf.doc.rsfpar('int','','','''time samples (if modeling) '''))
sfcfftexp2.par('dt',rsf.doc.rsfpar('float','','','''time sampling (if modeling) '''))
sfcfftexp2.version('2.1-git')
sfcfftexp2.synopsis('''sfcfftexp2 < data.rsf > image.rsf left=left.rsf right=right.rsf mig=n pad1=1 nz= dz= nt= dt=''','''''')
rsf.doc.progs['sfcfftexp2']=sfcfftexp2

sfcfftexp2test = rsf.doc.rsfprog('sfcfftexp2test','user/jsun/Mcfftexp2test.c','''2-D FFT-based zero-offset exploding reflector modeling/migration (outputs time volume, not just last image; can be used to generate movie) ''')
sfcfftexp2test.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftexp2test.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftexp2test.par('mig',rsf.doc.rsfpar('bool','n','','''if n, modeling; if y, migration '''))
sfcfftexp2test.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfcfftexp2test.par('nz',rsf.doc.rsfpar('int','','','''depth samples (if migration) '''))
sfcfftexp2test.par('dz',rsf.doc.rsfpar('float','','','''depth sampling (if migration) '''))
sfcfftexp2test.par('nt',rsf.doc.rsfpar('int','','','''time samples (if modeling) '''))
sfcfftexp2test.par('dt',rsf.doc.rsfpar('float','','','''time sampling (if modeling) '''))
sfcfftexp2test.version('2.1-git')
sfcfftexp2test.synopsis('''sfcfftexp2test < data.rsf > image.rsf left=left.rsf right=right.rsf mig=n pad1=1 nz= dz= nt= dt=''','''''')
rsf.doc.progs['sfcfftexp2test']=sfcfftexp2test

sffdtacc = rsf.doc.rsfprog('sffdtacc','user/jsun/Mfdtacc.c','''2-D Fourth-order Finite-difference wave extrapolation with timing option (no ABC)''')
sffdtacc.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffdtacc.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffdtacc.par('verb',rsf.doc.rsfpar('bool','0','',''''''))
sffdtacc.par('timer',rsf.doc.rsfpar('bool','0','','''setup I/O files '''))
sffdtacc.version('2.1-git')
sffdtacc.synopsis('''sffdtacc < Fw.rsf vel=Fv.rsf ref=Fr.rsf > Fo.rsf verb=0 timer=0''','''''')
rsf.doc.progs['sffdtacc']=sffdtacc

sfwcfftexp2 = rsf.doc.rsfprog('sfwcfftexp2','user/jsun/Mwcfftexp2.c','''2-D FFT-based zero-offset exploding reflector modeling/migration  ''')
sfwcfftexp2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwcfftexp2.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwcfftexp2.par('mig',rsf.doc.rsfpar('bool','n','','''if n, modeling; if y, migration '''))
sfwcfftexp2.par('timer',rsf.doc.rsfpar('bool','n','',''''''))
sfwcfftexp2.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfwcfftexp2.par('nz',rsf.doc.rsfpar('int','','','''depth samples (if migration) '''))
sfwcfftexp2.par('dz',rsf.doc.rsfpar('float','','','''depth sampling (if migration) '''))
sfwcfftexp2.par('nt',rsf.doc.rsfpar('int','','','''time samples (if modeling) '''))
sfwcfftexp2.par('dt',rsf.doc.rsfpar('float','','','''time sampling (if modeling) '''))
sfwcfftexp2.version('2.1-git')
sfwcfftexp2.synopsis('''sfwcfftexp2 < data.rsf > image.rsf left=left.rsf right=right.rsf mig=n timer=n pad1=1 nz= dz= nt= dt=''','''''')
rsf.doc.progs['sfwcfftexp2']=sfwcfftexp2

sfwcfftexp2adj = rsf.doc.rsfprog('sfwcfftexp2adj','user/jsun/Mwcfftexp2adj.c','''2-D FFT-based zero-offset exploding reflector modeling/migration  ''')
sfwcfftexp2adj.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwcfftexp2adj.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwcfftexp2adj.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwcfftexp2adj.par('adj',rsf.doc.rsfpar('bool','n','','''if n, modeling; if y, migration '''))
sfwcfftexp2adj.par('timer',rsf.doc.rsfpar('bool','n','',''''''))
sfwcfftexp2adj.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sfwcfftexp2adj.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfwcfftexp2adj.par('n0',rsf.doc.rsfpar('int','0','','''geophone surface '''))
sfwcfftexp2adj.par('nz',rsf.doc.rsfpar('int','','','''depth samples '''))
sfwcfftexp2adj.par('dz',rsf.doc.rsfpar('float','','','''depth sampling '''))
sfwcfftexp2adj.par('nt',rsf.doc.rsfpar('int','','','''time samples '''))
sfwcfftexp2adj.par('dt',rsf.doc.rsfpar('float','','','''time sampling '''))
sfwcfftexp2adj.version('2.1-git')
sfwcfftexp2adj.synopsis('''sfwcfftexp2adj < data.rsf > image.rsf snaps=snaps.rsf left=left.rsf right=right.rsf adj=n timer=n snap=0 pad1=1 n0=0 nz= dz= nt= dt=''','''''')
rsf.doc.progs['sfwcfftexp2adj']=sfwcfftexp2adj

sfcfftwave2nsps = rsf.doc.rsfprog('sfcfftwave2nsps','user/jsun/Mcfftwave2nsps.c','''Complex 2-D wave propagation (NSPS)''')
sfcfftwave2nsps.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave2nsps.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave2nsps.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave2nsps.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfcfftwave2nsps.par('cmplx',rsf.doc.rsfpar('bool','y','','''outputs complex wavefield '''))
sfcfftwave2nsps.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfcfftwave2nsps.version('2.1-git')
sfcfftwave2nsps.synopsis('''sfcfftwave2nsps < Fw.rsf > Fo.rsf ref=Fr.rsf left=left.rsf right=right.rsf verb=n cmplx=y pad1=1''','''''')
rsf.doc.progs['sfcfftwave2nsps']=sfcfftwave2nsps

sfcfftwave2mix2 = rsf.doc.rsfprog('sfcfftwave2mix2','user/jsun/Mcfftwave2mix2.c','''Complex 2-D wave propagation ''')
sfcfftwave2mix2.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave2mix2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave2mix2.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave2mix2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfcfftwave2mix2.par('cmplx',rsf.doc.rsfpar('bool','y','','''outputs complex wavefield '''))
sfcfftwave2mix2.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfcfftwave2mix2.par('mode',rsf.doc.rsfpar('string ',desc='''default mode is pspi '''))
sfcfftwave2mix2.version('2.1-git')
sfcfftwave2mix2.synopsis('''sfcfftwave2mix2 < Fw.rsf > Fo.rsf ref=Fr.rsf left=left.rsf right=right.rsf verb=n cmplx=y pad1=1 mode=''','''''')
rsf.doc.progs['sfcfftwave2mix2']=sfcfftwave2mix2

sfwavemixop = rsf.doc.rsfprog('sfwavemixop','user/jsun/Mwavemixop.c','''Complex 2-D wave propagation (with kiss-fft)''')
sfwavemixop.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwavemixop.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfwavemixop.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwavemixop.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwavemixop.par('alpha',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwavemixop.par('beta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfwavemixop.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfwavemixop.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sfwavemixop.par('correct',rsf.doc.rsfpar('bool','n','','''jingwei's correction'''))
sfwavemixop.par('type',rsf.doc.rsfpar('int','0','','''type of propagation; 0 means no correction applied, and mode takes effect, 9 enables jjsf'''))
sfwavemixop.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfwavemixop.par('mode',rsf.doc.rsfpar('string ',desc='''default mode is pspi '''))
sfwavemixop.version('2.1-git')
sfwavemixop.synopsis('''sfwavemixop < Fw.rsf > Fo.rsf ref=Fr.rsf snaps=Fs.rsf left=left.rsf right=right.rsf alpha=Fa.rsf beta=Fb.rsf verb=n snap=0 correct=n type=0 pad1=1 mode=''','''''')
rsf.doc.progs['sfwavemixop']=sfwavemixop

sflrosrtm2 = rsf.doc.rsfprog('sflrosrtm2','user/jsun/Mlrosrtm2.c','''2-D Low-rank One-step Pre-stack Reverse-Time-Migration''')
sflrosrtm2.par('refl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflrosrtm2.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrosrtm2.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrosrtm2.par('img2',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflrosrtm2.par('tmpwf',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflrosrtm2.par('tmpbwf',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflrosrtm2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrosrtm2.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrosrtm2.par('leftb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrosrtm2.par('rightb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrosrtm2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity'''))
sflrosrtm2.par('wantwf',rsf.doc.rsfpar('bool','n','','''output forward and backward wavefield'''))
sflrosrtm2.par('wantrecord',rsf.doc.rsfpar('bool','y','','''if n, using record data generated by this program '''))
sflrosrtm2.par('dbg',rsf.doc.rsfpar('bool','n','','''debug mode - doesn't propagate receiver wavefield '''))
sflrosrtm2.par('srcill',rsf.doc.rsfpar('bool','y','','''true - source illumination; false - receiver illumination '''))
sflrosrtm2.par('srctrunc',rsf.doc.rsfpar('float','0.4','',''''''))
sflrosrtm2.par('rectz',rsf.doc.rsfpar('int','1','',''''''))
sflrosrtm2.par('rectx',rsf.doc.rsfpar('int','1','',''''''))
sflrosrtm2.par('repeat',rsf.doc.rsfpar('int','0','',''''''))
sflrosrtm2.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sflrosrtm2.par('top',rsf.doc.rsfpar('int','40','',''''''))
sflrosrtm2.par('bot',rsf.doc.rsfpar('int','40','',''''''))
sflrosrtm2.par('lft',rsf.doc.rsfpar('int','40','',''''''))
sflrosrtm2.par('rht',rsf.doc.rsfpar('int','40','','''Width of abc layer '''))
sflrosrtm2.par('slx',rsf.doc.rsfpar('float','-1.0','','''source location x '''))
sflrosrtm2.par('spx',rsf.doc.rsfpar('int','-1','','''source location x (index)'''))
sflrosrtm2.par('slz',rsf.doc.rsfpar('float','-1.0','','''source location z '''))
sflrosrtm2.par('spz',rsf.doc.rsfpar('int','-1','','''source location z (index)'''))
sflrosrtm2.par('gdep',rsf.doc.rsfpar('float','-1.0','','''recorder depth on grid'''))
sflrosrtm2.par('gpz',rsf.doc.rsfpar('int','0','','''recorder depth on index'''))
sflrosrtm2.par('gpx',rsf.doc.rsfpar('int','','','''recorder starting location on index'''))
sflrosrtm2.par('gpl',rsf.doc.rsfpar('int','','','''recorder length on index'''))
sflrosrtm2.par('snapinter',rsf.doc.rsfpar('int','10','','''snap interval '''))
sflrosrtm2.version('2.1-git')
sflrosrtm2.synopsis('''sflrosrtm2 refl=Frefl.rsf vel=Fvel.rsf < Fsrc.rsf rec=Frcd.rsf > Fimg1.rsf img2=Fimg2.rsf tmpwf=Ftmpwf.rsf tmpbwf=Ftmpbwf.rsf left=left.rsf right=right.rsf leftb=leftb.rsf rightb=rightb.rsf verb=n wantwf=n wantrecord=y dbg=n srcill=y srctrunc=0.4 rectz=1 rectx=1 repeat=0 pad1=1 top=40 bot=40 lft=40 rht=40 slx=-1.0 spx=-1 slz=-1.0 spz=-1 gdep=-1.0 gpz=0 gpx= gpl= snapinter=10''','''img1 :  crosscorrelation
img2 :  crosscorrelation with source/receiver normalization

''')
rsf.doc.progs['sflrosrtm2']=sflrosrtm2

sflroslsrtm2 = rsf.doc.rsfprog('sflroslsrtm2','user/jsun/Mlroslsrtm2.c','''2-D Low-rank One-step Pre-stack Reverse-Time-Migration in the complex domain (both img and data are complex valued)''')
sflroslsrtm2.par('src',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflroslsrtm2.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflroslsrtm2.par('tmpwf',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflroslsrtm2.par('tmpbwf',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflroslsrtm2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflroslsrtm2.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflroslsrtm2.par('leftb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflroslsrtm2.par('rightb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflroslsrtm2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity'''))
sflroslsrtm2.par('adj',rsf.doc.rsfpar('bool','y','','''migration'''))
sflroslsrtm2.par('wantwf',rsf.doc.rsfpar('bool','n','','''output forward and backward wavefield'''))
sflroslsrtm2.par('wantrecord',rsf.doc.rsfpar('bool','y','','''if n, using record data generated by this program '''))
sflroslsrtm2.par('srctrunc',rsf.doc.rsfpar('float','0.4','',''''''))
sflroslsrtm2.par('rectz',rsf.doc.rsfpar('int','1','',''''''))
sflroslsrtm2.par('rectx',rsf.doc.rsfpar('int','1','',''''''))
sflroslsrtm2.par('repeat',rsf.doc.rsfpar('int','0','',''''''))
sflroslsrtm2.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sflroslsrtm2.par('top',rsf.doc.rsfpar('int','40','',''''''))
sflroslsrtm2.par('bot',rsf.doc.rsfpar('int','40','',''''''))
sflroslsrtm2.par('lft',rsf.doc.rsfpar('int','40','',''''''))
sflroslsrtm2.par('rht',rsf.doc.rsfpar('int','40','','''Width of abc layer '''))
sflroslsrtm2.par('slx',rsf.doc.rsfpar('float','-1.0','','''source location x '''))
sflroslsrtm2.par('spx',rsf.doc.rsfpar('int','-1','','''source location x (index)'''))
sflroslsrtm2.par('slz',rsf.doc.rsfpar('float','-1.0','','''source location z '''))
sflroslsrtm2.par('spz',rsf.doc.rsfpar('int','-1','','''source location z (index)'''))
sflroslsrtm2.par('gdep',rsf.doc.rsfpar('float','-1.0','','''recorder depth on grid'''))
sflroslsrtm2.par('gpz',rsf.doc.rsfpar('int','0','','''recorder depth on index'''))
sflroslsrtm2.par('gpx',rsf.doc.rsfpar('int','','','''recorder starting location on index'''))
sflroslsrtm2.par('gpl',rsf.doc.rsfpar('int','','','''recorder length on index'''))
sflroslsrtm2.par('snapinter',rsf.doc.rsfpar('int','10','','''snap interval '''))
sflroslsrtm2.version('2.1-git')
sflroslsrtm2.synopsis('''sflroslsrtm2 < Frcd.rsf src=Fsrc.rsf > Fimg.rsf vel=Fvel.rsf tmpwf=Ftmpwf.rsf tmpbwf=Ftmpbwf.rsf left=left.rsf right=right.rsf leftb=leftb.rsf rightb=rightb.rsf verb=n adj=y wantwf=n wantrecord=y srctrunc=0.4 rectz=1 rectx=1 repeat=0 pad1=1 top=40 bot=40 lft=40 rht=40 slx=-1.0 spx=-1 slz=-1.0 spz=-1 gdep=-1.0 gpz=0 gpx= gpl= snapinter=10''','''img :  crosscorrelation with source normalization (stdout)
''')
rsf.doc.progs['sflroslsrtm2']=sflroslsrtm2

sfstack2d = rsf.doc.rsfprog('sfstack2d','user/jsun/Mstack2d.c','''Stack multi-shots images ''')
sfstack2d.version('2.1-git')
sfstack2d.synopsis('''sfstack2d < Fin.rsf > Fout.rsf file0.rsf file1.rsf file2.rsf ...''','''''')
rsf.doc.progs['sfstack2d']=sfstack2d

sfcstack2d = rsf.doc.rsfprog('sfcstack2d','user/jsun/Mcstack2d.c','''Stack multi-shots images with complex values''')
sfcstack2d.version('2.1-git')
sfcstack2d.synopsis('''sfcstack2d < Fin.rsf > Fout.rsf file0.rsf file1.rsf file2.rsf ...''','''''')
rsf.doc.progs['sfcstack2d']=sfcstack2d

sffftexp0test = rsf.doc.rsfprog('sffftexp0test','user/jsun/Mfftexp0test.c','''2-D FFT-based zero-offset exploding reflector modeling/migration (outputs time volume; can be used to generate movies) ''')
sffftexp0test.par('movie',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffftexp0test.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftexp0test.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftexp0test.par('mig',rsf.doc.rsfpar('bool','n','','''if n, modeling; if y, migration '''))
sffftexp0test.par('cmplx',rsf.doc.rsfpar('bool','n','','''use complex FFT '''))
sffftexp0test.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sffftexp0test.par('nz',rsf.doc.rsfpar('int','','','''time samples (if migration) '''))
sffftexp0test.par('dz',rsf.doc.rsfpar('float','','','''time sampling (if migration) '''))
sffftexp0test.par('nt',rsf.doc.rsfpar('int','','','''time samples (if modeling) '''))
sffftexp0test.par('dt',rsf.doc.rsfpar('float','','','''time sampling (if modeling) '''))
sffftexp0test.par('jt',rsf.doc.rsfpar('int','1','','''time interval '''))
sffftexp0test.version('2.1-git')
sffftexp0test.synopsis('''sffftexp0test movie=movie.rsf < data.rsf > image.rsf left=left.rsf right=right.rsf mig=n cmplx=n pad1=1 nz= dz= nt= dt= jt=1''','''''')
rsf.doc.progs['sffftexp0test']=sffftexp0test

sflrlsrtm2mpi = rsf.doc.rsfprog('sflrlsrtm2mpi','user/jsun/Mlrlsrtm2mpi.c','''2-D Low-rank One-step Least Pre-stack Reverse-Time-Migration in the complex domain (both img and data are complex valued) without MPI...''')
sflrlsrtm2mpi.par('src',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrlsrtm2mpi.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrlsrtm2mpi.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrlsrtm2mpi.par('leftb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrlsrtm2mpi.par('rightb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrlsrtm2mpi.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrlsrtm2mpi.par('tmpwf',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflrlsrtm2mpi.par('tmpbwf',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflrlsrtm2mpi.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity'''))
sflrlsrtm2mpi.par('adj',rsf.doc.rsfpar('bool','y','','''migration'''))
sflrlsrtm2mpi.par('wantwf',rsf.doc.rsfpar('bool','n','','''output forward and backward wavefield'''))
sflrlsrtm2mpi.par('wantrecord',rsf.doc.rsfpar('bool','y','','''if n, using record data generated by this program '''))
sflrlsrtm2mpi.par('illum',rsf.doc.rsfpar('bool','y','','''if n, no source illumination '''))
sflrlsrtm2mpi.par('shtbgn',rsf.doc.rsfpar('int','','',''''''))
sflrlsrtm2mpi.par('sht0',rsf.doc.rsfpar('int','shtbgn','','''actual shot origin on grid'''))
sflrlsrtm2mpi.par('shtend',rsf.doc.rsfpar('int','','',''''''))
sflrlsrtm2mpi.par('shtint',rsf.doc.rsfpar('int','','',''''''))
sflrlsrtm2mpi.par('spz',rsf.doc.rsfpar('int','','',''''''))
sflrlsrtm2mpi.par('spz',rsf.doc.rsfpar('int','','',''''''))
sflrlsrtm2mpi.par('gpz',rsf.doc.rsfpar('int','','',''''''))
sflrlsrtm2mpi.par('gpl',rsf.doc.rsfpar('int','','',''''''))
sflrlsrtm2mpi.par('snapinter',rsf.doc.rsfpar('int','10','','''snap interval '''))
sflrlsrtm2mpi.par('srctrunc',rsf.doc.rsfpar('float','0.4','',''''''))
sflrlsrtm2mpi.par('rectz',rsf.doc.rsfpar('int','1','',''''''))
sflrlsrtm2mpi.par('rectx',rsf.doc.rsfpar('int','1','',''''''))
sflrlsrtm2mpi.par('repeat',rsf.doc.rsfpar('int','0','','''abc parameters '''))
sflrlsrtm2mpi.par('top',rsf.doc.rsfpar('int','40','',''''''))
sflrlsrtm2mpi.par('bot',rsf.doc.rsfpar('int','40','',''''''))
sflrlsrtm2mpi.par('lft',rsf.doc.rsfpar('int','40','',''''''))
sflrlsrtm2mpi.par('rht',rsf.doc.rsfpar('int','40','','''Set I/O file'''))
sflrlsrtm2mpi.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sflrlsrtm2mpi.version('2.1-git')
sflrlsrtm2mpi.synopsis('''sflrlsrtm2mpi < Frcd.rsf src=Fsrc.rsf > Fimg.rsf left=left.rsf right=right.rsf leftb=leftb.rsf rightb=rightb.rsf vel=Fvel.rsf tmpwf=Ftmpwf.rsf tmpbwf=Ftmpbwf.rsf verb=n adj=y wantwf=n wantrecord=y illum=y shtbgn= sht0=shtbgn shtend= shtint= spz= spz= gpz= gpl= snapinter=10 srctrunc=0.4 rectz=1 rectx=1 repeat=0 top=40 bot=40 lft=40 rht=40 pad1=1''','''img :  crosscorrelation with source normalization (stdout)
''')
rsf.doc.progs['sflrlsrtm2mpi']=sflrlsrtm2mpi

sfimagsrc = rsf.doc.rsfprog('sfimagsrc','user/jsun/Mimagsrc.c','''Convolution with a Ricker wavelet. ''')
sfimagsrc.par('frequency',rsf.doc.rsfpar('float','','','''peak frequency for Ricker wavelet (in Hz) '''))
sfimagsrc.par('freq',rsf.doc.rsfpar('float','0.2','','''peak frequency for Ricker wavelet (as fraction of Nyquist) '''))
sfimagsrc.version('2.1-git')
sfimagsrc.synopsis('''sfimagsrc < in.rsf > out.rsf frequency= freq=0.2''','''''')
rsf.doc.progs['sfimagsrc']=sfimagsrc

sfzolsrtm2 = rsf.doc.rsfprog('sfzolsrtm2','user/jsun/Mzolsrtm2.c','''2-D FFT-based zero-offset exploding reflector modeling/migration linear operator ''')
sfzolsrtm2.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfzolsrtm2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzolsrtm2.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzolsrtm2.par('adj',rsf.doc.rsfpar('bool','n','','''if n, modeling; if y, migration '''))
sfzolsrtm2.par('timer',rsf.doc.rsfpar('bool','n','',''''''))
sfzolsrtm2.par('verb',rsf.doc.rsfpar('bool','n','',''''''))
sfzolsrtm2.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sfzolsrtm2.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfzolsrtm2.par('gpz',rsf.doc.rsfpar('int','0','','''geophone surface '''))
sfzolsrtm2.par('taper',rsf.doc.rsfpar('int','0','','''tapering in the frequency domain '''))
sfzolsrtm2.par('thresh',rsf.doc.rsfpar('float','0.92','','''tapering threshold '''))
sfzolsrtm2.par('oz',rsf.doc.rsfpar('float','0.','',''''''))
sfzolsrtm2.par('nz',rsf.doc.rsfpar('int','','','''depth samples '''))
sfzolsrtm2.par('dz',rsf.doc.rsfpar('float','','','''depth sampling '''))
sfzolsrtm2.par('nt',rsf.doc.rsfpar('int','','','''time samples '''))
sfzolsrtm2.par('dt',rsf.doc.rsfpar('float','','','''time sampling '''))
sfzolsrtm2.version('2.1-git')
sfzolsrtm2.synopsis('''sfzolsrtm2 < data.rsf > image.rsf snaps=snaps.rsf left=left.rsf right=right.rsf adj=n timer=n verb=n snap=0 pad1=1 gpz=0 taper=0 thresh=0.92 oz=0. nz= dz= nt= dt=''','''''')
rsf.doc.progs['sfzolsrtm2']=sfzolsrtm2

sfinitwave2 = rsf.doc.rsfprog('sfinitwave2','user/jsun/Minitwave2.c','''Complex 2-D wave propagation using initial condition ''')
sfinitwave2.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfinitwave2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfinitwave2.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfinitwave2.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity '''))
sfinitwave2.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfinitwave2.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfinitwave2.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sfinitwave2.par('correct',rsf.doc.rsfpar('bool','n','','''correction'''))
sfinitwave2.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfinitwave2.par('mode',rsf.doc.rsfpar('string ',desc='''default mode is pspi '''))
sfinitwave2.version('2.1-git')
sfinitwave2.synopsis('''sfinitwave2 < Fi.rsf > Fo.rsf snaps=Fs.rsf left=left.rsf right=right.rsf verb=y nt= dt= snap=0 correct=n pad1=1 mode=''','''''')
rsf.doc.progs['sfinitwave2']=sfinitwave2

sfcorrectwave2 = rsf.doc.rsfprog('sfcorrectwave2','user/jsun/Mcorrectwave2.c','''Complex 2-D wave propagation using initial condition ''')
sfcorrectwave2.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcorrectwave2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcorrectwave2.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcorrectwave2.par('alpha',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcorrectwave2.par('beta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcorrectwave2.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity '''))
sfcorrectwave2.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfcorrectwave2.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfcorrectwave2.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sfcorrectwave2.par('correct',rsf.doc.rsfpar('bool','n','','''jingwei's correction'''))
sfcorrectwave2.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfcorrectwave2.par('mode',rsf.doc.rsfpar('string ',desc='''default mode is pspi '''))
sfcorrectwave2.version('2.1-git')
sfcorrectwave2.synopsis('''sfcorrectwave2 < Fi.rsf > Fo.rsf snaps=Fs.rsf left=left.rsf right=right.rsf alpha=Fa.rsf beta=Fb.rsf verb=y nt= dt= snap=0 correct=n pad1=1 mode=''','''''')
rsf.doc.progs['sfcorrectwave2']=sfcorrectwave2

sflrwave2 = rsf.doc.rsfprog('sflrwave2','user/jsun/Mlrwave2.c','''2-D FFT-based (point src) wave propagation and its adjoint ''')
sflrwave2.par('src',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrwave2.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflrwave2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrwave2.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrwave2.par('adj',rsf.doc.rsfpar('bool','n','','''if n, modeling; if y, migration '''))
sflrwave2.par('timer',rsf.doc.rsfpar('bool','n','',''''''))
sflrwave2.par('verb',rsf.doc.rsfpar('bool','n','',''''''))
sflrwave2.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sflrwave2.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sflrwave2.par('nt',rsf.doc.rsfpar('int','','','''time samples '''))
sflrwave2.par('dt',rsf.doc.rsfpar('float','','','''time sampling '''))
sflrwave2.par('nt',rsf.doc.rsfpar('int','','','''time samples '''))
sflrwave2.par('dt',rsf.doc.rsfpar('float','','','''time sampling '''))
sflrwave2.version('2.1-git')
sflrwave2.synopsis('''sflrwave2 < data.rsf > image.rsf src=src.rsf snaps=snaps.rsf left=left.rsf right=right.rsf adj=n timer=n verb=n snap=0 pad1=1 nt= dt= nt= dt=''','''''')
rsf.doc.progs['sflrwave2']=sflrwave2

sfcmatrix = rsf.doc.rsfprog('sfcmatrix','user/jsun/Mcmatrix.c','''multiply, for complex Matrix ''')
sfcmatrix.par('B',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcmatrix.version('2.1-git')
sfcmatrix.synopsis('''sfcmatrix < inA.rsf B=inB.rsf > outC.rsf''','''''')
rsf.doc.progs['sfcmatrix']=sfcmatrix

sfcfftwave1d = rsf.doc.rsfprog('sfcfftwave1d','user/jsun/Mcfftwave1d.c','''1-D complex lowrank FFT wave extrapolation using complex to complex fft using initial condition''')
sfcfftwave1d.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave1d.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave1d.par('prop',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave1d.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfcfftwave1d.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfcfftwave1d.par('sub',rsf.doc.rsfpar('bool','n','','''if -1 is included in the matrix '''))
sfcfftwave1d.par('os',rsf.doc.rsfpar('bool','y','',''''''))
sfcfftwave1d.par('cos',rsf.doc.rsfpar('bool','y','',''''''))
sfcfftwave1d.par('cft',rsf.doc.rsfpar('bool','y','',''''''))
sfcfftwave1d.par('cmplx',rsf.doc.rsfpar('bool','n','',''''''))
sfcfftwave1d.par('right',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfcfftwave1d.version('2.1-git')
sfcfftwave1d.synopsis('''sfcfftwave1d < Fw.rsf > Fo.rsf right=right.rsf left=left.rsf prop=prop.rsf nt= dt= sub=n os=y cos=y cft=y cmplx=n''','''''')
rsf.doc.progs['sfcfftwave1d']=sfcfftwave1d

sfzortmgmres = rsf.doc.rsfprog('sfzortmgmres','user/jsun/Mzortmgmres.c','''2-D FFT-based zero-offset exploding reflector modeling/migration linear operator ''')
sfzortmgmres.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfzortmgmres.par('leftf',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzortmgmres.par('rightf',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzortmgmres.par('leftb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzortmgmres.par('rightb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzortmgmres.par('gmres',rsf.doc.rsfpar('bool','n','',''''''))
sfzortmgmres.par('niter',rsf.doc.rsfpar('int','10','',''''''))
sfzortmgmres.par('mem',rsf.doc.rsfpar('int','20','',''''''))
sfzortmgmres.par('timer',rsf.doc.rsfpar('bool','n','',''''''))
sfzortmgmres.par('verb',rsf.doc.rsfpar('bool','n','',''''''))
sfzortmgmres.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sfzortmgmres.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfzortmgmres.par('gpz',rsf.doc.rsfpar('int','0','','''geophone surface '''))
sfzortmgmres.par('nz',rsf.doc.rsfpar('int','','','''depth samples '''))
sfzortmgmres.par('dz',rsf.doc.rsfpar('float','','','''depth sampling '''))
sfzortmgmres.par('nt',rsf.doc.rsfpar('int','','','''time samples '''))
sfzortmgmres.par('dt',rsf.doc.rsfpar('float','','','''time sampling '''))
sfzortmgmres.par('nt',rsf.doc.rsfpar('int','','','''time samples '''))
sfzortmgmres.par('dt',rsf.doc.rsfpar('float','','','''time sampling '''))
sfzortmgmres.version('2.1-git')
sfzortmgmres.synopsis('''sfzortmgmres < data.rsf > image.rsf snaps=snaps.rsf leftf=leftf.rsf rightf=rightf.rsf leftb=leftb.rsf rightb=rightb.rsf gmres=n niter=10 mem=20 timer=n verb=n snap=0 pad1=1 gpz=0 nz= dz= nt= dt= nt= dt=''','''''')
rsf.doc.progs['sfzortmgmres']=sfzortmgmres

sfclaplac = rsf.doc.rsfprog('sfclaplac','user/jsun/Mclaplac.c','''2-D finite-difference Laplacian operation for complex numbers. ''')
sfclaplac.version('2.1-git')
sfclaplac.synopsis('''sfclaplac < in.rsf > out.rsf''','''''')
rsf.doc.progs['sfclaplac']=sfclaplac

sfpsp = rsf.doc.rsfprog('sfpsp','user/jsun/Mpsp.c','''Pseudo-spectral wave extrapolation/migration using second-order two-way wave equation ''')
sfpsp.par('dat',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpsp.par('dat_v',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpsp.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpsp.par('spx',rsf.doc.rsfpar('ints','','','''shot position x  [n_srcs]'''))
sfpsp.par('spz',rsf.doc.rsfpar('ints','','','''shot position z  [n_srcs]'''))
sfpsp.par('f0',rsf.doc.rsfpar('floats','','','''wavelet peak freq  [n_srcs]'''))
sfpsp.par('t0',rsf.doc.rsfpar('floats','','','''wavelet time lag  [n_srcs]'''))
sfpsp.par('A',rsf.doc.rsfpar('floats','','','''wavelet amplitude  [n_srcs]'''))
sfpsp.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sfpsp.par('cmplx',rsf.doc.rsfpar('bool','y','','''use complex fft '''))
sfpsp.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfpsp.par('abc',rsf.doc.rsfpar('bool','n','','''absorbing flag '''))
sfpsp.par('nbt',rsf.doc.rsfpar('int','','',''''''))
sfpsp.par('nbb',rsf.doc.rsfpar('int','nbt','',''''''))
sfpsp.par('nbl',rsf.doc.rsfpar('int','nbt','',''''''))
sfpsp.par('nbr',rsf.doc.rsfpar('int','nbt','',''''''))
sfpsp.par('ct',rsf.doc.rsfpar('float','','',''''''))
sfpsp.par('cb',rsf.doc.rsfpar('float','ct','',''''''))
sfpsp.par('cl',rsf.doc.rsfpar('float','ct','',''''''))
sfpsp.par('cr',rsf.doc.rsfpar('float','ct','',''''''))
sfpsp.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfpsp.par('ps',rsf.doc.rsfpar('bool','n','','''use pseudo-spectral '''))
sfpsp.par('mig',rsf.doc.rsfpar('bool','n','','''use pseudo-spectral '''))
sfpsp.par('vref',rsf.doc.rsfpar('float','1500','','''reference velocity (default using water) '''))
sfpsp.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfpsp.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfpsp.par('gpl',rsf.doc.rsfpar('int','-1','','''geophone length '''))
sfpsp.par('gpl_v',rsf.doc.rsfpar('int','-1','','''geophone height '''))
sfpsp.par('src',rsf.doc.rsfpar('int','0','','''source type '''))
sfpsp.par('n_srcs',rsf.doc.rsfpar('int','1','','''source type '''))
sfpsp.par('gpx',rsf.doc.rsfpar('int','-1','','''geophone position x '''))
sfpsp.par('gpz',rsf.doc.rsfpar('int','-1','','''geophone position z '''))
sfpsp.par('gpx_v',rsf.doc.rsfpar('int','-1','','''geophone position x '''))
sfpsp.par('gpz_v',rsf.doc.rsfpar('int','-1','','''geophone position z '''))
sfpsp.par('dat',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfpsp.par('dat',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfpsp.par('dat_v',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfpsp.par('dat_v',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfpsp.version('2.1-git')
sfpsp.synopsis('''sfpsp < Fi.rsf > Fo.rsf dat=Fd.rsf dat_v=Fd_v.rsf snaps=snaps.rsf spx= spz= f0= t0= A= snap=0 cmplx=y pad1=1 abc=n nbt= nbb=nbt nbl=nbt nbr=nbt ct= cb=ct cl=ct cr=ct verb=n ps=n mig=n vref=1500 nt= dt= gpl=-1 gpl_v=-1 src=0 n_srcs=1 gpx=-1 gpz=-1 gpx_v=-1 gpz_v=-1''','''''')
rsf.doc.progs['sfpsp']=sfpsp

sfpspmig = rsf.doc.rsfprog('sfpspmig','user/jsun/Mpspmig.c','''Pseudo-spectral migration/de-migration adjoint operators using second-order two-way wave equation ''')
sfpspmig.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpspmig.par('dat_v',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpspmig.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpspmig.par('spx',rsf.doc.rsfpar('ints','','','''shot position x  [n_srcs]'''))
sfpspmig.par('spz',rsf.doc.rsfpar('ints','','','''shot position z  [n_srcs]'''))
sfpspmig.par('f0',rsf.doc.rsfpar('floats','','','''wavelet peak freq  [n_srcs]'''))
sfpspmig.par('t0',rsf.doc.rsfpar('floats','','','''wavelet time lag  [n_srcs]'''))
sfpspmig.par('A',rsf.doc.rsfpar('floats','','','''wavelet amplitude  [n_srcs]'''))
sfpspmig.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sfpspmig.par('cmplx',rsf.doc.rsfpar('bool','y','','''use complex fft '''))
sfpspmig.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfpspmig.par('abc',rsf.doc.rsfpar('bool','n','','''absorbing flag '''))
sfpspmig.par('born',rsf.doc.rsfpar('bool','n','','''absorbing flag '''))
sfpspmig.par('nbt',rsf.doc.rsfpar('int','','',''''''))
sfpspmig.par('nbb',rsf.doc.rsfpar('int','nbt','',''''''))
sfpspmig.par('nbl',rsf.doc.rsfpar('int','nbt','',''''''))
sfpspmig.par('nbr',rsf.doc.rsfpar('int','nbt','',''''''))
sfpspmig.par('ct',rsf.doc.rsfpar('float','','',''''''))
sfpspmig.par('cb',rsf.doc.rsfpar('float','ct','',''''''))
sfpspmig.par('cl',rsf.doc.rsfpar('float','ct','',''''''))
sfpspmig.par('cr',rsf.doc.rsfpar('float','ct','',''''''))
sfpspmig.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfpspmig.par('ps',rsf.doc.rsfpar('bool','n','','''use pseudo-spectral '''))
sfpspmig.par('adj',rsf.doc.rsfpar('bool','n','','''use pseudo-spectral '''))
sfpspmig.par('vref',rsf.doc.rsfpar('float','1500','','''reference velocity (default using water) '''))
sfpspmig.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfpspmig.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfpspmig.par('gpl',rsf.doc.rsfpar('int','-1','','''geophone length '''))
sfpspmig.par('gpl_v',rsf.doc.rsfpar('int','-1','','''geophone height '''))
sfpspmig.par('src',rsf.doc.rsfpar('int','0','','''source type '''))
sfpspmig.par('n_srcs',rsf.doc.rsfpar('int','1','','''source type '''))
sfpspmig.par('gpx',rsf.doc.rsfpar('int','-1','','''geophone position x '''))
sfpspmig.par('gpz',rsf.doc.rsfpar('int','-1','','''geophone position z '''))
sfpspmig.par('gpx_v',rsf.doc.rsfpar('int','-1','','''geophone position x '''))
sfpspmig.par('gpz_v',rsf.doc.rsfpar('int','-1','','''geophone position z '''))
sfpspmig.par('dat_v',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfpspmig.par('dat_v',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfpspmig.version('2.1-git')
sfpspmig.synopsis('''sfpspmig < Fi.rsf > Fo.rsf vel=Fv.rsf dat_v=Fd_v.rsf snaps=snaps.rsf spx= spz= f0= t0= A= snap=0 cmplx=y pad1=1 abc=n born=n nbt= nbb=nbt nbl=nbt nbr=nbt ct= cb=ct cl=ct cr=ct verb=n ps=n adj=n vref=1500 nt= dt= gpl=-1 gpl_v=-1 src=0 n_srcs=1 gpx=-1 gpz=-1 gpx_v=-1 gpz_v=-1''','''''')
rsf.doc.progs['sfpspmig']=sfpspmig

sfpremig = rsf.doc.rsfprog('sfpremig','user/jsun/Mpremig.c','''Pseudo-spectral pre-stack source-receiver source independent diffraction imaging ''')
sfpremig.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpremig.par('dat_v',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpremig.par('dat_2',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpremig.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpremig.par('spx',rsf.doc.rsfpar('ints','','','''shot position x  [n_srcs]'''))
sfpremig.par('spz',rsf.doc.rsfpar('ints','','','''shot position z  [n_srcs]'''))
sfpremig.par('f0',rsf.doc.rsfpar('floats','','','''wavelet peak freq  [n_srcs]'''))
sfpremig.par('t0',rsf.doc.rsfpar('floats','','','''wavelet time lag  [n_srcs]'''))
sfpremig.par('A',rsf.doc.rsfpar('floats','','','''wavelet amplitude  [n_srcs]'''))
sfpremig.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sfpremig.par('cmplx',rsf.doc.rsfpar('bool','y','','''use complex fft '''))
sfpremig.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfpremig.par('abc',rsf.doc.rsfpar('bool','n','','''absorbing flag '''))
sfpremig.par('roll',rsf.doc.rsfpar('bool','n','','''if n, receiver is independent of source location and gpl=nx'''))
sfpremig.par('born',rsf.doc.rsfpar('bool','n','','''born modeling flag '''))
sfpremig.par('diff',rsf.doc.rsfpar('bool','n','','''diffraction imaging flag '''))
sfpremig.par('justrec',rsf.doc.rsfpar('bool','n','','''just need full waveform record (no born or rtdm) '''))
sfpremig.par('nbt',rsf.doc.rsfpar('int','','',''''''))
sfpremig.par('nbb',rsf.doc.rsfpar('int','nbt','',''''''))
sfpremig.par('nbl',rsf.doc.rsfpar('int','nbt','',''''''))
sfpremig.par('nbr',rsf.doc.rsfpar('int','nbt','',''''''))
sfpremig.par('ct',rsf.doc.rsfpar('float','','',''''''))
sfpremig.par('cb',rsf.doc.rsfpar('float','ct','',''''''))
sfpremig.par('cl',rsf.doc.rsfpar('float','ct','',''''''))
sfpremig.par('cr',rsf.doc.rsfpar('float','ct','',''''''))
sfpremig.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfpremig.par('ps',rsf.doc.rsfpar('bool','n','','''use pseudo-spectral '''))
sfpremig.par('adj',rsf.doc.rsfpar('bool','n','','''use pseudo-spectral '''))
sfpremig.par('vref',rsf.doc.rsfpar('float','1500','','''reference velocity (default using water) '''))
sfpremig.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfpremig.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfpremig.par('gpl',rsf.doc.rsfpar('int','-1','','''geophone length '''))
sfpremig.par('gpl_v',rsf.doc.rsfpar('int','-1','','''geophone height '''))
sfpremig.par('src',rsf.doc.rsfpar('int','0','','''source type '''))
sfpremig.par('n_srcs',rsf.doc.rsfpar('int','1','','''source type '''))
sfpremig.par('shtbgn',rsf.doc.rsfpar('int','','',''''''))
sfpremig.par('shtend',rsf.doc.rsfpar('int','','',''''''))
sfpremig.par('shtint',rsf.doc.rsfpar('int','','',''''''))
sfpremig.par('which',rsf.doc.rsfpar('int','0','',''''''))
sfpremig.par('gpx',rsf.doc.rsfpar('int','-1','','''geophone position x '''))
sfpremig.par('gpz',rsf.doc.rsfpar('int','-1','','''geophone position z '''))
sfpremig.par('gpx_v',rsf.doc.rsfpar('int','-1','','''geophone position x '''))
sfpremig.par('gpz_v',rsf.doc.rsfpar('int','-1','','''geophone position z '''))
sfpremig.par('offset',rsf.doc.rsfpar('int','0','','''nearest offset '''))
sfpremig.par('split',rsf.doc.rsfpar('int','1','','''receiver split '''))
sfpremig.par('dat_v',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfpremig.par('dat_v',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfpremig.version('2.1-git')
sfpremig.synopsis('''sfpremig < Fi.rsf > Fo.rsf vel=Fv.rsf dat_v=Fd_v.rsf dat_2=Fi1.rsf snaps=snaps.rsf spx= spz= f0= t0= A= snap=0 cmplx=y pad1=1 abc=n roll=n born=n diff=n justrec=n nbt= nbb=nbt nbl=nbt nbr=nbt ct= cb=ct cl=ct cr=ct verb=n ps=n adj=n vref=1500 nt= dt= gpl=-1 gpl_v=-1 src=0 n_srcs=1 shtbgn= shtend= shtint= which=0 gpx=-1 gpz=-1 gpx_v=-1 gpz_v=-1 offset=0 split=1''','''''')
rsf.doc.progs['sfpremig']=sfpremig

sfcfftwave2omp = rsf.doc.rsfprog('sfcfftwave2omp','user/jsun/Mcfftwave2omp.c','''Complex 2-D wave propagation (with multi-threaded FFTW3)''')
sfcfftwave2omp.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave2omp.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave2omp.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave2omp.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfcfftwave2omp.par('cmplx',rsf.doc.rsfpar('bool','y','','''outputs complex wavefield '''))
sfcfftwave2omp.par('os',rsf.doc.rsfpar('bool','y','','''one-step flag '''))
sfcfftwave2omp.par('sub',rsf.doc.rsfpar('bool','n','','''subtraction flag '''))
sfcfftwave2omp.par('sub',rsf.doc.rsfpar('bool','y','','''subtraction flag '''))
sfcfftwave2omp.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfcfftwave2omp.version('2.1-git')
sfcfftwave2omp.synopsis('''sfcfftwave2omp < Fw.rsf > Fo.rsf ref=Fr.rsf left=left.rsf right=right.rsf verb=n cmplx=y os=y sub=n sub=y pad1=1''','''''')
rsf.doc.progs['sfcfftwave2omp']=sfcfftwave2omp

sflrtti2de = rsf.doc.rsfprog('sflrtti2de','user/jsun/Mlrtti2de.c','''2-D two-components wavefield modeling using original elastic displacement wave equation in TTI media by lowrank method. ''')
sflrtti2de.par('pleft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrtti2de.par('pright',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrtti2de.par('sleft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrtti2de.par('sright',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflrtti2de.par('Elasticz',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflrtti2de.par('Pwavez',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflrtti2de.par('Pwavex',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflrtti2de.par('Swavez',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflrtti2de.par('Swavex',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sflrtti2de.par('nt',rsf.doc.rsfpar('int','301','',''''''))
sflrtti2de.par('dt',rsf.doc.rsfpar('float','0.001','','''absorbing boundary condition'''))
sflrtti2de.par('abc',rsf.doc.rsfpar('bool','n','','''absorbing flag '''))
sflrtti2de.par('nbt',rsf.doc.rsfpar('int','','',''''''))
sflrtti2de.par('nbb',rsf.doc.rsfpar('int','nbt','',''''''))
sflrtti2de.par('nbl',rsf.doc.rsfpar('int','nbt','',''''''))
sflrtti2de.par('nbr',rsf.doc.rsfpar('int','nbt','',''''''))
sflrtti2de.par('ct',rsf.doc.rsfpar('float','','',''''''))
sflrtti2de.par('cb',rsf.doc.rsfpar('float','ct','',''''''))
sflrtti2de.par('cl',rsf.doc.rsfpar('float','ct','',''''''))
sflrtti2de.par('cr',rsf.doc.rsfpar('float','ct','',''''''))
sflrtti2de.par('isx',rsf.doc.rsfpar('int','nx/2','',''''''))
sflrtti2de.par('isz',rsf.doc.rsfpar('int','nz/2','',''''''))
sflrtti2de.par('t0',rsf.doc.rsfpar('float','0.04','','''wavelet time lag '''))
sflrtti2de.par('f0',rsf.doc.rsfpar('float','30.0','','''wavelet peak freq '''))
sflrtti2de.par('A',rsf.doc.rsfpar('float','1.0','','''wavelet amplitude '''))
sflrtti2de.par('cmplx',rsf.doc.rsfpar('bool','n','','''use complex FFT '''))
sflrtti2de.par('sep',rsf.doc.rsfpar('bool','n','','''output separated wavefields '''))
sflrtti2de.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sflrtti2de.par('src',rsf.doc.rsfpar('int','1','','''source mode: 1 - exploding force; 2 - equil-energy force '''))
sflrtti2de.par('Pwavez',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sflrtti2de.par('Pwavex',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sflrtti2de.par('Swavez',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sflrtti2de.par('Swavex',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sflrtti2de.par('Pwavez',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sflrtti2de.par('Pwavex',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sflrtti2de.par('Swavez',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sflrtti2de.par('Swavex',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sflrtti2de.version('2.1-git')
sflrtti2de.synopsis('''sflrtti2de < Fvp0.rsf pleft=Fpl.rsf pright=Fpr.rsf sleft=Fsl.rsf sright=Fsr.rsf > Fo1.rsf Elasticz=Fo2.rsf Pwavez=Fpz.rsf Pwavex=Fpx.rsf Swavez=Fsz.rsf Swavex=Fsx.rsf nt=301 dt=0.001 abc=n nbt= nbb=nbt nbl=nbt nbr=nbt ct= cb=ct cl=ct cr=ct isx=nx/2 isz=nz/2 t0=0.04 f0=30.0 A=1.0 cmplx=n sep=n pad1=1 src=1''','''''')
rsf.doc.progs['sflrtti2de']=sflrtti2de

sfclfd1 = rsf.doc.rsfprog('sfclfd1','user/jsun/Mclfd1.c','''2-D Fourth-order Optimized Finite-difference wave extrapolation ''')
sfclfd1.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfclfd1.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfclfd1.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfclfd1.par('mode',rsf.doc.rsfpar('int','0','',''''''))
sfclfd1.par('cpxexp',rsf.doc.rsfpar('bool','y','',''''''))
sfclfd1.version('2.1-git')
sfclfd1.synopsis('''sfclfd1 > out.rsf < ini.rsf G=G.rsf dt= nt= mode=0 cpxexp=y''','''''')
rsf.doc.progs['sfclfd1']=sfclfd1

sfclfd2 = rsf.doc.rsfprog('sfclfd2','user/jsun/Mclfd2.c','''2-D Fourth-order Optimized Finite-difference wave extrapolation ''')
sfclfd2.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfclfd2.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfclfd2.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfclfd2.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfclfd2.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfclfd2.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfclfd2.par('size',rsf.doc.rsfpar('int','','',''''''))
sfclfd2.version('2.1-git')
sfclfd2.synopsis('''sfclfd2 > out.rsf vel=vel.rsf < source.rsf G=G.rsf dt= nt= isx= isz= size=''','''''')
rsf.doc.progs['sfclfd2']=sfclfd2

sfofd2_test = rsf.doc.rsfprog('sfofd2_test','user/jsun/Mofd2_test.c','''2-D Fourth-order Optimized Finite-difference wave extrapolation ''')
sfofd2_test.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_test.par('G',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfofd2_test.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfofd2_test.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfofd2_test.par('isx',rsf.doc.rsfpar('int','','',''''''))
sfofd2_test.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfofd2_test.version('2.1-git')
sfofd2_test.synopsis('''sfofd2_test > out.rsf vel=vel.rsf < source.rsf G=G.rsf dt= nt= isx= isz=''','''''')
rsf.doc.progs['sfofd2_test']=sfofd2_test

sfswnorm = rsf.doc.rsfprog('sfswnorm','user/jsun/Mswnorm.c','''Sliding window normalization ''')
sfswnorm.par('size',rsf.doc.rsfpar('int','0','','''sliding window radius '''))
sfswnorm.par('sw',rsf.doc.rsfpar('bool','n','','''sliding window '''))
sfswnorm.par('log',rsf.doc.rsfpar('bool','n','','''log scaling '''))
sfswnorm.par('var_thres',rsf.doc.rsfpar('float','0.','','''variance threshold (normalized) '''))
sfswnorm.par('perc',rsf.doc.rsfpar('float','5','','''threshold percentage of the maximum value '''))
sfswnorm.version('2.1-git')
sfswnorm.synopsis('''sfswnorm < in.rsf > out.rsf size=0 sw=n log=n var_thres=0. perc=5''','''''')
rsf.doc.progs['sfswnorm']=sfswnorm

sfpspp = rsf.doc.rsfprog('sfpspp','user/jsun/Mpspp.c','''Pseudo-spectral wave extrapolation for second-order two-way wave equation using wavefield injection for passive imaging ''')
sfpspp.par('wave',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpspp.par('dat_v',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpspp.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpspp.par('spx',rsf.doc.rsfpar('ints','','','''shot position x  [n_srcs]'''))
sfpspp.par('spz',rsf.doc.rsfpar('ints','','','''shot position z  [n_srcs]'''))
sfpspp.par('f0',rsf.doc.rsfpar('floats','','','''wavelet peak freq  [n_srcs]'''))
sfpspp.par('t0',rsf.doc.rsfpar('floats','','','''wavelet time lag  [n_srcs]'''))
sfpspp.par('A',rsf.doc.rsfpar('floats','','','''wavelet amplitude  [n_srcs]'''))
sfpspp.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sfpspp.par('cmplx',rsf.doc.rsfpar('bool','y','','''use complex fft '''))
sfpspp.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfpspp.par('abc',rsf.doc.rsfpar('bool','n','','''absorbing flag '''))
sfpspp.par('nbt',rsf.doc.rsfpar('int','','',''''''))
sfpspp.par('nbb',rsf.doc.rsfpar('int','nbt','',''''''))
sfpspp.par('nbl',rsf.doc.rsfpar('int','nbt','',''''''))
sfpspp.par('nbr',rsf.doc.rsfpar('int','nbt','',''''''))
sfpspp.par('ct',rsf.doc.rsfpar('float','','',''''''))
sfpspp.par('cb',rsf.doc.rsfpar('float','ct','',''''''))
sfpspp.par('cl',rsf.doc.rsfpar('float','ct','',''''''))
sfpspp.par('cr',rsf.doc.rsfpar('float','ct','',''''''))
sfpspp.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfpspp.par('ps',rsf.doc.rsfpar('bool','n','','''use pseudo-spectral '''))
sfpspp.par('vref',rsf.doc.rsfpar('float','1500','','''reference velocity (default using water) '''))
sfpspp.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfpspp.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfpspp.par('gpl',rsf.doc.rsfpar('int','-1','','''geophone length '''))
sfpspp.par('gpl_v',rsf.doc.rsfpar('int','-1','','''geophone height '''))
sfpspp.par('src',rsf.doc.rsfpar('int','0','','''source type '''))
sfpspp.par('n_srcs',rsf.doc.rsfpar('int','1','','''source type '''))
sfpspp.par('gpx',rsf.doc.rsfpar('int','-1','','''geophone position x '''))
sfpspp.par('gpz',rsf.doc.rsfpar('int','-1','','''geophone position z '''))
sfpspp.par('gpx_v',rsf.doc.rsfpar('int','-1','','''geophone position x '''))
sfpspp.par('gpz_v',rsf.doc.rsfpar('int','-1','','''geophone position z '''))
sfpspp.par('wave',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfpspp.par('dat_v',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfpspp.version('2.1-git')
sfpspp.synopsis('''sfpspp < Fi.rsf > Fo.rsf wave=Fw.rsf dat_v=Fd_v.rsf snaps=snaps.rsf spx= spz= f0= t0= A= snap=0 cmplx=y pad1=1 abc=n nbt= nbb=nbt nbl=nbt nbr=nbt ct= cb=ct cl=ct cr=ct verb=n ps=n vref=1500 nt= dt= gpl=-1 gpl_v=-1 src=0 n_srcs=1 gpx=-1 gpz=-1 gpx_v=-1 gpz_v=-1''','''''')
rsf.doc.progs['sfpspp']=sfpspp

sfpassive2d = rsf.doc.rsfprog('sfpassive2d','user/jsun/Mpassive2d.c','''2-D passive seismic RTM and its adjoint ''')
sfpassive2d.par('velocity',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfpassive2d.par('wave',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfpassive2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfpassive2d.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag, 0: modeling, 1: migration '''))
sfpassive2d.par('pas',rsf.doc.rsfpar('bool','n','','''passive flag, 0: exploding reflector rtm, 1: passive seismic imaging '''))
sfpassive2d.par('abc',rsf.doc.rsfpar('bool','n','','''absorbing boundary condition '''))
sfpassive2d.par('snap',rsf.doc.rsfpar('int','0','','''wavefield snapshot flag '''))
sfpassive2d.par('depth',rsf.doc.rsfpar('int','0','','''surface '''))
sfpassive2d.par('nt',rsf.doc.rsfpar('int','','',''''''))
sfpassive2d.par('dt',rsf.doc.rsfpar('float','','',''''''))
sfpassive2d.par('cb',rsf.doc.rsfpar('float','0.0f','',''''''))
sfpassive2d.version('2.1-git')
sfpassive2d.synopsis('''sfpassive2d < in.rsf > out.rsf velocity=vel.rsf wave=wave.rsf verb=n adj=n pas=n abc=n snap=0 depth=0 nt= dt= cb=0.0f''','''''')
rsf.doc.progs['sfpassive2d']=sfpassive2d

sfswvarimax = rsf.doc.rsfprog('sfswvarimax','user/jsun/Mswvarimax.c','''Sliding window varimax ''')
sfswvarimax.par('sw',rsf.doc.rsfpar('bool','n','','''sliding window '''))
sfswvarimax.par('size',rsf.doc.rsfpar('int','0','','''sliding window radius '''))
sfswvarimax.par('thres',rsf.doc.rsfpar('float','0.','','''variance threshold (normalized) '''))
sfswvarimax.par('term',rsf.doc.rsfpar('float','100.','','''variance threshold (normalized) '''))
sfswvarimax.par('f1',rsf.doc.rsfpar('int','0','','''sliding window radius '''))
sfswvarimax.par('f2',rsf.doc.rsfpar('int','0','','''sliding window radius '''))
sfswvarimax.par('n1',rsf.doc.rsfpar('int','nz0-fz','','''sliding window radius '''))
sfswvarimax.par('n2',rsf.doc.rsfpar('int','nx0-fx','','''sliding window radius '''))
sfswvarimax.version('2.1-git')
sfswvarimax.synopsis('''sfswvarimax < in.rsf > out.rsf sw=n size=0 thres=0. term=100. f1=0 f2=0 n1=nz0-fz n2=nx0-fx''','''''')
rsf.doc.progs['sfswvarimax']=sfswvarimax

sfccrsym = rsf.doc.rsfprog('sfccrsym','user/jsun/Mccrsym.c','''determine symmetry using correlation ''')
sfccrsym.par('size',rsf.doc.rsfpar('int','0','','''sliding window radius '''))
sfccrsym.par('pad',rsf.doc.rsfpar('float','SF_EPS','','''pad for stable devision '''))
sfccrsym.version('2.1-git')
sfccrsym.synopsis('''sfccrsym < in.rsf > out.rsf size=0 pad=SF_EPS''','''''')
rsf.doc.progs['sfccrsym']=sfccrsym

sftimerev2d = rsf.doc.rsfprog('sftimerev2d','user/jsun/Mtimerev2d.c','''2-D correlative time reversal imaging of passive seismic data ''')
sftimerev2d.par('velocity',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftimerev2d.par('wave',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sftimerev2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sftimerev2d.par('abc',rsf.doc.rsfpar('bool','n','','''absorbing boundary condition '''))
sftimerev2d.par('snap',rsf.doc.rsfpar('int','0','','''wavefield snapshot flag '''))
sftimerev2d.par('depth',rsf.doc.rsfpar('int','0','','''geophone depth '''))
sftimerev2d.par('ngrp',rsf.doc.rsfpar('int','1','','''number of groups '''))
sftimerev2d.par('cb',rsf.doc.rsfpar('float','0.0f','',''''''))
sftimerev2d.version('2.1-git')
sftimerev2d.synopsis('''sftimerev2d < in.rsf > out.rsf velocity=vel.rsf wave=wave.rsf verb=n abc=n snap=0 depth=0 ngrp=1 cb=0.0f''','''''')
rsf.doc.progs['sftimerev2d']=sftimerev2d

sflstri2d = rsf.doc.rsfprog('sflstri2d','user/jsun/Mlstri2d.c','''2-D passive seismic RTM and its adjoint ''')
sflstri2d.par('velocity',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflstri2d.par('geop',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflstri2d.par('weight',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sflstri2d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sflstri2d.par('adj',rsf.doc.rsfpar('bool','n','','''adjoint flag, 0: modeling, 1: migration '''))
sflstri2d.par('abc',rsf.doc.rsfpar('bool','n','','''absorbing boundary condition '''))
sflstri2d.par('inv',rsf.doc.rsfpar('bool','n','','''inversion flag '''))
sflstri2d.par('prec',rsf.doc.rsfpar('bool','n','','''use ctr as precondioner '''))
sflstri2d.par('sw',rsf.doc.rsfpar('bool','n','','''inversion flag '''))
sflstri2d.par('ctr',rsf.doc.rsfpar('bool','n','','''CTR IC flag '''))
sflstri2d.par('depth',rsf.doc.rsfpar('int','0','','''acquisition surface '''))
sflstri2d.par('niter',rsf.doc.rsfpar('int','0','','''number of iterations '''))
sflstri2d.par('ngrp',rsf.doc.rsfpar('int','1','','''number of groups of receivers '''))
sflstri2d.par('size',rsf.doc.rsfpar('int','0','','''sliding window size '''))
sflstri2d.par('rectz',rsf.doc.rsfpar('int','1','','''smoothing radius in z '''))
sflstri2d.par('rectx',rsf.doc.rsfpar('int','1','','''smoothing radius in x '''))
sflstri2d.par('rectt',rsf.doc.rsfpar('int','1','','''smoothing radius in t '''))
sflstri2d.par('repeat',rsf.doc.rsfpar('int','1','','''smoothing repeatation '''))
sflstri2d.par('stack',rsf.doc.rsfpar('int','1','','''local stacking length '''))
sflstri2d.par('perc',rsf.doc.rsfpar('float','SF_EPS','','''stable division padding percentage (of max) '''))
sflstri2d.par('hard',rsf.doc.rsfpar('float','0.0f','','''hard thresholding '''))
sflstri2d.par('cb',rsf.doc.rsfpar('float','0.0f','','''allocate arrays '''))
sflstri2d.par('geop',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sflstri2d.par('weight',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sflstri2d.version('2.1-git')
sflstri2d.synopsis('''sflstri2d < in.rsf > out.rsf velocity=vel.rsf geop=geop.rsf weight=weight.rsf verb=n adj=n abc=n inv=n prec=n sw=n ctr=n depth=0 niter=0 ngrp=1 size=0 rectz=1 rectx=1 rectt=1 repeat=1 stack=1 perc=SF_EPS hard=0.0f cb=0.0f''','''''')
rsf.doc.progs['sflstri2d']=sflstri2d

sfcubesrc = rsf.doc.rsfprog('sfcubesrc','user/jsun/Mcubesrc.c','''Simple 2-D wave propagation with multi-threaded fftw3 ''')
sfcubesrc.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcubesrc.version('2.1-git')
sfcubesrc.synopsis('''sfcubesrc < Fw.rsf > Fo.rsf ref=Fr.rsf''','''''')
rsf.doc.progs['sfcubesrc']=sfcubesrc

sfcfftwave2taper = rsf.doc.rsfprog('sfcfftwave2taper','user/jsun/Mcfftwave2taper.c','''Complex 2-D wave propagation (with multi-threaded FFTW3)''')
sfcfftwave2taper.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave2taper.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcfftwave2taper.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave2taper.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcfftwave2taper.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfcfftwave2taper.par('cmplx',rsf.doc.rsfpar('bool','y','','''outputs complex wavefield '''))
sfcfftwave2taper.par('os',rsf.doc.rsfpar('bool','y','','''one-step flag '''))
sfcfftwave2taper.par('sub',rsf.doc.rsfpar('bool','n','','''subtraction flag '''))
sfcfftwave2taper.par('sub',rsf.doc.rsfpar('bool','y','','''subtraction flag '''))
sfcfftwave2taper.par('taper',rsf.doc.rsfpar('int','0','','''tapering in the frequency domain '''))
sfcfftwave2taper.par('thresh',rsf.doc.rsfpar('float','0.92','','''tapering threshold '''))
sfcfftwave2taper.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sfcfftwave2taper.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfcfftwave2taper.version('2.1-git')
sfcfftwave2taper.synopsis('''sfcfftwave2taper < Fw.rsf > Fo.rsf ref=Fr.rsf snaps=snaps.rsf left=left.rsf right=right.rsf verb=n cmplx=y os=y sub=n sub=y taper=0 thresh=0.92 snap=0 pad1=1''','''''')
rsf.doc.progs['sfcfftwave2taper']=sfcfftwave2taper

sffftwave2taper = rsf.doc.rsfprog('sffftwave2taper','user/jsun/Mfftwave2taper.c','''Simple 2-D wave propagation with multi-threaded fftw3 ''')
sffftwave2taper.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftwave2taper.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffftwave2taper.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftwave2taper.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftwave2taper.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sffftwave2taper.par('cmplx',rsf.doc.rsfpar('bool','n','','''use complex FFT '''))
sffftwave2taper.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sffftwave2taper.par('taper',rsf.doc.rsfpar('int','0','','''tapering in the frequency domain '''))
sffftwave2taper.par('thresh',rsf.doc.rsfpar('float','0.92','','''tapering threshold '''))
sffftwave2taper.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sffftwave2taper.version('2.1-git')
sffftwave2taper.synopsis('''sffftwave2taper < Fw.rsf > Fo.rsf ref=Fr.rsf snaps=snaps.rsf left=left.rsf right=right.rsf verb=n cmplx=n pad1=1 taper=0 thresh=0.92 snap=0''','''''')
rsf.doc.progs['sffftwave2taper']=sffftwave2taper

sfcompensate = rsf.doc.rsfprog('sfcompensate','user/jsun/Mcompensate.c','''Complex-valued compensation (between two wavefields) ''')
sfcompensate.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcompensate.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfcompensate.par('cmplx',rsf.doc.rsfpar('bool','y','','''use complex i/o '''))
sfcompensate.par('perc',rsf.doc.rsfpar('float','0.1','','''precentage (of max) for protection when dividing '''))
sfcompensate.version('2.1-git')
sfcompensate.synopsis('''sfcompensate < Fnum.rsf den=Fden.rsf > Fres.rsf verb=n cmplx=y perc=0.1''','''''')
rsf.doc.progs['sfcompensate']=sfcompensate

sfcompensatexf = rsf.doc.rsfprog('sfcompensatexf','user/jsun/Mcompensatexf.c','''Complex-valued compensation (between two wavefields) ''')
sfcompensatexf.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcompensatexf.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sfcompensatexf.par('cmplx',rsf.doc.rsfpar('bool','y','','''use complex i/o '''))
sfcompensatexf.par('niter',rsf.doc.rsfpar('int','1','','''number of iterations '''))
sfcompensatexf.par('perc',rsf.doc.rsfpar('float','0.1','','''precentage (of max) for protection when dividing '''))
sfcompensatexf.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfcompensatexf.version('2.1-git')
sfcompensatexf.synopsis('''sfcompensatexf < Fnum.rsf den=Fden.rsf > Fres.rsf verb=n cmplx=y niter=1 perc=0.1 pad1=1''','''''')
rsf.doc.progs['sfcompensatexf']=sfcompensatexf

sfacqgeo = rsf.doc.rsfprog('sfacqgeo','user/jsun/Macqgeo.c','''generating acquisition geometry file for sfmpicfftrtm  ''')
sfacqgeo.par('nz',rsf.doc.rsfpar('int','','','''dimension in z '''))
sfacqgeo.par('nx',rsf.doc.rsfpar('int','','','''dimension in x '''))
sfacqgeo.par('ny',rsf.doc.rsfpar('int','','','''dimension in y '''))
sfacqgeo.par('sou_z',rsf.doc.rsfpar('int','','','''source position in depth      '''))
sfacqgeo.par('sou_ox',rsf.doc.rsfpar('int','','','''source starting location in x '''))
sfacqgeo.par('sou_oy',rsf.doc.rsfpar('int','','','''source starting location in y '''))
sfacqgeo.par('sou_nx',rsf.doc.rsfpar('int','','','''number of sources in x        '''))
sfacqgeo.par('sou_ny',rsf.doc.rsfpar('int','','','''number of sources in y        '''))
sfacqgeo.par('sou_jx',rsf.doc.rsfpar('int','(sou_nx>1)? (nx-sou_ox)/(sou_nx-1):0','','''source interval in x '''))
sfacqgeo.par('sou_jy',rsf.doc.rsfpar('int','(sou_ny>1)? (ny-sou_oy)/(sou_ny-1):0','','''source interval in y '''))
sfacqgeo.par('rec_z',rsf.doc.rsfpar('int','','','''receiver position in depth '''))
sfacqgeo.par('rec_nx',rsf.doc.rsfpar('int','','','''number of receivers in x   '''))
sfacqgeo.par('rec_ny',rsf.doc.rsfpar('int','','','''number of receivers in y   '''))
sfacqgeo.par('npad',rsf.doc.rsfpar('int','','','''computational domain padding '''))
sfacqgeo.par('noff',rsf.doc.rsfpar('int','','','''near offset '''))
sfacqgeo.par('roll',rsf.doc.rsfpar('int','','','''acquisition pattern: 0-> fixed-spread, 1-> towed-streamer to the negative '''))
sfacqgeo.version('2.1-git')
sfacqgeo.synopsis('''sfacqgeo > Fgeo.rsf nz= nx= ny= sou_z= sou_ox= sou_oy= sou_nx= sou_ny= sou_jx=(sou_nx>1)? (nx-sou_ox)/(sou_nx-1):0 sou_jy=(sou_ny>1)? (ny-sou_oy)/(sou_ny-1):0 rec_z= rec_nx= rec_ny= npad= noff= roll=''','''''')
rsf.doc.progs['sfacqgeo']=sfacqgeo

sffftwave2omp = rsf.doc.rsfprog('sffftwave2omp','user/jsun/Mfftwave2omp.c','''Simple 2-D wave propagation with multi-threaded Kiss-FFT ''')
sffftwave2omp.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftwave2omp.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffftwave2omp.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftwave2omp.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftwave2omp.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity '''))
sffftwave2omp.par('abc',rsf.doc.rsfpar('bool','n','','''absorbing flag '''))
sffftwave2omp.par('nbt',rsf.doc.rsfpar('int','','',''''''))
sffftwave2omp.par('nbb',rsf.doc.rsfpar('int','nbt','',''''''))
sffftwave2omp.par('nbl',rsf.doc.rsfpar('int','nbt','',''''''))
sffftwave2omp.par('nbr',rsf.doc.rsfpar('int','nbt','',''''''))
sffftwave2omp.par('ct',rsf.doc.rsfpar('float','','',''''''))
sffftwave2omp.par('cb',rsf.doc.rsfpar('float','ct','',''''''))
sffftwave2omp.par('cl',rsf.doc.rsfpar('float','ct','',''''''))
sffftwave2omp.par('cr',rsf.doc.rsfpar('float','ct','',''''''))
sffftwave2omp.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sffftwave2omp.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sffftwave2omp.version('2.1-git')
sffftwave2omp.synopsis('''sffftwave2omp < Fw.rsf > Fo.rsf ref=Fr.rsf snaps=snaps.rsf left=left.rsf right=right.rsf verb=n abc=n nbt= nbb=nbt nbl=nbt nbr=nbt ct= cb=ct cl=ct cr=ct snap=0 pad1=1''','''''')
rsf.doc.progs['sffftwave2omp']=sffftwave2omp

sffftwave3omp = rsf.doc.rsfprog('sffftwave3omp','user/jsun/Mfftwave3omp.c','''Simple 3-D wave propagation with multi-threaded kiss-fft''')
sffftwave3omp.par('ref',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftwave3omp.par('snaps',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffftwave3omp.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftwave3omp.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffftwave3omp.par('verb',rsf.doc.rsfpar('bool','y','','''verbosity '''))
sffftwave3omp.par('cmplx',rsf.doc.rsfpar('bool','n','','''use complex FFT '''))
sffftwave3omp.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sffftwave3omp.par('snap',rsf.doc.rsfpar('int','0','','''interval for snapshots '''))
sffftwave3omp.version('2.1-git')
sffftwave3omp.synopsis('''sffftwave3omp < Fw.rsf > Fo.rsf ref=Fr.rsf snaps=snaps.rsf left=left.rsf right=right.rsf verb=y cmplx=n pad1=1 snap=0''','''''')
rsf.doc.progs['sffftwave3omp']=sffftwave3omp

sfeweks3d = rsf.doc.rsfprog('sfeweks3d','user/jsun/Meweks3d.c','''3D elastic time-domain pseudo-spectral (k-space) modeling using shared-memory parallel FFT''')
sfeweks3d.par('ccc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfeweks3d.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfeweks3d.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfeweks3d.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfeweks3d.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfeweks3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfeweks3d.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sfeweks3d.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sfeweks3d.par('ssou',rsf.doc.rsfpar('int','0','','''0 -> acceleration source; 1 -> stress source; 2 -> displacement source '''))
sfeweks3d.par('dabc',rsf.doc.rsfpar('bool','n','','''absorbing BC '''))
sfeweks3d.par('opot',rsf.doc.rsfpar('bool','n','','''output potentials -> 1*scalar, 3*vector potentials '''))
sfeweks3d.par('back',rsf.doc.rsfpar('bool','n','','''backward extrapolation flag (for rtm) '''))
sfeweks3d.par('kspace',rsf.doc.rsfpar('bool','n','','''k-space method (ps) flag '''))
sfeweks3d.par('nbell',rsf.doc.rsfpar('int','5','','''bell size '''))
sfeweks3d.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sfeweks3d.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfeweks3d.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfeweks3d.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfeweks3d.par('nqy',rsf.doc.rsfpar('int','sf_n(ay)','',''''''))
sfeweks3d.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfeweks3d.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfeweks3d.par('oqy',rsf.doc.rsfpar('float','sf_o(ay)','',''''''))
sfeweks3d.version('2.1-git')
sfeweks3d.synopsis('''sfeweks3d < Fwav.rsf ccc=Fccc.rsf den=Fden.rsf sou=Fsou.rsf rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n snap=n free=n ssou=0 dabc=n opot=n back=n kspace=n nbell=5 jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) nqy=sf_n(ay) oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)''','''sou wavelet  (nx,ny,nc,nt)
rec data     (nx,ny,nc,nt)
sou geometry (nc,nx,ny)
rec geometry (nc,nx,ny)
''')
rsf.doc.progs['sfeweks3d']=sfeweks3d

sfvweks3d = rsf.doc.rsfprog('sfvweks3d','user/jsun/Mvweks3d.c','''3D visco-elastic time-domain pseudo-spectral (k-space) modeling using shared-memory parallel FFT''')
sfvweks3d.par('ccc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfvweks3d.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfvweks3d.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfvweks3d.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfvweks3d.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfvweks3d.par('qqq',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfvweks3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfvweks3d.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sfvweks3d.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sfvweks3d.par('ssou',rsf.doc.rsfpar('int','0','','''0 -> acceleration source; 1 -> stress source; 2 -> displacement source '''))
sfvweks3d.par('dabc',rsf.doc.rsfpar('bool','n','','''absorbing BC '''))
sfvweks3d.par('opot',rsf.doc.rsfpar('bool','n','','''output potentials -> 1*scalar, 3*vector potentials '''))
sfvweks3d.par('back',rsf.doc.rsfpar('bool','n','','''backward extrapolation flag (for rtm) '''))
sfvweks3d.par('kspace',rsf.doc.rsfpar('bool','n','','''k-space method (ps) flag '''))
sfvweks3d.par('qmod',rsf.doc.rsfpar('int','0','','''q modeling switch '''))
sfvweks3d.par('nbell',rsf.doc.rsfpar('int','5','','''bell size '''))
sfvweks3d.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sfvweks3d.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfvweks3d.par('rfreq',rsf.doc.rsfpar('float','1000','','''reference frequency for constant-Q '''))
sfvweks3d.par('fcut',rsf.doc.rsfpar('float','500','','''cutoff frequency for Q-compensation '''))
sfvweks3d.par('pcut',rsf.doc.rsfpar('float','0.2','','''pcut/2 is tapered portion w.r.t. 1 '''))
sfvweks3d.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfvweks3d.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfvweks3d.par('nqy',rsf.doc.rsfpar('int','sf_n(ay)','',''''''))
sfvweks3d.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfvweks3d.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfvweks3d.par('oqy',rsf.doc.rsfpar('float','sf_o(ay)','',''''''))
sfvweks3d.version('2.1-git')
sfvweks3d.synopsis('''sfvweks3d < Fwav.rsf ccc=Fccc.rsf den=Fden.rsf sou=Fsou.rsf rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf qqq=Fqqq.rsf verb=n snap=n free=n ssou=0 dabc=n opot=n back=n kspace=n qmod=0 nbell=5 jdata=1 jsnap=nt rfreq=1000 fcut=500 pcut=0.2 nqz=sf_n(az) nqx=sf_n(ax) nqy=sf_n(ay) oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)''','''sou wavelet  (nx,ny,nc,nt)
rec data     (nx,ny,nc,nt)
sou geometry (nc,nx,ny)
rec geometry (nc,nx,ny)
''')
rsf.doc.progs['sfvweks3d']=sfvweks3d

sfxcor2 = rsf.doc.rsfprog('sfxcor2','user/jsun/Mxcor2.c','''OpenMP time- or freq-domain cross-correlation on axes 1,2,3 ''')
sfxcor2.par('uu',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfxcor2.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfxcor2.par('axis',rsf.doc.rsfpar('int','2','','''stack axis '''))
sfxcor2.par('nbuf',rsf.doc.rsfpar('int','1','','''buffer size '''))
sfxcor2.version('2.1-git')
sfxcor2.synopsis('''sfxcor2 < Fs.rsf uu=Fr.rsf > Fi.rsf verb=n axis=2 nbuf=1''','''''')
rsf.doc.progs['sfxcor2']=sfxcor2

sfxcor3 = rsf.doc.rsfprog('sfxcor3','user/jsun/Mxcor3.c','''OpenMP time- or freq-domain cross-correlation on axes 1,2,3,4 ''')
sfxcor3.par('uu',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfxcor3.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfxcor3.par('axis',rsf.doc.rsfpar('int','2','','''stack axis '''))
sfxcor3.par('nbuf',rsf.doc.rsfpar('int','1','','''buffer size '''))
sfxcor3.version('2.1-git')
sfxcor3.synopsis('''sfxcor3 < Fs.rsf uu=Fr.rsf > Fi.rsf verb=n axis=2 nbuf=1''','''''')
rsf.doc.progs['sfxcor3']=sfxcor3

sfxcor3d = rsf.doc.rsfprog('sfxcor3d','user/jsun/Mxcor3d.c','''OpenMP time- or freq-domain reversed cross-correlation on the fourth axes, read entire cube into memory ''')
sfxcor3d.par('uu',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfxcor3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfxcor3d.par('rev',rsf.doc.rsfpar('bool','n','','''reverse the fourth axis of uu '''))
sfxcor3d.version('2.1-git')
sfxcor3d.synopsis('''sfxcor3d < Fs.rsf uu=Fr.rsf > Fi.rsf verb=n rev=n''','''''')
rsf.doc.progs['sfxcor3d']=sfxcor3d

sfmutter3 = rsf.doc.rsfprog('sfmutter3','user/jsun/Mmutter3.c','''3D muting of scalor or vector data ''')
sfmutter3.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmutter3.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmutter3.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfmutter3.par('t0',rsf.doc.rsfpar('float','0','','''source delay time '''))
sfmutter3.par('velw',rsf.doc.rsfpar('float','1.5','','''water velocity '''))
sfmutter3.par('eps',rsf.doc.rsfpar('float','1000.','','''decay parameter '''))
sfmutter3.version('2.1-git')
sfmutter3.synopsis('''sfmutter3 < Finp.rsf sou=Fsou.rsf rec=Frec.rsf > Fout.rsf verb=n t0=0 velw=1.5 eps=1000.''','''''')
rsf.doc.progs['sfmutter3']=sfmutter3

sfewelr3d = rsf.doc.rsfprog('sfewelr3d','user/jsun/Mewelr3d.c','''3D elastic recursive integral time extrapolation using shared-memory parallel FFT''')
sfewelr3d.par('ccc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewelr3d.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewelr3d.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewelr3d.par('rnk',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewelr3d.par('lft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewelr3d.par('rht',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewelr3d.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfewelr3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfewelr3d.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sfewelr3d.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sfewelr3d.par('back',rsf.doc.rsfpar('bool','n','','''backward extrapolation flag (for rtm) '''))
sfewelr3d.par('esou',rsf.doc.rsfpar('bool','n','','''explosive force source '''))
sfewelr3d.par('tstp',rsf.doc.rsfpar('bool','n','','''two-step propagator '''))
sfewelr3d.par('dabc',rsf.doc.rsfpar('bool','n','','''absorbing BC '''))
sfewelr3d.par('nbell',rsf.doc.rsfpar('int','5','','''bell size '''))
sfewelr3d.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sfewelr3d.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfewelr3d.par('nb',rsf.doc.rsfpar('int','NOP','',''''''))
sfewelr3d.par('cb',rsf.doc.rsfpar('float','1.f','',''''''))
sfewelr3d.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfewelr3d.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfewelr3d.par('nqy',rsf.doc.rsfpar('int','sf_n(ay)','',''''''))
sfewelr3d.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfewelr3d.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfewelr3d.par('oqy',rsf.doc.rsfpar('float','sf_o(ay)','',''''''))
sfewelr3d.version('2.1-git')
sfewelr3d.synopsis('''sfewelr3d < Fwav.rsf ccc=Fccc.rsf sou=Fsou.rsf rec=Frec.rsf rnk=Frnk.rsf lft=Flft.rsf rht=Frht.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n snap=n free=n back=n esou=n tstp=n dabc=n nbell=5 jdata=1 jsnap=nt nb=NOP cb=1.f nqz=sf_n(az) nqx=sf_n(ax) nqy=sf_n(ay) oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)''','''sou wavelet  (nx,ny,nc,nt)
rec data     (nx,ny,nc,nt)
sou geometry (nc,nx,ny)
rec geometry (nc,nx,ny)
''')
rsf.doc.progs['sfewelr3d']=sfewelr3d

sfewedc3d = rsf.doc.rsfprog('sfewedc3d','user/jsun/Mewedc3d.c','''3D elastic recursive integral time extrapolation of decomposed wave modes using shared-memory parallel FFT (decoupled formulation)''')
sfewedc3d.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3d.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3d.par('ccc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3d.par('rkp',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3d.par('ltp',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3d.par('rtp',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3d.par('wfp',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfewedc3d.par('rks',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3d.par('lts',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3d.par('rts',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3d.par('wfs',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfewedc3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfewedc3d.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sfewedc3d.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sfewedc3d.par('back',rsf.doc.rsfpar('bool','n','','''backward extrapolation flag (for rtm) '''))
sfewedc3d.par('esou',rsf.doc.rsfpar('bool','n','','''explosive force source '''))
sfewedc3d.par('dabc',rsf.doc.rsfpar('bool','n','','''absorbing BC '''))
sfewedc3d.par('nbell',rsf.doc.rsfpar('int','NOP','','''bell size '''))
sfewedc3d.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sfewedc3d.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfewedc3d.par('nb',rsf.doc.rsfpar('int','NOP','',''''''))
sfewedc3d.par('cb',rsf.doc.rsfpar('float','1.f','',''''''))
sfewedc3d.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfewedc3d.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfewedc3d.par('nqy',rsf.doc.rsfpar('int','sf_n(ay)','',''''''))
sfewedc3d.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfewedc3d.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfewedc3d.par('oqy',rsf.doc.rsfpar('float','sf_o(ay)','',''''''))
sfewedc3d.version('2.1-git')
sfewedc3d.synopsis('''sfewedc3d < Fwav.rsf > Fdat.rsf sou=Fsou.rsf rec=Frec.rsf ccc=Fccc.rsf rkp=Frkp.rsf ltp=Fltp.rsf rtp=Frtp.rsf wfp=Fwfp.rsf rks=Frks.rsf lts=Flts.rsf rts=Frts.rsf wfs=Fwfs.rsf verb=n snap=n free=n back=n esou=n dabc=n nbell=NOP jdata=1 jsnap=nt nb=NOP cb=1.f nqz=sf_n(az) nqx=sf_n(ax) nqy=sf_n(ay) oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)''','''sou wavelet  (nx,ny,nc,nt)
rec data     (nx,ny,nc,nt)
sou geometry (nc,nx,ny)
rec geometry (nc,nx,ny)
''')
rsf.doc.progs['sfewedc3d']=sfewedc3d

sfewdlr3d = rsf.doc.rsfprog('sfewdlr3d','user/jsun/Mewdlr3d.c','''3D elastic recursive integral time extrapolation using KISS-FFT''')
sfewdlr3d.par('rnk',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewdlr3d.par('lft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewdlr3d.par('rht',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewdlr3d.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfewdlr3d.version('2.1-git')
sfewdlr3d.synopsis('''sfewdlr3d < Finp.rsf rnk=Frnk.rsf lft=Flft.rsf rht=Frht.rsf > Fout.rsf verb=n''','''sou wavelet  (nx,ny,nc,nt)
rec data     (nx,ny,nc,nt)
sou geometry (nc,nx,ny)
rec geometry (nc,nx,ny)
''')
rsf.doc.progs['sfewdlr3d']=sfewdlr3d

sfeweks3dsecd = rsf.doc.rsfprog('sfeweks3dsecd','user/jsun/Meweks3dsecd.c','''3D elastic time-domain pseudo-spectral (k-space) modeling using shared-memory parallel FFT (second-order equation)''')
sfeweks3dsecd.par('ccc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfeweks3dsecd.par('den',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfeweks3dsecd.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfeweks3dsecd.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfeweks3dsecd.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfeweks3dsecd.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfeweks3dsecd.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sfeweks3dsecd.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sfeweks3dsecd.par('ssou',rsf.doc.rsfpar('int','0','','''0 -> acceleration source; 1 -> stress source; 2 -> displacement source '''))
sfeweks3dsecd.par('dabc',rsf.doc.rsfpar('bool','n','','''absorbing BC '''))
sfeweks3dsecd.par('opot',rsf.doc.rsfpar('bool','n','','''output potentials -> 1*scalar, 3*vector potentials '''))
sfeweks3dsecd.par('back',rsf.doc.rsfpar('bool','n','','''backward extrapolation flag (for rtm) '''))
sfeweks3dsecd.par('kspace',rsf.doc.rsfpar('bool','n','','''k-space method (ps) flag '''))
sfeweks3dsecd.par('secd',rsf.doc.rsfpar('bool','n','','''second order weq flag '''))
sfeweks3dsecd.par('nbell',rsf.doc.rsfpar('int','5','','''bell size '''))
sfeweks3dsecd.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sfeweks3dsecd.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfeweks3dsecd.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfeweks3dsecd.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfeweks3dsecd.par('nqy',rsf.doc.rsfpar('int','sf_n(ay)','',''''''))
sfeweks3dsecd.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfeweks3dsecd.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfeweks3dsecd.par('oqy',rsf.doc.rsfpar('float','sf_o(ay)','',''''''))
sfeweks3dsecd.version('2.1-git')
sfeweks3dsecd.synopsis('''sfeweks3dsecd < Fwav.rsf ccc=Fccc.rsf den=Fden.rsf sou=Fsou.rsf rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n snap=n free=n ssou=0 dabc=n opot=n back=n kspace=n secd=n nbell=5 jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) nqy=sf_n(ay) oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)''','''sou wavelet  (nx,ny,nc,nt)
rec data     (nx,ny,nc,nt)
sou geometry (nc,nx,ny)
rec geometry (nc,nx,ny)
''')
rsf.doc.progs['sfeweks3dsecd']=sfeweks3dsecd

sfewelr3dgrad = rsf.doc.rsfprog('sfewelr3dgrad','user/jsun/Mewelr3dgrad.c','''3D elastic recursive integral time extrapolation using shared-memory parallel FFT (with gradient term)''')
sfewelr3dgrad.par('ccc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewelr3dgrad.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewelr3dgrad.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewelr3dgrad.par('rnk',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewelr3dgrad.par('lft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewelr3dgrad.par('rht',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewelr3dgrad.par('wfl',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfewelr3dgrad.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfewelr3dgrad.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sfewelr3dgrad.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sfewelr3dgrad.par('back',rsf.doc.rsfpar('bool','n','','''backward extrapolation flag (for rtm) '''))
sfewelr3dgrad.par('esou',rsf.doc.rsfpar('bool','n','','''explosive force source '''))
sfewelr3dgrad.par('tstp',rsf.doc.rsfpar('bool','n','','''two-step propagator '''))
sfewelr3dgrad.par('dabc',rsf.doc.rsfpar('bool','n','','''absorbing BC '''))
sfewelr3dgrad.par('nbell',rsf.doc.rsfpar('int','NOP','','''bell size '''))
sfewelr3dgrad.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sfewelr3dgrad.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfewelr3dgrad.par('nb',rsf.doc.rsfpar('int','NOP','',''''''))
sfewelr3dgrad.par('cb',rsf.doc.rsfpar('float','1.f','',''''''))
sfewelr3dgrad.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfewelr3dgrad.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfewelr3dgrad.par('nqy',rsf.doc.rsfpar('int','sf_n(ay)','',''''''))
sfewelr3dgrad.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfewelr3dgrad.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfewelr3dgrad.par('oqy',rsf.doc.rsfpar('float','sf_o(ay)','',''''''))
sfewelr3dgrad.version('2.1-git')
sfewelr3dgrad.synopsis('''sfewelr3dgrad < Fwav.rsf ccc=Fccc.rsf sou=Fsou.rsf rec=Frec.rsf rnk=Frnk.rsf lft=Flft.rsf rht=Frht.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n snap=n free=n back=n esou=n tstp=n dabc=n nbell=NOP jdata=1 jsnap=nt nb=NOP cb=1.f nqz=sf_n(az) nqx=sf_n(ax) nqy=sf_n(ay) oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)''','''sou wavelet  (nx,ny,nc,nt)
rec data     (nx,ny,nc,nt)
sou geometry (nc,nx,ny)
rec geometry (nc,nx,ny)
''')
rsf.doc.progs['sfewelr3dgrad']=sfewelr3dgrad

sfewedc3dgrad = rsf.doc.rsfprog('sfewedc3dgrad','user/jsun/Mewedc3dgrad.c','''3D elastic recursive integral time extrapolation of decomposed wave modes using KISS-FFT''')
sfewedc3dgrad.par('sou',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3dgrad.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3dgrad.par('ccc',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3dgrad.par('rkp',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3dgrad.par('ltp',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3dgrad.par('rtp',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3dgrad.par('wfp',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfewedc3dgrad.par('rks',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3dgrad.par('lts',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3dgrad.par('rts',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3dgrad.par('wfs',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfewedc3dgrad.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfewedc3dgrad.par('snap',rsf.doc.rsfpar('bool','n','','''wavefield snapshots flag '''))
sfewedc3dgrad.par('free',rsf.doc.rsfpar('bool','n','','''free surface flag '''))
sfewedc3dgrad.par('back',rsf.doc.rsfpar('bool','n','','''backward extrapolation flag (for rtm) '''))
sfewedc3dgrad.par('esou',rsf.doc.rsfpar('bool','n','','''explosive force source '''))
sfewedc3dgrad.par('nbell',rsf.doc.rsfpar('int','NOP','','''bell size '''))
sfewedc3dgrad.par('jdata',rsf.doc.rsfpar('int','1','',''''''))
sfewedc3dgrad.par('jsnap',rsf.doc.rsfpar('int','nt','',''''''))
sfewedc3dgrad.par('nb',rsf.doc.rsfpar('int','NOP','',''''''))
sfewedc3dgrad.par('nqz',rsf.doc.rsfpar('int','sf_n(az)','',''''''))
sfewedc3dgrad.par('nqx',rsf.doc.rsfpar('int','sf_n(ax)','',''''''))
sfewedc3dgrad.par('nqy',rsf.doc.rsfpar('int','sf_n(ay)','',''''''))
sfewedc3dgrad.par('oqz',rsf.doc.rsfpar('float','sf_o(az)','',''''''))
sfewedc3dgrad.par('oqx',rsf.doc.rsfpar('float','sf_o(ax)','',''''''))
sfewedc3dgrad.par('oqy',rsf.doc.rsfpar('float','sf_o(ay)','',''''''))
sfewedc3dgrad.version('2.1-git')
sfewedc3dgrad.synopsis('''sfewedc3dgrad < Fwav.rsf > Fdat.rsf sou=Fsou.rsf rec=Frec.rsf ccc=Fccc.rsf rkp=Frkp.rsf ltp=Fltp.rsf rtp=Frtp.rsf wfp=Fwfp.rsf rks=Frks.rsf lts=Flts.rsf rts=Frts.rsf wfs=Fwfs.rsf verb=n snap=n free=n back=n esou=n nbell=NOP jdata=1 jsnap=nt nb=NOP nqz=sf_n(az) nqx=sf_n(ax) nqy=sf_n(ay) oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)''','''sou wavelet  (nx,ny,nc,nt)
rec data     (nx,ny,nc,nt)
sou geometry (nc,nx,ny)
rec geometry (nc,nx,ny)
''')
rsf.doc.progs['sfewedc3dgrad']=sfewedc3dgrad

sfmpilsrtm = rsf.doc.rsfprog('sfmpilsrtm','user/jsun/Mmpilsrtm.c','''2-D Low-rank One-step Least Pre-stack Reverse-Time-Migration in the complex domain (both img and data are complex valued)''')
sfmpilsrtm.par('src',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtm.par('rec',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpilsrtm.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtm.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtm.par('leftb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtm.par('rightb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtm.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtm.par('tmpwf',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpilsrtm.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity'''))
sfmpilsrtm.par('adj',rsf.doc.rsfpar('bool','y','','''migration'''))
sfmpilsrtm.par('wantwf',rsf.doc.rsfpar('bool','n','','''output forward and backward wavefield'''))
sfmpilsrtm.par('wantrecord',rsf.doc.rsfpar('bool','y','','''if n, using record data generated by this program '''))
sfmpilsrtm.par('illum',rsf.doc.rsfpar('bool','n','','''if n, no source illumination applied '''))
sfmpilsrtm.par('roll',rsf.doc.rsfpar('bool','n','','''if n, receiver is independent of source location and gpl=nx'''))
sfmpilsrtm.par('shtbgn',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtm.par('sht0',rsf.doc.rsfpar('int','shtbgn','','''actual shot origin on grid'''))
sfmpilsrtm.par('shtend',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtm.par('shtint',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtm.par('spz',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtm.par('gpz',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtm.par('gpl',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtm.par('snapinter',rsf.doc.rsfpar('int','1','','''snap interval '''))
sfmpilsrtm.par('srctrunc',rsf.doc.rsfpar('float','0.4','',''''''))
sfmpilsrtm.par('rectz',rsf.doc.rsfpar('int','1','',''''''))
sfmpilsrtm.par('rectx',rsf.doc.rsfpar('int','1','',''''''))
sfmpilsrtm.par('repeat',rsf.doc.rsfpar('int','0','','''abc parameters '''))
sfmpilsrtm.par('top',rsf.doc.rsfpar('int','40','',''''''))
sfmpilsrtm.par('bot',rsf.doc.rsfpar('int','40','',''''''))
sfmpilsrtm.par('lft',rsf.doc.rsfpar('int','40','',''''''))
sfmpilsrtm.par('rht',rsf.doc.rsfpar('int','40','','''Set I/O file'''))
sfmpilsrtm.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfmpilsrtm.version('2.1-git')
sfmpilsrtm.synopsis('''sfmpilsrtm src=Fsrc.rsf rec=Frcd.rsf left=left.rsf right=right.rsf leftb=leftb.rsf rightb=rightb.rsf vel=Fvel.rsf tmpwf=Ftmpwf.rsf verb=n adj=y wantwf=n wantrecord=y illum=n roll=n shtbgn= sht0=shtbgn shtend= shtint= spz= gpz= gpl= snapinter=1 srctrunc=0.4 rectz=1 rectx=1 repeat=0 top=40 bot=40 lft=40 rht=40 pad1=1''','''img :  crosscorrelation with source normalization (stdout)
''')
rsf.doc.progs['sfmpilsrtm']=sfmpilsrtm

sfmpiewertm = rsf.doc.rsfprog('sfmpiewertm','user/jsun/Mmpiewertm.c','''2-D two-components elastic wavefield modeling operators with lowrank approximation. ''')
sfmpiewertm.par('input',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiewertm.par('pleft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiewertm.par('pright',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiewertm.par('sleft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiewertm.par('sright',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiewertm.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiewertm.par('Recordx',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiewertm.par('Pwavez',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiewertm.par('Pwavex',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiewertm.par('Swavez',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiewertm.par('Swavex',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiewertm.par('ImagePP',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiewertm.par('ImagePS',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiewertm.par('ImageSP',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiewertm.par('ImageSS',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiewertm.par('mig',rsf.doc.rsfpar('bool','n','','''migration flag '''))
sfmpiewertm.par('nt',rsf.doc.rsfpar('int','301','',''''''))
sfmpiewertm.par('dt',rsf.doc.rsfpar('float','0.001','',''''''))
sfmpiewertm.par('snpint',rsf.doc.rsfpar('int','10','','''absorbing boundary condition'''))
sfmpiewertm.par('abc',rsf.doc.rsfpar('bool','n','','''absorbing flag '''))
sfmpiewertm.par('nbt',rsf.doc.rsfpar('int','','',''''''))
sfmpiewertm.par('nbb',rsf.doc.rsfpar('int','nbt','',''''''))
sfmpiewertm.par('nbl',rsf.doc.rsfpar('int','nbt','',''''''))
sfmpiewertm.par('nbr',rsf.doc.rsfpar('int','nbt','',''''''))
sfmpiewertm.par('ct',rsf.doc.rsfpar('float','','',''''''))
sfmpiewertm.par('cb',rsf.doc.rsfpar('float','ct','',''''''))
sfmpiewertm.par('cl',rsf.doc.rsfpar('float','ct','',''''''))
sfmpiewertm.par('cr',rsf.doc.rsfpar('float','ct','',''''''))
sfmpiewertm.par('isx',rsf.doc.rsfpar('int','nx/2','',''''''))
sfmpiewertm.par('isz',rsf.doc.rsfpar('int','','',''''''))
sfmpiewertm.par('t0',rsf.doc.rsfpar('float','0.04','','''wavelet time lag '''))
sfmpiewertm.par('f0',rsf.doc.rsfpar('float','30.0','','''wavelet peak freq '''))
sfmpiewertm.par('A',rsf.doc.rsfpar('float','1.0','','''wavelet amplitude '''))
sfmpiewertm.par('src',rsf.doc.rsfpar('int','1','','''source mode: 1 - exploding force; 2 - equil-energy force '''))
sfmpiewertm.par('shtbgn',rsf.doc.rsfpar('int','','',''''''))
sfmpiewertm.par('shtend',rsf.doc.rsfpar('int','','',''''''))
sfmpiewertm.par('shtint',rsf.doc.rsfpar('int','','',''''''))
sfmpiewertm.par('gpz',rsf.doc.rsfpar('int','nbt+5','','''geophone depth '''))
sfmpiewertm.par('cmplx',rsf.doc.rsfpar('bool','n','','''use complex FFT '''))
sfmpiewertm.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfmpiewertm.par('verb',rsf.doc.rsfpar('bool','n','','''padding factor on the first axis '''))
sfmpiewertm.par('mute',rsf.doc.rsfpar('bool','n','','''muting first arrival '''))
sfmpiewertm.par('wd',rsf.doc.rsfpar('int','5','','''muting width '''))
sfmpiewertm.par('vref',rsf.doc.rsfpar('float','1500','','''water velocity '''))
sfmpiewertm.par('Pwavez',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfmpiewertm.par('Pwavex',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfmpiewertm.par('Swavez',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfmpiewertm.par('Swavex',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfmpiewertm.par('ImagePP',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfmpiewertm.par('ImagePS',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfmpiewertm.par('ImageSP',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfmpiewertm.par('ImageSS',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfmpiewertm.version('2.1-git')
sfmpiewertm.synopsis('''sfmpiewertm input=Fvp0.rsf pleft=Fpl.rsf pright=Fpr.rsf sleft=Fsl.rsf sright=Fsr.rsf output=Fo1.rsf Recordx=Fo2.rsf Pwavez=Fpz.rsf Pwavex=Fpx.rsf Swavez=Fsz.rsf Swavex=Fsx.rsf ImagePP=Fimgpp.rsf ImagePS=Fimgps.rsf ImageSP=Fimgsp.rsf ImageSS=Fimgss.rsf mig=n nt=301 dt=0.001 snpint=10 abc=n nbt= nbb=nbt nbl=nbt nbr=nbt ct= cb=ct cl=ct cr=ct isx=nx/2 isz= t0=0.04 f0=30.0 A=1.0 src=1 shtbgn= shtend= shtint= gpz=nbt+5 cmplx=n pad1=1 verb=n mute=n wd=5 vref=1500''','''''')
rsf.doc.progs['sfmpiewertm']=sfmpiewertm

sfmpirtmop = rsf.doc.rsfprog('sfmpirtmop','user/jsun/Mmpirtmop.c','''2-D Low-rank One-step Least Pre-stack Reverse-Time-Migration in the complex domain (both img and data are complex valued)''')
sfmpirtmop.par('src',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpirtmop.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpirtmop.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpirtmop.par('leftb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpirtmop.par('rightb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpirtmop.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpirtmop.par('tmpwf',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpirtmop.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity'''))
sfmpirtmop.par('justrec',rsf.doc.rsfpar('bool','n','','''just model for the seismic record'''))
sfmpirtmop.par('adj',rsf.doc.rsfpar('bool','y','','''migration'''))
sfmpirtmop.par('wantwf',rsf.doc.rsfpar('bool','n','','''output forward and backward wavefield'''))
sfmpirtmop.par('illum',rsf.doc.rsfpar('bool','n','','''if n, no source illumination applied '''))
sfmpirtmop.par('roll',rsf.doc.rsfpar('bool','n','','''if n, receiver is independent of source location and gpl=nx'''))
sfmpirtmop.par('born',rsf.doc.rsfpar('bool','n','','''use exact born approximation'''))
sfmpirtmop.par('shtbgn',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmop.par('sht0',rsf.doc.rsfpar('int','shtbgn','','''actual shot origin on grid'''))
sfmpirtmop.par('shtend',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmop.par('shtint',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmop.par('spz',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmop.par('gpz',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmop.par('gpl',rsf.doc.rsfpar('int','','',''''''))
sfmpirtmop.par('snapinter',rsf.doc.rsfpar('int','1','','''snap interval '''))
sfmpirtmop.par('srctrunc',rsf.doc.rsfpar('float','0.4','',''''''))
sfmpirtmop.par('rectz',rsf.doc.rsfpar('int','1','',''''''))
sfmpirtmop.par('rectx',rsf.doc.rsfpar('int','1','',''''''))
sfmpirtmop.par('repeat',rsf.doc.rsfpar('int','0','','''abc parameters '''))
sfmpirtmop.par('top',rsf.doc.rsfpar('int','40','',''''''))
sfmpirtmop.par('bot',rsf.doc.rsfpar('int','40','',''''''))
sfmpirtmop.par('lft',rsf.doc.rsfpar('int','40','',''''''))
sfmpirtmop.par('rht',rsf.doc.rsfpar('int','40','','''muting for migration after modeling '''))
sfmpirtmop.par('mute',rsf.doc.rsfpar('bool','y','','''muting direct arrival'''))
sfmpirtmop.par('vref',rsf.doc.rsfpar('float','1500','',''''''))
sfmpirtmop.par('wd',rsf.doc.rsfpar('int','5','',''''''))
sfmpirtmop.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfmpirtmop.version('2.1-git')
sfmpirtmop.synopsis('''sfmpirtmop src=Fsrc.rsf left=left.rsf right=right.rsf leftb=leftb.rsf rightb=rightb.rsf vel=Fvel.rsf tmpwf=Ftmpwf.rsf verb=n justrec=n adj=y wantwf=n illum=n roll=n born=n shtbgn= sht0=shtbgn shtend= shtint= spz= gpz= gpl= snapinter=1 srctrunc=0.4 rectz=1 rectx=1 repeat=0 top=40 bot=40 lft=40 rht=40 mute=y vref=1500 wd=5 pad1=1''','''img :  crosscorrelation with source normalization (stdout)
''')
rsf.doc.progs['sfmpirtmop']=sfmpirtmop

sfmpilsrtmgmres = rsf.doc.rsfprog('sfmpilsrtmgmres','user/jsun/Mmpilsrtmgmres.c','''2-D Low-rank One-step Least Pre-stack Reverse-Time-Migration in the complex domain (both img and data are complex valued)''')
sfmpilsrtmgmres.par('src',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtmgmres.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtmgmres.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtmgmres.par('leftb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtmgmres.par('rightb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtmgmres.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtmgmres.par('start',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtmgmres.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity'''))
sfmpilsrtmgmres.par('adj',rsf.doc.rsfpar('bool','y','','''migration'''))
sfmpilsrtmgmres.par('gmres',rsf.doc.rsfpar('bool','n','','''invoke gmres(m) iterations'''))
sfmpilsrtmgmres.par('niter',rsf.doc.rsfpar('int','5','',''''''))
sfmpilsrtmgmres.par('mem',rsf.doc.rsfpar('int','5','',''''''))
sfmpilsrtmgmres.par('laplac',rsf.doc.rsfpar('bool','y','','''laplacian filtering'''))
sfmpilsrtmgmres.par('mode',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtmgmres.par('illum',rsf.doc.rsfpar('bool','n','','''if n, no source illumination applied '''))
sfmpilsrtmgmres.par('roll',rsf.doc.rsfpar('bool','n','','''if n, receiver is independent of source location and gpl=nx'''))
sfmpilsrtmgmres.par('shtbgn',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtmgmres.par('sht0',rsf.doc.rsfpar('int','shtbgn','','''actual shot origin on grid'''))
sfmpilsrtmgmres.par('shtend',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtmgmres.par('shtint',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtmgmres.par('spz',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtmgmres.par('gpz',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtmgmres.par('gpl',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtmgmres.par('snapinter',rsf.doc.rsfpar('int','1','','''snap interval '''))
sfmpilsrtmgmres.par('srctrunc',rsf.doc.rsfpar('float','0.4','',''''''))
sfmpilsrtmgmres.par('rectz',rsf.doc.rsfpar('int','1','',''''''))
sfmpilsrtmgmres.par('rectx',rsf.doc.rsfpar('int','1','',''''''))
sfmpilsrtmgmres.par('repeat',rsf.doc.rsfpar('int','0','','''abc parameters '''))
sfmpilsrtmgmres.par('top',rsf.doc.rsfpar('int','40','',''''''))
sfmpilsrtmgmres.par('bot',rsf.doc.rsfpar('int','40','',''''''))
sfmpilsrtmgmres.par('lft',rsf.doc.rsfpar('int','40','',''''''))
sfmpilsrtmgmres.par('rht',rsf.doc.rsfpar('int','40','','''Set I/O file'''))
sfmpilsrtmgmres.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfmpilsrtmgmres.par('start',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfmpilsrtmgmres.version('2.1-git')
sfmpilsrtmgmres.synopsis('''sfmpilsrtmgmres src=Fsrc.rsf left=left.rsf right=right.rsf leftb=leftb.rsf rightb=rightb.rsf vel=Fvel.rsf start=Fstart.rsf verb=n adj=y gmres=n niter=5 mem=5 laplac=y mode= illum=n roll=n shtbgn= sht0=shtbgn shtend= shtint= spz= gpz= gpl= snapinter=1 srctrunc=0.4 rectz=1 rectx=1 repeat=0 top=40 bot=40 lft=40 rht=40 pad1=1''','''img :  crosscorrelation with source normalization (stdout)
''')
rsf.doc.progs['sfmpilsrtmgmres']=sfmpilsrtmgmres

sfmpilsrtmcg = rsf.doc.rsfprog('sfmpilsrtmcg','user/jsun/Mmpilsrtmcg.c','''2-D Low-rank One-step Least-square Pre-stack Reverse-Time-Migration using CG in the complex domain (both img and data are complex valued)''')
sfmpilsrtmcg.par('src',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtmcg.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtmcg.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtmcg.par('leftb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtmcg.par('rightb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtmcg.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtmcg.par('start',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpilsrtmcg.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity'''))
sfmpilsrtmcg.par('niter',rsf.doc.rsfpar('int','1','',''''''))
sfmpilsrtmcg.par('mode',rsf.doc.rsfpar('int','0','',''''''))
sfmpilsrtmcg.par('illum',rsf.doc.rsfpar('bool','n','','''if n, no source illumination applied '''))
sfmpilsrtmcg.par('roll',rsf.doc.rsfpar('bool','n','','''if n, receiver is independent of source location and gpl=nx'''))
sfmpilsrtmcg.par('shtbgn',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtmcg.par('sht0',rsf.doc.rsfpar('int','shtbgn','','''actual shot origin on grid'''))
sfmpilsrtmcg.par('shtend',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtmcg.par('shtint',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtmcg.par('spz',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtmcg.par('gpz',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtmcg.par('gpl',rsf.doc.rsfpar('int','','',''''''))
sfmpilsrtmcg.par('snapinter',rsf.doc.rsfpar('int','1','','''snap interval '''))
sfmpilsrtmcg.par('srctrunc',rsf.doc.rsfpar('float','0.4','',''''''))
sfmpilsrtmcg.par('rectz',rsf.doc.rsfpar('int','1','',''''''))
sfmpilsrtmcg.par('rectx',rsf.doc.rsfpar('int','1','',''''''))
sfmpilsrtmcg.par('repeat',rsf.doc.rsfpar('int','0','','''abc parameters '''))
sfmpilsrtmcg.par('top',rsf.doc.rsfpar('int','40','',''''''))
sfmpilsrtmcg.par('bot',rsf.doc.rsfpar('int','40','',''''''))
sfmpilsrtmcg.par('lft',rsf.doc.rsfpar('int','40','',''''''))
sfmpilsrtmcg.par('rht',rsf.doc.rsfpar('int','40','','''Set I/O file'''))
sfmpilsrtmcg.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfmpilsrtmcg.par('start',rsf.doc.rsfpar('string ',desc='''auxiliary input file name'''))
sfmpilsrtmcg.version('2.1-git')
sfmpilsrtmcg.synopsis('''sfmpilsrtmcg src=Fsrc.rsf left=left.rsf right=right.rsf leftb=leftb.rsf rightb=rightb.rsf vel=Fvel.rsf start=Fstart.rsf verb=n niter=1 mode=0 illum=n roll=n shtbgn= sht0=shtbgn shtend= shtint= spz= gpz= gpl= snapinter=1 srctrunc=0.4 rectz=1 rectx=1 repeat=0 top=40 bot=40 lft=40 rht=40 pad1=1''','''''')
rsf.doc.progs['sfmpilsrtmcg']=sfmpilsrtmcg

sfmpircvrtm = rsf.doc.rsfprog('sfmpircvrtm','user/jsun/Mmpircvrtm.c','''2-D Low-rank One-step Least Pre-stack Reverse-Time-Migration in the complex domain (both img and data are complex valued)''')
sfmpircvrtm.par('input',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpircvrtm.par('src',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpircvrtm.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpircvrtm.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpircvrtm.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpircvrtm.par('leftb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpircvrtm.par('rightb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpircvrtm.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpircvrtm.par('tmpwf',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpircvrtm.par('rec2',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpircvrtm.par('spx',rsf.doc.rsfpar('ints','','',''' [num_of_shots]'''))
sfmpircvrtm.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity'''))
sfmpircvrtm.par('adj',rsf.doc.rsfpar('bool','y','','''migration'''))
sfmpircvrtm.par('rmig',rsf.doc.rsfpar('bool','n','','''receiver domain migration'''))
sfmpircvrtm.par('rcvint',rsf.doc.rsfpar('int','1','',''''''))
sfmpircvrtm.par('rcvbgn',rsf.doc.rsfpar('int','0','',''''''))
sfmpircvrtm.par('rcvend',rsf.doc.rsfpar('int','-1','',''''''))
sfmpircvrtm.par('wantwf',rsf.doc.rsfpar('bool','n','','''output forward and backward wavefield'''))
sfmpircvrtm.par('wantrecord',rsf.doc.rsfpar('bool','y','','''if n, using record data generated by this program '''))
sfmpircvrtm.par('illum',rsf.doc.rsfpar('bool','n','','''if n, no source illumination applied '''))
sfmpircvrtm.par('roll',rsf.doc.rsfpar('bool','n','','''if n, receiver is independent of source location and gpl=nx'''))
sfmpircvrtm.par('stack',rsf.doc.rsfpar('bool','y','','''if y, outputs stacked image'''))
sfmpircvrtm.par('shtbgn',rsf.doc.rsfpar('int','','',''''''))
sfmpircvrtm.par('sht0',rsf.doc.rsfpar('int','shtbgn','','''actual shot origin on grid'''))
sfmpircvrtm.par('shtend',rsf.doc.rsfpar('int','','',''''''))
sfmpircvrtm.par('shtint',rsf.doc.rsfpar('int','','',''''''))
sfmpircvrtm.par('spz',rsf.doc.rsfpar('int','','',''''''))
sfmpircvrtm.par('gpz',rsf.doc.rsfpar('int','','',''''''))
sfmpircvrtm.par('gpl',rsf.doc.rsfpar('int','','',''''''))
sfmpircvrtm.par('snapinter',rsf.doc.rsfpar('int','1','','''snap interval '''))
sfmpircvrtm.par('srctrunc',rsf.doc.rsfpar('float','0.4','',''''''))
sfmpircvrtm.par('rectz',rsf.doc.rsfpar('int','1','',''''''))
sfmpircvrtm.par('rectx',rsf.doc.rsfpar('int','1','',''''''))
sfmpircvrtm.par('repeat',rsf.doc.rsfpar('int','0','','''abc parameters '''))
sfmpircvrtm.par('top',rsf.doc.rsfpar('int','40','',''''''))
sfmpircvrtm.par('bot',rsf.doc.rsfpar('int','40','',''''''))
sfmpircvrtm.par('lft',rsf.doc.rsfpar('int','40','',''''''))
sfmpircvrtm.par('rht',rsf.doc.rsfpar('int','40','',''''''))
sfmpircvrtm.par('mute',rsf.doc.rsfpar('bool','n','','''muting in the receiver gather'''))
sfmpircvrtm.par('vref',rsf.doc.rsfpar('float','1500','',''''''))
sfmpircvrtm.par('wd',rsf.doc.rsfpar('int','5','',''''''))
sfmpircvrtm.par('depth',rsf.doc.rsfpar('int','gpz','','''muting source depth -> receiver depth according reciprocity'''))
sfmpircvrtm.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfmpircvrtm.version('2.1-git')
sfmpircvrtm.synopsis('''sfmpircvrtm input=Frcd.rsf src=Fsrc.rsf output=Fimg.rsf left=left.rsf right=right.rsf leftb=leftb.rsf rightb=rightb.rsf vel=Fvel.rsf tmpwf=Ftmpwf.rsf rec2=Frcd2.rsf spx= verb=n adj=y rmig=n rcvint=1 rcvbgn=0 rcvend=-1 wantwf=n wantrecord=y illum=n roll=n stack=y shtbgn= sht0=shtbgn shtend= shtint= spz= gpz= gpl= snapinter=1 srctrunc=0.4 rectz=1 rectx=1 repeat=0 top=40 bot=40 lft=40 rht=40 mute=n vref=1500 wd=5 depth=gpz pad1=1''','''img :  crosscorrelation with source normalization (stdout)
''')
rsf.doc.progs['sfmpircvrtm']=sfmpircvrtm

sfmpiqrtm = rsf.doc.rsfprog('sfmpiqrtm','user/jsun/Mmpiqrtm.c','''2-D Low-rank One-step Least Pre-stack Reverse-Time-Migration in the complex domain (both img and data are complex valued)''')
sfmpiqrtm.par('src',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiqrtm.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiqrtm.par('right',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiqrtm.par('leftb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiqrtm.par('rightb',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiqrtm.par('vel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpiqrtm.par('norm',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiqrtm.par('tmpwf',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiqrtm.par('tmpwfb',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpiqrtm.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity'''))
sfmpiqrtm.par('adj',rsf.doc.rsfpar('bool','y','','''migration'''))
sfmpiqrtm.par('mode',rsf.doc.rsfpar('int','','',''''''))
sfmpiqrtm.par('illum',rsf.doc.rsfpar('bool','n','','''if n, no source illumination applied '''))
sfmpiqrtm.par('roll',rsf.doc.rsfpar('bool','n','','''if n, receiver is independent of source location and gpl=nx'''))
sfmpiqrtm.par('stable',rsf.doc.rsfpar('int','0','','''stable = 0 -> conventional imaging condition; 1 -> stable imaging condition for Q-compensation with global nomalization; 2 -> shot-by-shot normalization; 3 -> snapshot-by-snapshot compensation (most intensive); 4 -> deconvolution imaging condition '''))
sfmpiqrtm.par('sdiv',rsf.doc.rsfpar('bool','n','','''smooth division'''))
sfmpiqrtm.par('reg',rsf.doc.rsfpar('float','0.0f','','''regularization'''))
sfmpiqrtm.par('niter',rsf.doc.rsfpar('int','100','','''smooth division maximum iterations'''))
sfmpiqrtm.par('eps',rsf.doc.rsfpar('float','SF_EPS','','''padding'''))
sfmpiqrtm.par('perc',rsf.doc.rsfpar('float','0.1','','''percentage of maximum for padding'''))
sfmpiqrtm.par('freq_scal',rsf.doc.rsfpar('bool','n','','''frequency amplitude spectrum scaling'''))
sfmpiqrtm.par('eps',rsf.doc.rsfpar('float','SF_EPS','','''padding'''))
sfmpiqrtm.par('perc',rsf.doc.rsfpar('float','0.1','','''percentage of maximum for padding'''))
sfmpiqrtm.par('shtbgn',rsf.doc.rsfpar('int','','',''''''))
sfmpiqrtm.par('sht0',rsf.doc.rsfpar('int','shtbgn','','''actual shot origin on grid'''))
sfmpiqrtm.par('shtend',rsf.doc.rsfpar('int','','',''''''))
sfmpiqrtm.par('shtint',rsf.doc.rsfpar('int','','',''''''))
sfmpiqrtm.par('spz',rsf.doc.rsfpar('int','','',''''''))
sfmpiqrtm.par('gpz',rsf.doc.rsfpar('int','','',''''''))
sfmpiqrtm.par('gpl',rsf.doc.rsfpar('int','','',''''''))
sfmpiqrtm.par('snapinter',rsf.doc.rsfpar('int','1','','''snap interval '''))
sfmpiqrtm.par('srctrunc',rsf.doc.rsfpar('float','0.4','',''''''))
sfmpiqrtm.par('rectz',rsf.doc.rsfpar('int','1','',''''''))
sfmpiqrtm.par('rectx',rsf.doc.rsfpar('int','1','',''''''))
sfmpiqrtm.par('repeat',rsf.doc.rsfpar('int','0','','''abc parameters '''))
sfmpiqrtm.par('top',rsf.doc.rsfpar('int','40','',''''''))
sfmpiqrtm.par('bot',rsf.doc.rsfpar('int','40','',''''''))
sfmpiqrtm.par('lft',rsf.doc.rsfpar('int','40','',''''''))
sfmpiqrtm.par('rht',rsf.doc.rsfpar('int','40','','''shot output id '''))
sfmpiqrtm.par('shtid',rsf.doc.rsfpar('int','0','','''Set I/O file'''))
sfmpiqrtm.par('pad1',rsf.doc.rsfpar('int','1','','''padding factor on the first axis '''))
sfmpiqrtm.par('norm',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfmpiqrtm.par('tmpwf',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfmpiqrtm.par('tmpwfb',rsf.doc.rsfpar('string ',desc='''auxiliary output file name'''))
sfmpiqrtm.version('2.1-git')
sfmpiqrtm.synopsis('''sfmpiqrtm src=Fsrc.rsf left=left.rsf right=right.rsf leftb=leftb.rsf rightb=rightb.rsf vel=Fvel.rsf norm=Fnorm.rsf tmpwf=Ftmpwf.rsf tmpwfb=Ftmpwfb.rsf verb=n adj=y mode= illum=n roll=n stable=0 sdiv=n reg=0.0f niter=100 eps=SF_EPS perc=0.1 freq_scal=n eps=SF_EPS perc=0.1 shtbgn= sht0=shtbgn shtend= shtint= spz= gpz= gpl= snapinter=1 srctrunc=0.4 rectz=1 rectx=1 repeat=0 top=40 bot=40 lft=40 rht=40 shtid=0 pad1=1''','''img :  crosscorrelation with source normalization (stdout)
''')
rsf.doc.progs['sfmpiqrtm']=sfmpiqrtm

sfmpipfwi = rsf.doc.rsfprog('sfmpipfwi','user/jsun/Mmpipfwi.c','''Visco-acoustic Forward Modeling, FWI, and RTM based on SLS model ''')
sfmpipfwi.par('Fvel',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpipfwi.par('Fq',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpipfwi.par('Fwavelet',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfmpipfwi.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpipfwi.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpipfwi.par('Fgrad',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpipfwi.par('output',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpipfwi.par('Fsrc',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpipfwi.par('Fmwt',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfmpipfwi.par('media',rsf.doc.rsfpar('int','1','','''if 1, acoustic media; if 2, visco-acoustic media '''))
sfmpipfwi.par('function',rsf.doc.rsfpar('int','2','','''if 1, forward modeling; if 2, FWI; if 3, RTM '''))
sfmpipfwi.par('verb',rsf.doc.rsfpar('bool','n','','''verbosity flag '''))
sfmpipfwi.par('nb',rsf.doc.rsfpar('int','100','','''boundary width '''))
sfmpipfwi.par('coef',rsf.doc.rsfpar('float','0.003','','''absorbing boundary coefficient '''))
sfmpipfwi.par('acqui_type',rsf.doc.rsfpar('int','1','','''if 1, fixed acquisition; if 2, marine acquisition; if 3, symmetric acquisition '''))
sfmpipfwi.par('ns',rsf.doc.rsfpar('int','','','''shot number '''))
sfmpipfwi.par('ds',rsf.doc.rsfpar('float','','','''shot interval '''))
sfmpipfwi.par('s0',rsf.doc.rsfpar('float','','','''shot origin '''))
sfmpipfwi.par('sz',rsf.doc.rsfpar('int','5','','''source depth '''))
sfmpipfwi.par('nr',rsf.doc.rsfpar('int','acpar->nx','','''number of receiver '''))
sfmpipfwi.par('dr',rsf.doc.rsfpar('float','acpar->dx','','''receiver interval '''))
sfmpipfwi.par('r0',rsf.doc.rsfpar('float','acpar->x0','','''receiver origin '''))
sfmpipfwi.par('rz',rsf.doc.rsfpar('int','1','','''receiver depth '''))
sfmpipfwi.par('f0',rsf.doc.rsfpar('float','','','''reference frequency '''))
sfmpipfwi.par('interval',rsf.doc.rsfpar('int','1','','''wavefield storing interval '''))
sfmpipfwi.par('fhi',rsf.doc.rsfpar('float','0.5/acpar->dt','',''''''))
sfmpipfwi.par('flo',rsf.doc.rsfpar('float','0.','',''''''))
sfmpipfwi.par('onlygrad',rsf.doc.rsfpar('bool','n','','''only want gradident '''))
sfmpipfwi.par('wt1',rsf.doc.rsfpar('float','acpar->t0','',''''''))
sfmpipfwi.par('wt2',rsf.doc.rsfpar('float','acpar->t0+(acpar->nt-1)*acpar->dt','',''''''))
sfmpipfwi.par('woff1',rsf.doc.rsfpar('float','acpar->r0','',''''''))
sfmpipfwi.par('woff2',rsf.doc.rsfpar('float','acpar->r0+(acpar->nr-1)*acpar->dr','',''''''))
sfmpipfwi.par('oreo',rsf.doc.rsfpar('bool','n','','''keep oreo or keep cream '''))
sfmpipfwi.par('waterz',rsf.doc.rsfpar('int','51','','''water layer depth '''))
sfmpipfwi.par('grectx',rsf.doc.rsfpar('int','3','','''gradient smoothing radius in x '''))
sfmpipfwi.par('grectz',rsf.doc.rsfpar('int','3','','''gradient smoothing radius in z '''))
sfmpipfwi.par('niter',rsf.doc.rsfpar('int','','','''iteration number '''))
sfmpipfwi.par('conv_error',rsf.doc.rsfpar('float','','','''final convergence error '''))
sfmpipfwi.par('c1',rsf.doc.rsfpar('float','1e-4','',''''''))
sfmpipfwi.par('c2',rsf.doc.rsfpar('float','0.9','',''''''))
sfmpipfwi.par('v1',rsf.doc.rsfpar('float','0.','',''''''))
sfmpipfwi.par('v2',rsf.doc.rsfpar('float','10.','',''''''))
sfmpipfwi.par('onlygrad',rsf.doc.rsfpar('bool','n','','''only want gradident '''))
sfmpipfwi.par('wt1',rsf.doc.rsfpar('float','acpar->t0','',''''''))
sfmpipfwi.par('wt2',rsf.doc.rsfpar('float','acpar->t0+(acpar->nt-1)*acpar->dt','',''''''))
sfmpipfwi.par('woff1',rsf.doc.rsfpar('float','acpar->r0','',''''''))
sfmpipfwi.par('woff2',rsf.doc.rsfpar('float','acpar->r0+(acpar->nr-1)*acpar->dr','',''''''))
sfmpipfwi.par('oreo',rsf.doc.rsfpar('bool','n','','''keep oreo or keep cream '''))
sfmpipfwi.par('waterz',rsf.doc.rsfpar('int','0','','''water layer depth '''))
sfmpipfwi.par('waterzb',rsf.doc.rsfpar('int','0','','''water layer depth from bottom up '''))
sfmpipfwi.par('grectx',rsf.doc.rsfpar('int','3','','''gradient smoothing radius in x '''))
sfmpipfwi.par('grectz',rsf.doc.rsfpar('int','3','','''gradient smoothing radius in z '''))
sfmpipfwi.par('niter',rsf.doc.rsfpar('int','','','''iteration number '''))
sfmpipfwi.par('repeat',rsf.doc.rsfpar('int','1','','''repeat resetting alpha '''))
sfmpipfwi.par('conv_error',rsf.doc.rsfpar('float','','','''final convergence error '''))
sfmpipfwi.par('c1',rsf.doc.rsfpar('float','1e-4','',''''''))
sfmpipfwi.par('c2',rsf.doc.rsfpar('float','0.9','',''''''))
sfmpipfwi.par('v1',rsf.doc.rsfpar('float','0.','',''''''))
sfmpipfwi.par('v2',rsf.doc.rsfpar('float','10.','',''''''))
sfmpipfwi.version('2.1-git')
sfmpipfwi.synopsis('''sfmpipfwi Fvel=Fv.rsf Fq=Fq.rsf Fwavelet=Fw.rsf output=Fdat.rsf output=Finv.rsf Fgrad=Fgrad.rsf output=Fimg.rsf Fsrc=Fsrc.rsf Fmwt=Fmwt.rsf media=1 function=2 verb=n nb=100 coef=0.003 acqui_type=1 ns= ds= s0= sz=5 nr=acpar->nx dr=acpar->dx r0=acpar->x0 rz=1 f0= interval=1 fhi=0.5/acpar->dt flo=0. onlygrad=n wt1=acpar->t0 wt2=acpar->t0+(acpar->nt-1)*acpar->dt woff1=acpar->r0 woff2=acpar->r0+(acpar->nr-1)*acpar->dr oreo=n waterz=51 grectx=3 grectz=3 niter= conv_error= c1=1e-4 c2=0.9 v1=0. v2=10. onlygrad=n wt1=acpar->t0 wt2=acpar->t0+(acpar->nt-1)*acpar->dt woff1=acpar->r0 woff2=acpar->r0+(acpar->nr-1)*acpar->dr oreo=n waterz=0 waterzb=0 grectx=3 grectz=3 niter= repeat=1 conv_error= c1=1e-4 c2=0.9 v1=0. v2=10.''','''''')
rsf.doc.progs['sfmpipfwi']=sfmpipfwi

sfgeopar = rsf.doc.rsfprog('sfgeopar','user/jsun/Mgeopar.py','''Generate geometry parameters for 2d/3d RTM''')
sfgeopar.version('2.1-git')
sfgeopar.synopsis('''sfgeopar > output.rsf''','''''')
rsf.doc.progs['sfgeopar']=sfgeopar

sftilr2 = rsf.doc.rsfprog('sftilr2','user/jsun/Mtilr2.cc','''Lowrank decomposition for 2-D anisotropic wave propagation using exact phase velocity (2 step time marching). ''')
sftilr2.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftilr2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sftilr2.par('type',rsf.doc.rsfpar('','1','','''wave mode (1=p wave, 2=Sv wave)'''))
sftilr2.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sftilr2.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sftilr2.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sftilr2.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sftilr2.version('2.1-git')
sftilr2.synopsis('''sftilr2 < velz.rsf fft=fft.rsf left=left.rsf > right.rsf type=1 seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sftilr2']=sftilr2

sfortholr3 = rsf.doc.rsfprog('sfortholr3','user/jsun/Mortholr3.cc','''Lowrank decomposition for 3-D orthorhombic wave propagation (Real). ''')
sfortholr3.par('seta1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfortholr3.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfortholr3.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfortholr3.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfortholr3.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfortholr3.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfortholr3.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfortholr3.par('mode',rsf.doc.rsfpar('','0','',''''0' means quasi-P (default), '1' means quasi-S, '2' means quasi-S2'''))
sfortholr3.par('tilt',rsf.doc.rsfpar('','false','',''''''))
sfortholr3.par('approx',rsf.doc.rsfpar('','2','','''Type of approximation (0=exact 1=zone 2=acoustic 3=tsvankin)'''))
sfortholr3.version('2.1-git')
sfortholr3.synopsis('''sfortholr3 < c11.rsf seta1=seta1.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt= mode=0 tilt=false approx=2''','''''')
rsf.doc.progs['sfortholr3']=sfortholr3

sfcortholr3 = rsf.doc.rsfprog('sfcortholr3','user/jsun/Mcortholr3.cc','''Lowrank decomposition for 3-D orthorhombic wave propagation. ''')
sfcortholr3.par('seta1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcortholr3.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcortholr3.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcortholr3.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfcortholr3.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfcortholr3.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfcortholr3.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfcortholr3.par('mode',rsf.doc.rsfpar('','0','',''''0' means quasi-P (default),'1' means quasi-S, '2' means quasi-S2'''))
sfcortholr3.par('tilt',rsf.doc.rsfpar('','false','',''''''))
sfcortholr3.version('2.1-git')
sfcortholr3.synopsis('''sfcortholr3 < c11.rsf seta1=seta1.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt= mode=0 tilt=false''','''''')
rsf.doc.progs['sfcortholr3']=sfcortholr3

sfcisolr2 = rsf.doc.rsfprog('sfcisolr2','user/jsun/Mcisolr2.cc','''Complex lowrank decomposition for 2-D isotropic wave propagation. ''')
sfcisolr2.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcisolr2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcisolr2.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfcisolr2.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfcisolr2.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfcisolr2.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfcisolr2.par('os',rsf.doc.rsfpar('','true','',''''''))
sfcisolr2.par('sub',rsf.doc.rsfpar('','false','','''for onestep, default false'''))
sfcisolr2.par('sub',rsf.doc.rsfpar('','true','','''for twostep, default true'''))
sfcisolr2.par('lap',rsf.doc.rsfpar('','false','',''''''))
sfcisolr2.version('2.1-git')
sfcisolr2.synopsis('''sfcisolr2 < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt= os=true sub=false sub=true lap=false''','''''')
rsf.doc.progs['sfcisolr2']=sfcisolr2

sfcisolr2rev = rsf.doc.rsfprog('sfcisolr2rev','user/jsun/Mcisolr2rev.cc','''Complex lowrank decomposition for 2-D isotropic wave propagation. ''')
sfcisolr2rev.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcisolr2rev.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcisolr2rev.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfcisolr2rev.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfcisolr2rev.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfcisolr2rev.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfcisolr2rev.version('2.1-git')
sfcisolr2rev.synopsis('''sfcisolr2rev < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfcisolr2rev']=sfcisolr2rev

sfcisolr3 = rsf.doc.rsfprog('sfcisolr3','user/jsun/Mcisolr3.cc','''Lowrank decomposition for 3-D isotropic wave propagation. ''')
sfcisolr3.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcisolr3.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcisolr3.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfcisolr3.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfcisolr3.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfcisolr3.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfcisolr3.version('2.1-git')
sfcisolr3.synopsis('''sfcisolr3 < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfcisolr3']=sfcisolr3

sfctilr2 = rsf.doc.rsfprog('sfctilr2','user/jsun/Mctilr2.cc','''Lowrank decomposition for 2-D anisotropic wave propagation using exact phase velocity (2 step time marching). ''')
sfctilr2.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfctilr2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfctilr2.par('type',rsf.doc.rsfpar('','1','','''wave mode (1=p wave, 2=Sv wave)'''))
sfctilr2.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfctilr2.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfctilr2.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfctilr2.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfctilr2.version('2.1-git')
sfctilr2.synopsis('''sfctilr2 < velz.rsf fft=fft.rsf left=left.rsf > right.rsf type=1 seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfctilr2']=sfctilr2

sfcisolr2grad = rsf.doc.rsfprog('sfcisolr2grad','user/jsun/Mcisolr2grad.cc','''Complex lowrank decomposition for 2-D isotropic wave propagation (including velocity gradient term). ''')
sfcisolr2grad.par('grad1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcisolr2grad.par('grad2',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcisolr2grad.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcisolr2grad.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcisolr2grad.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfcisolr2grad.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfcisolr2grad.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfcisolr2grad.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfcisolr2grad.version('2.1-git')
sfcisolr2grad.synopsis('''sfcisolr2grad < vel.rsf grad1=grad1.rsf grad2=grad2.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfcisolr2grad']=sfcisolr2grad

sfcisolr2abc = rsf.doc.rsfprog('sfcisolr2abc','user/jsun/Mcisolr2abc.cc','''Complex lowrank decomposition for 2-D isotropic wave propagation with absorbing boundaries. ''')
sfcisolr2abc.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcisolr2abc.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcisolr2abc.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfcisolr2abc.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfcisolr2abc.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfcisolr2abc.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfcisolr2abc.par('nbt',rsf.doc.rsfpar('','0','',''''''))
sfcisolr2abc.par('nbb',rsf.doc.rsfpar('','0','',''''''))
sfcisolr2abc.par('nbl',rsf.doc.rsfpar('','0','',''''''))
sfcisolr2abc.par('nbr',rsf.doc.rsfpar('','0','',''''''))
sfcisolr2abc.par('ct',rsf.doc.rsfpar('','0.0','',''''''))
sfcisolr2abc.par('cb',rsf.doc.rsfpar('','0.0','',''''''))
sfcisolr2abc.par('cl',rsf.doc.rsfpar('','0.0','',''''''))
sfcisolr2abc.par('cr',rsf.doc.rsfpar('','0.0','',''''''))
sfcisolr2abc.par('rev',rsf.doc.rsfpar('','false','',''''''))
sfcisolr2abc.version('2.1-git')
sfcisolr2abc.synopsis('''sfcisolr2abc < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt= nbt=0 nbb=0 nbl=0 nbr=0 ct=0.0 cb=0.0 cl=0.0 cr=0.0 rev=false''','''''')
rsf.doc.progs['sfcisolr2abc']=sfcisolr2abc

sfcisolr2abc1 = rsf.doc.rsfprog('sfcisolr2abc1','user/jsun/Mcisolr2abc1.cc','''Complex lowrank decomposition for 2-D isotropic wave propagation with absorbing boundaries. ''')
sfcisolr2abc1.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcisolr2abc1.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcisolr2abc1.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfcisolr2abc1.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfcisolr2abc1.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfcisolr2abc1.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfcisolr2abc1.par('rev',rsf.doc.rsfpar('','false','','''reversal'''))
sfcisolr2abc1.par('nbt',rsf.doc.rsfpar('','0','',''''''))
sfcisolr2abc1.par('nbb',rsf.doc.rsfpar('','0','',''''''))
sfcisolr2abc1.par('nbl',rsf.doc.rsfpar('','0','',''''''))
sfcisolr2abc1.par('nbr',rsf.doc.rsfpar('','0','',''''''))
sfcisolr2abc1.par('ct',rsf.doc.rsfpar('','0.0','',''''''))
sfcisolr2abc1.par('cb',rsf.doc.rsfpar('','0.0','',''''''))
sfcisolr2abc1.par('cl',rsf.doc.rsfpar('','0.0','',''''''))
sfcisolr2abc1.par('cr',rsf.doc.rsfpar('','0.0','',''''''))
sfcisolr2abc1.version('2.1-git')
sfcisolr2abc1.synopsis('''sfcisolr2abc1 < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt= rev=false nbt=0 nbb=0 nbl=0 nbr=0 ct=0.0 cb=0.0 cl=0.0 cr=0.0''','''''')
rsf.doc.progs['sfcisolr2abc1']=sfcisolr2abc1

sfcisolr1 = rsf.doc.rsfprog('sfcisolr1','user/jsun/Mcisolr1.cc','''Complex lowrank decomposition for 2-D isotropic wave propagation. ''')
sfcisolr1.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcisolr1.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcisolr1.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfcisolr1.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfcisolr1.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfcisolr1.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfcisolr1.version('2.1-git')
sfcisolr1.synopsis('''sfcisolr1 < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfcisolr1']=sfcisolr1

sfcanisolr2 = rsf.doc.rsfprog('sfcanisolr2','user/jsun/Mcanisolr2.cc','''Lowrank decomposition for 2-D anisotropic wave propagation (Complex). ''')
sfcanisolr2.par('vels',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcanisolr2.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcanisolr2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcanisolr2.par('mode',rsf.doc.rsfpar('','0','','''wave mode (0=p wave, 1=Sv wave)'''))
sfcanisolr2.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfcanisolr2.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfcanisolr2.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfcanisolr2.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfcanisolr2.par('os',rsf.doc.rsfpar('','true','',''''''))
sfcanisolr2.par('sub',rsf.doc.rsfpar('','false','','''for onestep, default false'''))
sfcanisolr2.par('sub',rsf.doc.rsfpar('','true','','''for twostep, default true'''))
sfcanisolr2.par('taper',rsf.doc.rsfpar('','1.0','','''wavenumber tapering flag'''))
sfcanisolr2.par('approx',rsf.doc.rsfpar('','2','','''Type of approximation (0=exact 1=zone 2=acoustic)'''))
sfcanisolr2.par('relation',rsf.doc.rsfpar('','3','','''Type of q relationship (0=shale, 1=sand, 2=carbonate, default being smallest error)'''))
sfcanisolr2.version('2.1-git')
sfcanisolr2.synopsis('''sfcanisolr2 < velz.rsf vels=vels.rsf fft=fft.rsf left=left.rsf > right.rsf mode=0 seed=time(NULL eps=1.e-4 npk=20 dt= os=true sub=false sub=true taper=1.0 approx=2 relation=3''','''''')
rsf.doc.progs['sfcanisolr2']=sfcanisolr2

sfcanisolr2abc = rsf.doc.rsfprog('sfcanisolr2abc','user/jsun/Mcanisolr2abc.cc','''Lowrank decomposition for 2-D anisotropic wave propagation. ''')
sfcanisolr2abc.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfcanisolr2abc.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfcanisolr2abc.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfcanisolr2abc.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfcanisolr2abc.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfcanisolr2abc.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfcanisolr2abc.par('nbt',rsf.doc.rsfpar('','0','',''''''))
sfcanisolr2abc.par('nbb',rsf.doc.rsfpar('','0','',''''''))
sfcanisolr2abc.par('nbl',rsf.doc.rsfpar('','0','',''''''))
sfcanisolr2abc.par('nbr',rsf.doc.rsfpar('','0','',''''''))
sfcanisolr2abc.par('ct',rsf.doc.rsfpar('','0.0','',''''''))
sfcanisolr2abc.par('cb',rsf.doc.rsfpar('','0.0','',''''''))
sfcanisolr2abc.par('cl',rsf.doc.rsfpar('','0.0','',''''''))
sfcanisolr2abc.par('cr',rsf.doc.rsfpar('','0.0','',''''''))
sfcanisolr2abc.version('2.1-git')
sfcanisolr2abc.synopsis('''sfcanisolr2abc < velz.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt= nbt=0 nbb=0 nbl=0 nbr=0 ct=0.0 cb=0.0 cl=0.0 cr=0.0''','''''')
rsf.doc.progs['sfcanisolr2abc']=sfcanisolr2abc

sffraclr2 = rsf.doc.rsfprog('sffraclr2','user/jsun/Mfraclr2.cc','''Complex lowrank decomposition for 2-D viscoacoustic isotropic wave propagation. ''')
sffraclr2.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffraclr2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffraclr2.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sffraclr2.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sffraclr2.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sffraclr2.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sffraclr2.par('w0',rsf.doc.rsfpar('','','','''reference frequency'''))
sffraclr2.par('rev',rsf.doc.rsfpar('','false','','''reverse propagation'''))
sffraclr2.par('mode',rsf.doc.rsfpar('','0','','''mode of propagation: 0 is viscoacoustic (default); 1 is loss-dominated; 2 is dispersion dominated; 3 is acoustic'''))
sffraclr2.par('compen',rsf.doc.rsfpar('','false','','''compensate attenuation, only works if mode=0,1 (viscoacoustic)'''))
sffraclr2.par('taper',rsf.doc.rsfpar('','0.2','','''taper ratio for tukey window'''))
sffraclr2.par('cutoff',rsf.doc.rsfpar('','250.','','''cutoff frequency'''))
sffraclr2.par('vmax',rsf.doc.rsfpar('','6000.','','''maximum velocity'''))
sffraclr2.par('sign',rsf.doc.rsfpar('','0','','''sign of solution: 0 is positive, 1 is negative'''))
sffraclr2.par('avg',rsf.doc.rsfpar('','false','','''whether use average value of gamma'''))
sffraclr2.par('gamma',rsf.doc.rsfpar('','','',''''''))
sffraclr2.par('abc',rsf.doc.rsfpar('','0','',''''''))
sffraclr2.par('nbt',rsf.doc.rsfpar('','0','',''''''))
sffraclr2.par('nbb',rsf.doc.rsfpar('','0','',''''''))
sffraclr2.par('nbl',rsf.doc.rsfpar('','0','',''''''))
sffraclr2.par('nbr',rsf.doc.rsfpar('','0','',''''''))
sffraclr2.par('ct',rsf.doc.rsfpar('','0.0','',''''''))
sffraclr2.par('cb',rsf.doc.rsfpar('','0.0','',''''''))
sffraclr2.par('cl',rsf.doc.rsfpar('','0.0','',''''''))
sffraclr2.par('cr',rsf.doc.rsfpar('','0.0','',''''''))
sffraclr2.version('2.1-git')
sffraclr2.synopsis('''sffraclr2 < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt= w0= rev=false mode=0 compen=false taper=0.2 cutoff=250. vmax=6000. sign=0 avg=false gamma= abc=0 nbt=0 nbb=0 nbl=0 nbr=0 ct=0.0 cb=0.0 cl=0.0 cr=0.0''','''''')
rsf.doc.progs['sffraclr2']=sffraclr2

sfzfraclr2 = rsf.doc.rsfprog('sfzfraclr2','user/jsun/Mzfraclr2.cc','''Complex lowrank decomposition for 2-D viscoacoustic isotropic wave propagation. ''')
sfzfraclr2.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzfraclr2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfzfraclr2.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfzfraclr2.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfzfraclr2.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfzfraclr2.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfzfraclr2.par('w0',rsf.doc.rsfpar('','','','''reference frequency'''))
sfzfraclr2.par('rev',rsf.doc.rsfpar('','false','','''reverse propagation'''))
sfzfraclr2.par('mode',rsf.doc.rsfpar('','0','','''mode of propagation: 0 is viscoacoustic (default); 1 is loss-dominated; 2 is dispersion dominated; 3 is acoustic'''))
sfzfraclr2.par('compen',rsf.doc.rsfpar('','false','','''compensate attenuation, only works if mode=0,1 (viscoacoustic)'''))
sfzfraclr2.par('taper',rsf.doc.rsfpar('','0.2','','''taper ratio for tukey window'''))
sfzfraclr2.par('cutoff',rsf.doc.rsfpar('','250.','','''cutoff frequency'''))
sfzfraclr2.par('vmax',rsf.doc.rsfpar('','6000.','','''maximum velocity'''))
sfzfraclr2.par('sign',rsf.doc.rsfpar('','0','','''sign of solution: 0 is positive, 1 is negative'''))
sfzfraclr2.par('avg',rsf.doc.rsfpar('','false','','''whether use average value of gamma'''))
sfzfraclr2.par('gamma',rsf.doc.rsfpar('','','',''''''))
sfzfraclr2.par('abc',rsf.doc.rsfpar('','0','',''''''))
sfzfraclr2.par('nbt',rsf.doc.rsfpar('','0','',''''''))
sfzfraclr2.par('nbb',rsf.doc.rsfpar('','0','',''''''))
sfzfraclr2.par('nbl',rsf.doc.rsfpar('','0','',''''''))
sfzfraclr2.par('nbr',rsf.doc.rsfpar('','0','',''''''))
sfzfraclr2.par('ct',rsf.doc.rsfpar('','0.0','',''''''))
sfzfraclr2.par('cb',rsf.doc.rsfpar('','0.0','',''''''))
sfzfraclr2.par('cl',rsf.doc.rsfpar('','0.0','',''''''))
sfzfraclr2.par('cr',rsf.doc.rsfpar('','0.0','',''''''))
sfzfraclr2.version('2.1-git')
sfzfraclr2.synopsis('''sfzfraclr2 < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt= w0= rev=false mode=0 compen=false taper=0.2 cutoff=250. vmax=6000. sign=0 avg=false gamma= abc=0 nbt=0 nbb=0 nbl=0 nbr=0 ct=0.0 cb=0.0 cl=0.0 cr=0.0''','''''')
rsf.doc.progs['sfzfraclr2']=sfzfraclr2

sffraclr2test = rsf.doc.rsfprog('sffraclr2test','user/jsun/Mfraclr2test.cc','''Complex lowrank decomposition for 2-D constant-Q visco-acoustic wave equation. (Testing for exact disperison relation)''')
sffraclr2test.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sffraclr2test.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sffraclr2test.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sffraclr2test.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sffraclr2test.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sffraclr2test.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sffraclr2test.par('c0',rsf.doc.rsfpar('','','','''reference velocity'''))
sffraclr2test.par('w0',rsf.doc.rsfpar('','','','''reference frequency'''))
sffraclr2test.par('rev',rsf.doc.rsfpar('','false','','''reverse propagation'''))
sffraclr2test.par('mode',rsf.doc.rsfpar('','0','','''mode of propagation: 0 is viscoacoustic (default); 1 is loss-dominated; 2 is dispersion dominated; 3 is acoustic'''))
sffraclr2test.par('sign',rsf.doc.rsfpar('','0','','''sign of solution: 0 is positive, 1 is negative'''))
sffraclr2test.par('approx',rsf.doc.rsfpar('','true','','''use Tieyuan's approximation'''))
sffraclr2test.version('2.1-git')
sffraclr2test.synopsis('''sffraclr2test < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt= c0= w0= rev=false mode=0 sign=0 approx=true''','''''')
rsf.doc.progs['sffraclr2test']=sffraclr2test

sftilrzone = rsf.doc.rsfprog('sftilrzone','user/jsun/Mtilrzone.cc','''Lowrank decomposition for 2-D anisotropic wave propagation using exact phase velocity (2 step time marching). ''')
sftilrzone.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sftilrzone.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sftilrzone.par('mode',rsf.doc.rsfpar('','0','','''wave mode (0=p wave, 1=Sv wave)'''))
sftilrzone.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sftilrzone.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sftilrzone.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sftilrzone.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sftilrzone.par('approx',rsf.doc.rsfpar('','false','','''whether to use zone's approximation'''))
sftilrzone.version('2.1-git')
sftilrzone.synopsis('''sftilrzone < c11.rsf fft=fft.rsf left=left.rsf > right.rsf mode=0 seed=time(NULL eps=1.e-4 npk=20 dt= approx=false''','''''')
rsf.doc.progs['sftilrzone']=sftilrzone

sfortholrzone = rsf.doc.rsfprog('sfortholrzone','user/jsun/Mortholrzone.cc','''Lowrank decomposition for 3-D orthorhombic wave propagation with zone's approximation. ''')
sfortholrzone.par('seta1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfortholrzone.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfortholrzone.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfortholrzone.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfortholrzone.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfortholrzone.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfortholrzone.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfortholrzone.par('mode',rsf.doc.rsfpar('','0','',''''0' means quasi-P (default), '1' means quasi-S, '2' means quasi-S2'''))
sfortholrzone.par('tilt',rsf.doc.rsfpar('','false','',''''''))
sfortholrzone.par('approx',rsf.doc.rsfpar('','false','','''if true, use zone's approximation instead of exact phase velocity'''))
sfortholrzone.par('reduce',rsf.doc.rsfpar('','false','','''if true, use the expirical linear relationship between qv and qh'''))
sfortholrzone.version('2.1-git')
sfortholrzone.synopsis('''sfortholrzone < c11.rsf seta1=seta1.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt= mode=0 tilt=false approx=false reduce=false''','''''')
rsf.doc.progs['sfortholrzone']=sfortholrzone

sfzortholr3 = rsf.doc.rsfprog('sfzortholr3','user/jsun/Mzortholr3.cc','''Lowrank decomposition for 3-D orthorhombic wave propagation. ''')
sfzortholr3.par('seta1',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzortholr3.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzortholr3.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfzortholr3.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfzortholr3.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfzortholr3.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfzortholr3.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfzortholr3.par('mode',rsf.doc.rsfpar('','0','',''''0' means quasi-P (default),'1' means quasi-S, '2' means quasi-S2'''))
sfzortholr3.par('tilt',rsf.doc.rsfpar('','false','',''''''))
sfzortholr3.version('2.1-git')
sfzortholr3.synopsis('''sfzortholr3 < c11.rsf seta1=seta1.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt= mode=0 tilt=false''','''''')
rsf.doc.progs['sfzortholr3']=sfzortholr3

sfzanisolr2 = rsf.doc.rsfprog('sfzanisolr2','user/jsun/Mzanisolr2.cc','''Lowrank decomposition for 2-D anisotropic wave propagation (Complex). ''')
sfzanisolr2.par('vels',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzanisolr2.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzanisolr2.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfzanisolr2.par('mode',rsf.doc.rsfpar('','0','','''wave mode (0=p wave, 1=Sv wave)'''))
sfzanisolr2.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfzanisolr2.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfzanisolr2.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfzanisolr2.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfzanisolr2.par('os',rsf.doc.rsfpar('','true','',''''''))
sfzanisolr2.par('sub',rsf.doc.rsfpar('','false','','''for onestep, default false'''))
sfzanisolr2.par('sub',rsf.doc.rsfpar('','true','','''for twostep, default true'''))
sfzanisolr2.par('abc',rsf.doc.rsfpar('','0','','''absorbing boundary condition (0=no abc, 1=direction dependent, 2=direction independent)'''))
sfzanisolr2.par('nbt',rsf.doc.rsfpar('','0','',''''''))
sfzanisolr2.par('nbb',rsf.doc.rsfpar('','0','',''''''))
sfzanisolr2.par('nbl',rsf.doc.rsfpar('','0','',''''''))
sfzanisolr2.par('nbr',rsf.doc.rsfpar('','0','',''''''))
sfzanisolr2.par('ct',rsf.doc.rsfpar('','0.0','',''''''))
sfzanisolr2.par('cb',rsf.doc.rsfpar('','0.0','',''''''))
sfzanisolr2.par('cl',rsf.doc.rsfpar('','0.0','',''''''))
sfzanisolr2.par('cr',rsf.doc.rsfpar('','0.0','',''''''))
sfzanisolr2.par('taper',rsf.doc.rsfpar('','1.0','','''wavenumber tapering flag'''))
sfzanisolr2.par('approx',rsf.doc.rsfpar('','2','','''Type of approximation (0=exact 1=zone 2=acoustic)'''))
sfzanisolr2.par('relation',rsf.doc.rsfpar('','3','','''Type of q relationship (0=shale, 1=sand, 2=carbonate, default being smallest error)'''))
sfzanisolr2.version('2.1-git')
sfzanisolr2.synopsis('''sfzanisolr2 < velz.rsf vels=vels.rsf fft=fft.rsf left=left.rsf > right.rsf mode=0 seed=time(NULL eps=1.e-4 npk=20 dt= os=true sub=false sub=true abc=0 nbt=0 nbb=0 nbl=0 nbr=0 ct=0.0 cb=0.0 cl=0.0 cr=0.0 taper=1.0 approx=2 relation=3''','''''')
rsf.doc.progs['sfzanisolr2']=sfzanisolr2

sfzanisolr2abc = rsf.doc.rsfprog('sfzanisolr2abc','user/jsun/Mzanisolr2abc.cc','''Lowrank decomposition for 2-D anisotropic wave propagation. ''')
sfzanisolr2abc.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzanisolr2abc.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfzanisolr2abc.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfzanisolr2abc.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfzanisolr2abc.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfzanisolr2abc.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfzanisolr2abc.par('nbt',rsf.doc.rsfpar('','0','',''''''))
sfzanisolr2abc.par('nbb',rsf.doc.rsfpar('','0','',''''''))
sfzanisolr2abc.par('nbl',rsf.doc.rsfpar('','0','',''''''))
sfzanisolr2abc.par('nbr',rsf.doc.rsfpar('','0','',''''''))
sfzanisolr2abc.par('ct',rsf.doc.rsfpar('','0.0','',''''''))
sfzanisolr2abc.par('cb',rsf.doc.rsfpar('','0.0','',''''''))
sfzanisolr2abc.par('cl',rsf.doc.rsfpar('','0.0','',''''''))
sfzanisolr2abc.par('cr',rsf.doc.rsfpar('','0.0','',''''''))
sfzanisolr2abc.version('2.1-git')
sfzanisolr2abc.synopsis('''sfzanisolr2abc < velz.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt= nbt=0 nbb=0 nbl=0 nbr=0 ct=0.0 cb=0.0 cl=0.0 cr=0.0''','''''')
rsf.doc.progs['sfzanisolr2abc']=sfzanisolr2abc

sfclfdc1 = rsf.doc.rsfprog('sfclfdc1','user/jsun/Mclfdc1.cc','''1D 10th-order Lowrank Onestep FD coefficient''')
sfclfdc1.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfclfdc1.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfclfdc1.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfclfdc1.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfclfdc1.par('SIZE',rsf.doc.rsfpar('','','','''stencil size'''))
sfclfdc1.par('mode',rsf.doc.rsfpar('','0','','''symbol'''))
sfclfdc1.par('perc',rsf.doc.rsfpar('','50','','''cutoff percentage'''))
sfclfdc1.par('cpxexp',rsf.doc.rsfpar('','true','','''complex exponential'''))
sfclfdc1.version('2.1-git')
sfclfdc1.synopsis('''sfclfdc1 < velf.rsf > outm.rsf seed=time(NULL eps=1.e-4 npk=20 dt= SIZE= mode=0 perc=50 cpxexp=true''','''''')
rsf.doc.progs['sfclfdc1']=sfclfdc1

sfclfdc2 = rsf.doc.rsfprog('sfclfdc2','user/jsun/Mclfdc2.cc','''2D nth-order Lowrank FD coefficient''')
sfclfdc2.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfclfdc2.par('eps',rsf.doc.rsfpar('','1.e-6','','''tolerance'''))
sfclfdc2.par('npk',rsf.doc.rsfpar('','50','','''maximum rank'''))
sfclfdc2.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfclfdc2.par('size',rsf.doc.rsfpar('','6','','''stencil length'''))
sfclfdc2.version('2.1-git')
sfclfdc2.synopsis('''sfclfdc2 < velf.rsf > outm.rsf seed=time(NULL eps=1.e-6 npk=50 dt= size=6''','''''')
rsf.doc.progs['sfclfdc2']=sfclfdc2

sfclfdc1bak = rsf.doc.rsfprog('sfclfdc1-bak','user/jsun/Mclfdc1-bak.cc','''1D 10th-order Lowrank Onestep FD coefficient''')
sfclfdc1bak.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfclfdc1bak.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfclfdc1bak.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfclfdc1bak.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfclfdc1bak.version('2.1-git')
sfclfdc1bak.synopsis('''sfclfdc1-bak < velf.rsf > outm.rsf seed=time(NULL eps=1.e-4 npk=20 dt=''','''''')
rsf.doc.progs['sfclfdc1-bak']=sfclfdc1bak

sfzisolr2abc = rsf.doc.rsfprog('sfzisolr2abc','user/jsun/Mzisolr2abc.cc','''Complex lowrank decomposition for 2-D isotropic wave propagation with absorbing boundaries. ''')
sfzisolr2abc.par('fft',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfzisolr2abc.par('left',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfzisolr2abc.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfzisolr2abc.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfzisolr2abc.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfzisolr2abc.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfzisolr2abc.par('nbt',rsf.doc.rsfpar('','0','',''''''))
sfzisolr2abc.par('nbb',rsf.doc.rsfpar('','0','',''''''))
sfzisolr2abc.par('nbl',rsf.doc.rsfpar('','0','',''''''))
sfzisolr2abc.par('nbr',rsf.doc.rsfpar('','0','',''''''))
sfzisolr2abc.par('ct',rsf.doc.rsfpar('','0.0','',''''''))
sfzisolr2abc.par('cb',rsf.doc.rsfpar('','0.0','',''''''))
sfzisolr2abc.par('cl',rsf.doc.rsfpar('','0.0','',''''''))
sfzisolr2abc.par('cr',rsf.doc.rsfpar('','0.0','',''''''))
sfzisolr2abc.par('abc',rsf.doc.rsfpar('','0','',''''''))
sfzisolr2abc.par('rev',rsf.doc.rsfpar('','false','',''''''))
sfzisolr2abc.version('2.1-git')
sfzisolr2abc.synopsis('''sfzisolr2abc < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt= nbt=0 nbb=0 nbl=0 nbr=0 ct=0.0 cb=0.0 cl=0.0 cr=0.0 abc=0 rev=false''','''''')
rsf.doc.progs['sfzisolr2abc']=sfzisolr2abc

sfclfdc1frac = rsf.doc.rsfprog('sfclfdc1frac','user/jsun/Mclfdc1frac.cc','''1D 10th-order Lowrank Onestep FD coefficient''')
sfclfdc1frac.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfclfdc1frac.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance'''))
sfclfdc1frac.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfclfdc1frac.par('dt',rsf.doc.rsfpar('','','','''time step'''))
sfclfdc1frac.par('SIZE',rsf.doc.rsfpar('','','','''stencil size'''))
sfclfdc1frac.par('mode',rsf.doc.rsfpar('','0','','''symbol'''))
sfclfdc1frac.par('perc',rsf.doc.rsfpar('','50','','''cutoff percentage'''))
sfclfdc1frac.par('cpxexp',rsf.doc.rsfpar('','true','','''complex exponential'''))
sfclfdc1frac.version('2.1-git')
sfclfdc1frac.synopsis('''sfclfdc1frac < velf.rsf > outm.rsf seed=time(NULL eps=1.e-4 npk=20 dt= SIZE= mode=0 perc=50 cpxexp=true''','''''')
rsf.doc.progs['sfclfdc1frac']=sfclfdc1frac

sfewelr3 = rsf.doc.rsfprog('sfewelr3','user/jsun/Mewelr3.cc','''None''')
sfewelr3.par('c14',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewelr3.par('theta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewelr3.par('verb',rsf.doc.rsfpar('','false','','''verbosity flag'''))
sfewelr3.par('tilt',rsf.doc.rsfpar('','false','','''tilting of TTI'''))
sfewelr3.par('tric',rsf.doc.rsfpar('','false','','''triclinic anisotropy'''))
sfewelr3.par('tstp',rsf.doc.rsfpar('','false','','''twostep propagator'''))
sfewelr3.par('pseu',rsf.doc.rsfpar('','false','','''pseudo-spectral propagator'''))
sfewelr3.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfewelr3.par('mode',rsf.doc.rsfpar('','0','','''mode of decomposition: 0->mixed, 1->p, 2->s'''))
sfewelr3.par('jump',rsf.doc.rsfpar('','1','','''jump step for reduced lowrank decomposition'''))
sfewelr3.par('eps',rsf.doc.rsfpar('','1.e-6','','''tolerance'''))
sfewelr3.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfewelr3.par('nb',rsf.doc.rsfpar('','0','','''boundary padding'''))
sfewelr3.par('dt',rsf.doc.rsfpar('','1.e-3','','''time step size'''))
sfewelr3.version('2.1-git')
sfewelr3.synopsis('''sfewelr3 < c11.rsf c14=c14.rsf theta=q1.rsf verb=false tilt=false tric=false tstp=false pseu=false seed=time(NULL mode=0 jump=1 eps=1.e-6 npk=20 nb=0 dt=1.e-3''','''''')
rsf.doc.progs['sfewelr3']=sfewelr3

sfewedc3p = rsf.doc.rsfprog('sfewedc3p','user/jsun/Mewedc3p.cc','''None''')
sfewedc3p.par('c14',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3p.par('theta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3p.par('verb',rsf.doc.rsfpar('','false','','''verbosity flag'''))
sfewedc3p.par('tilt',rsf.doc.rsfpar('','false','','''tilting of TTI'''))
sfewedc3p.par('tric',rsf.doc.rsfpar('','false','','''triclinic anisotropy'''))
sfewedc3p.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfewedc3p.par('eps',rsf.doc.rsfpar('','1.e-6','','''tolerance'''))
sfewedc3p.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfewedc3p.par('nb',rsf.doc.rsfpar('','0','','''boundary padding'''))
sfewedc3p.par('dt',rsf.doc.rsfpar('','1.e-3','','''time step size'''))
sfewedc3p.version('2.1-git')
sfewedc3p.synopsis('''sfewedc3p < c11.rsf c14=c14.rsf theta=q1.rsf verb=false tilt=false tric=false seed=time(NULL eps=1.e-6 npk=20 nb=0 dt=1.e-3''','''''')
rsf.doc.progs['sfewedc3p']=sfewedc3p

sfewedc3s = rsf.doc.rsfprog('sfewedc3s','user/jsun/Mewedc3s.cc','''None''')
sfewedc3s.par('c14',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3s.par('theta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewedc3s.par('verb',rsf.doc.rsfpar('','false','','''verbosity flag'''))
sfewedc3s.par('tilt',rsf.doc.rsfpar('','false','','''tilting of TTI'''))
sfewedc3s.par('tric',rsf.doc.rsfpar('','false','','''triclinic anisotropy'''))
sfewedc3s.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfewedc3s.par('eps',rsf.doc.rsfpar('','1.e-6','','''tolerance'''))
sfewedc3s.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfewedc3s.par('nb',rsf.doc.rsfpar('','0','','''boundary padding'''))
sfewedc3s.par('dt',rsf.doc.rsfpar('','1.e-3','','''time step size'''))
sfewedc3s.version('2.1-git')
sfewedc3s.synopsis('''sfewedc3s < c11.rsf c14=c14.rsf theta=q1.rsf verb=false tilt=false tric=false seed=time(NULL eps=1.e-6 npk=20 nb=0 dt=1.e-3''','''''')
rsf.doc.progs['sfewedc3s']=sfewedc3s

sfewdlr3 = rsf.doc.rsfprog('sfewdlr3','user/jsun/Mewdlr3.cc','''None''')
sfewdlr3.par('c14',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewdlr3.par('theta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewdlr3.par('verb',rsf.doc.rsfpar('','false','','''verbosity flag'''))
sfewdlr3.par('tilt',rsf.doc.rsfpar('','false','','''tilting of TTI'''))
sfewdlr3.par('tric',rsf.doc.rsfpar('','false','','''triclinic anisotropy'''))
sfewdlr3.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfewdlr3.par('eps',rsf.doc.rsfpar('','1.e-6','','''tolerance'''))
sfewdlr3.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfewdlr3.par('nb',rsf.doc.rsfpar('','0','','''boundary padding'''))
sfewdlr3.par('dt',rsf.doc.rsfpar('','1.e-3','','''time step size'''))
sfewdlr3.par('tau',rsf.doc.rsfpar('','1.e-1','','''smoothing radius'''))
sfewdlr3.par('mode',rsf.doc.rsfpar('','0','','''wavefield decomposition mode (0->slow S, 1->fast S, 2->P)'''))
sfewdlr3.par('jump',rsf.doc.rsfpar('','1','','''jump step for reduced lowrank decomposition'''))
sfewdlr3.version('2.1-git')
sfewdlr3.synopsis('''sfewdlr3 < c11.rsf c14=c14.rsf theta=q1.rsf verb=false tilt=false tric=false seed=time(NULL eps=1.e-6 npk=20 nb=0 dt=1.e-3 tau=1.e-1 mode=0 jump=1''','''''')
rsf.doc.progs['sfewdlr3']=sfewdlr3

sfewelr3grad = rsf.doc.rsfprog('sfewelr3grad','user/jsun/Mewelr3grad.cc','''None''')
sfewelr3grad.par('c14',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewelr3grad.par('theta',rsf.doc.rsfpar('file   ',desc='''auxiliary input file name'''))
sfewelr3grad.par('C11dx',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfewelr3grad.par('C12dy',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfewelr3grad.par('C13dz',rsf.doc.rsfpar('file   ',desc='''auxiliary output file name'''))
sfewelr3grad.par('verb',rsf.doc.rsfpar('','false','','''verbosity flag'''))
sfewelr3grad.par('tilt',rsf.doc.rsfpar('','false','','''tilting of TTI'''))
sfewelr3grad.par('tric',rsf.doc.rsfpar('','false','','''triclinic anisotropy'''))
sfewelr3grad.par('grad',rsf.doc.rsfpar('','false','','''include gradient term'''))
sfewelr3grad.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfewelr3grad.par('mode',rsf.doc.rsfpar('','0','','''mode of decomposition: 0->mixed, 1->p, 2->s'''))
sfewelr3grad.par('jump',rsf.doc.rsfpar('','1','','''jump step for reduced lowrank decomposition'''))
sfewelr3grad.par('eps',rsf.doc.rsfpar('','1.e-6','','''tolerance'''))
sfewelr3grad.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfewelr3grad.par('nb',rsf.doc.rsfpar('','0','','''boundary padding'''))
sfewelr3grad.par('dt',rsf.doc.rsfpar('','1.e-3','','''time step size'''))
sfewelr3grad.version('2.1-git')
sfewelr3grad.synopsis('''sfewelr3grad < c11.rsf c14=c14.rsf theta=q1.rsf C11dx=fC11dx.rsf C12dy=fC12dy.rsf C13dz=fC13dz.rsf verb=false tilt=false tric=false grad=false seed=time(NULL mode=0 jump=1 eps=1.e-6 npk=20 nb=0 dt=1.e-3''','''''')
rsf.doc.progs['sfewelr3grad']=sfewelr3grad

sfmpicfftrtm = rsf.doc.rsfprog('sfmpicfftrtm','user/jsun/Mmpicfftrtm.cc','''Lowrank decomposition for 3-D isotropic wave propagation. ''')
sfmpicfftrtm.par('verb',rsf.doc.rsfpar('','false','','''verbosity'''))
sfmpicfftrtm.par('migr',rsf.doc.rsfpar('','false','','''adjoint(migration) flag'''))
sfmpicfftrtm.par('roll',rsf.doc.rsfpar('','false','','''rolling v.s. fixed-spread acquisition geometry'''))
sfmpicfftrtm.par('dabc',rsf.doc.rsfpar('','false','','''absorbing boundary'''))
sfmpicfftrtm.par('snap',rsf.doc.rsfpar('','false','','''output wavefield snapshots'''))
sfmpicfftrtm.par('mute',rsf.doc.rsfpar('','false','','''mute first arrival (modeling or imaging)'''))
sfmpicfftrtm.par('sill',rsf.doc.rsfpar('','false','','''source illumination for rtm'''))
sfmpicfftrtm.par('nb',rsf.doc.rsfpar('','0','','''abc width'''))
sfmpicfftrtm.par('cb',rsf.doc.rsfpar('','1.0','','''abc strength'''))
sfmpicfftrtm.par('nbell',rsf.doc.rsfpar('','1','','''source position z'''))
sfmpicfftrtm.par('jsnap',rsf.doc.rsfpar('','100','','''snapshot interval'''))
sfmpicfftrtm.par('jump',rsf.doc.rsfpar('','1','','''subsampling rate for lowrank decomposition'''))
sfmpicfftrtm.par('seed',rsf.doc.rsfpar('','time(NULL','',''''''))
sfmpicfftrtm.par('npk',rsf.doc.rsfpar('','20','','''maximum rank'''))
sfmpicfftrtm.par('eps',rsf.doc.rsfpar('','1.e-4','','''tolerance/accuracy'''))
sfmpicfftrtm.par('media',rsf.doc.rsfpar('','0','','''media: 0-> iso, 1-> tti'''))
sfmpicfftrtm.par('taper',rsf.doc.rsfpar('','0','','''tapering interval for tti'''))
sfmpicfftrtm.par('thres',rsf.doc.rsfpar('','1','','''tapering threshold for tti'''))
sfmpicfftrtm.par('sou_t0',rsf.doc.rsfpar('','0.','','''source delay'''))
sfmpicfftrtm.par('vel_w',rsf.doc.rsfpar('','1500.','','''water velocity'''))
sfmpicfftrtm.par('revolve_snaps',rsf.doc.rsfpar('','64','','''maximum num of snapshots allowed to be saved'''))
sfmpicfftrtm.par('info',rsf.doc.rsfpar('','0','','''verbosity of output info about revolve'''))
sfmpicfftrtm.par('sht_set',rsf.doc.rsfpar('','0','','''starting shot index'''))
sfmpicfftrtm.par('sht_num',rsf.doc.rsfpar('','sht_num_total','','''shot number to process'''))
sfmpicfftrtm.version('2.1-git')
sfmpicfftrtm.synopsis('''sfmpicfftrtm verb=false migr=false roll=false dabc=false snap=false mute=false sill=false nb=0 cb=1.0 nbell=1 jsnap=100 jump=1 seed=time(NULL npk=20 eps=1.e-4 media=0 taper=0 thres=1 sou_t0=0. vel_w=1500. revolve_snaps=64 info=0 sht_set=0 sht_num=sht_num_total''','''''')
rsf.doc.progs['sfmpicfftrtm']=sfmpicfftrtm

