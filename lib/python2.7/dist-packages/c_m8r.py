# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_c_m8r', [dirname(__file__)])
        except ImportError:
            import _c_m8r
            return _c_m8r
        if fp is not None:
            try:
                _mod = imp.load_module('_c_m8r', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _c_m8r = swig_import_helper()
    del swig_import_helper
else:
    import _c_m8r
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class farray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, farray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, farray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arr"] = _c_m8r.farray_arr_set
    __swig_getmethods__["arr"] = _c_m8r.farray_arr_get
    if _newclass:arr = _swig_property(_c_m8r.farray_arr_get, _c_m8r.farray_arr_set)
    __swig_setmethods__["n"] = _c_m8r.farray_n_set
    __swig_getmethods__["n"] = _c_m8r.farray_n_get
    if _newclass:n = _swig_property(_c_m8r.farray_n_get, _c_m8r.farray_n_set)
    def __init__(self): 
        this = _c_m8r.new_farray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _c_m8r.delete_farray
    __del__ = lambda self : None;
farray_swigregister = _c_m8r.farray_swigregister
farray_swigregister(farray)

class iarray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iarray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iarray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arr"] = _c_m8r.iarray_arr_set
    __swig_getmethods__["arr"] = _c_m8r.iarray_arr_get
    if _newclass:arr = _swig_property(_c_m8r.iarray_arr_get, _c_m8r.iarray_arr_set)
    __swig_setmethods__["n"] = _c_m8r.iarray_n_set
    __swig_getmethods__["n"] = _c_m8r.iarray_n_get
    if _newclass:n = _swig_property(_c_m8r.iarray_n_get, _c_m8r.iarray_n_set)
    def __init__(self): 
        this = _c_m8r.new_iarray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _c_m8r.delete_iarray
    __del__ = lambda self : None;
iarray_swigregister = _c_m8r.iarray_swigregister
iarray_swigregister(iarray)

class barray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, barray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, barray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arr"] = _c_m8r.barray_arr_set
    __swig_getmethods__["arr"] = _c_m8r.barray_arr_get
    if _newclass:arr = _swig_property(_c_m8r.barray_arr_get, _c_m8r.barray_arr_set)
    __swig_setmethods__["n"] = _c_m8r.barray_n_set
    __swig_getmethods__["n"] = _c_m8r.barray_n_get
    if _newclass:n = _swig_property(_c_m8r.barray_n_get, _c_m8r.barray_n_set)
    def __init__(self): 
        this = _c_m8r.new_barray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _c_m8r.delete_barray
    __del__ = lambda self : None;
barray_swigregister = _c_m8r.barray_swigregister
barray_swigregister(barray)


def histints(*args):
  return _c_m8r.histints(*args)
histints = _c_m8r.histints

def getfloats(*args):
  return _c_m8r.getfloats(*args)
getfloats = _c_m8r.getfloats

def getints(*args):
  return _c_m8r.getints(*args)
getints = _c_m8r.getints

def getbools(*args):
  return _c_m8r.getbools(*args)
getbools = _c_m8r.getbools
SF_MAX_DIM = _c_m8r.SF_MAX_DIM
SF_UCHAR = _c_m8r.SF_UCHAR
SF_CHAR = _c_m8r.SF_CHAR
SF_INT = _c_m8r.SF_INT
SF_FLOAT = _c_m8r.SF_FLOAT
SF_COMPLEX = _c_m8r.SF_COMPLEX
SF_ASCII = _c_m8r.SF_ASCII
SF_XDR = _c_m8r.SF_XDR
SF_NATIVE = _c_m8r.SF_NATIVE

def sf_input(*args):
  return _c_m8r.sf_input(*args)
sf_input = _c_m8r.sf_input

def sf_output(*args):
  return _c_m8r.sf_output(*args)
sf_output = _c_m8r.sf_output

def sf_gettype(*args):
  return _c_m8r.sf_gettype(*args)
sf_gettype = _c_m8r.sf_gettype

def sf_getform(*args):
  return _c_m8r.sf_getform(*args)
sf_getform = _c_m8r.sf_getform

def sf_settype(*args):
  return _c_m8r.sf_settype(*args)
sf_settype = _c_m8r.sf_settype

def sf_setformat(*args):
  return _c_m8r.sf_setformat(*args)
sf_setformat = _c_m8r.sf_setformat

def sf_setaformat(*args):
  return _c_m8r.sf_setaformat(*args)
sf_setaformat = _c_m8r.sf_setaformat

def sf_fileclose(*args):
  return _c_m8r.sf_fileclose(*args)
sf_fileclose = _c_m8r.sf_fileclose

def sf_histint(*args):
  return _c_m8r.sf_histint(*args)
sf_histint = _c_m8r.sf_histint

def sf_histints(*args):
  return _c_m8r.sf_histints(*args)
sf_histints = _c_m8r.sf_histints

def sf_histfloat(*args):
  return _c_m8r.sf_histfloat(*args)
sf_histfloat = _c_m8r.sf_histfloat

def sf_histstring(*args):
  return _c_m8r.sf_histstring(*args)
sf_histstring = _c_m8r.sf_histstring

def sf_fileflush(*args):
  return _c_m8r.sf_fileflush(*args)
sf_fileflush = _c_m8r.sf_fileflush

def sf_putint(*args):
  return _c_m8r.sf_putint(*args)
sf_putint = _c_m8r.sf_putint

def sf_putints(*args):
  return _c_m8r.sf_putints(*args)
sf_putints = _c_m8r.sf_putints

def sf_putfloat(*args):
  return _c_m8r.sf_putfloat(*args)
sf_putfloat = _c_m8r.sf_putfloat

def sf_putstring(*args):
  return _c_m8r.sf_putstring(*args)
sf_putstring = _c_m8r.sf_putstring

def sf_putline(*args):
  return _c_m8r.sf_putline(*args)
sf_putline = _c_m8r.sf_putline

def sf_bytes(*args):
  return _c_m8r.sf_bytes(*args)
sf_bytes = _c_m8r.sf_bytes

def sf_floatwrite(*args):
  return _c_m8r.sf_floatwrite(*args)
sf_floatwrite = _c_m8r.sf_floatwrite

def sf_floatread(*args):
  return _c_m8r.sf_floatread(*args)
sf_floatread = _c_m8r.sf_floatread

def sf_intwrite(*args):
  return _c_m8r.sf_intwrite(*args)
sf_intwrite = _c_m8r.sf_intwrite

def sf_intread(*args):
  return _c_m8r.sf_intread(*args)
sf_intread = _c_m8r.sf_intread

def sf_try_charread2(*args):
  return _c_m8r.sf_try_charread2(*args)
sf_try_charread2 = _c_m8r.sf_try_charread2

def sf_complexwrite(*args):
  return _c_m8r.sf_complexwrite(*args)
sf_complexwrite = _c_m8r.sf_complexwrite

def sf_complexread(*args):
  return _c_m8r.sf_complexread(*args)
sf_complexread = _c_m8r.sf_complexread

def sf_tell(*args):
  return _c_m8r.sf_tell(*args)
sf_tell = _c_m8r.sf_tell

def sf_seek(*args):
  return _c_m8r.sf_seek(*args)
sf_seek = _c_m8r.sf_seek

def sf_unpipe(*args):
  return _c_m8r.sf_unpipe(*args)
sf_unpipe = _c_m8r.sf_unpipe

def sf_init(*args):
  return _c_m8r.sf_init(*args)
sf_init = _c_m8r.sf_init

def sf_parclose():
  return _c_m8r.sf_parclose()
sf_parclose = _c_m8r.sf_parclose

def sf_getprog():
  return _c_m8r.sf_getprog()
sf_getprog = _c_m8r.sf_getprog

def sf_getuser():
  return _c_m8r.sf_getuser()
sf_getuser = _c_m8r.sf_getuser

def sf_gethost():
  return _c_m8r.sf_gethost()
sf_gethost = _c_m8r.sf_gethost

def sf_getint(*args):
  return _c_m8r.sf_getint(*args)
sf_getint = _c_m8r.sf_getint

def sf_getints(*args):
  return _c_m8r.sf_getints(*args)
sf_getints = _c_m8r.sf_getints

def sf_getfloat(*args):
  return _c_m8r.sf_getfloat(*args)
sf_getfloat = _c_m8r.sf_getfloat

def sf_getfloats(*args):
  return _c_m8r.sf_getfloats(*args)
sf_getfloats = _c_m8r.sf_getfloats

def sf_getstring(*args):
  return _c_m8r.sf_getstring(*args)
sf_getstring = _c_m8r.sf_getstring

def sf_getstrings(*args):
  return _c_m8r.sf_getstrings(*args)
sf_getstrings = _c_m8r.sf_getstrings

def sf_getbool(*args):
  return _c_m8r.sf_getbool(*args)
sf_getbool = _c_m8r.sf_getbool

def sf_getbools(*args):
  return _c_m8r.sf_getbools(*args)
sf_getbools = _c_m8r.sf_getbools

def sf_filedims(*args):
  return _c_m8r.sf_filedims(*args)
sf_filedims = _c_m8r.sf_filedims

def sf_filesize(*args):
  return _c_m8r.sf_filesize(*args)
sf_filesize = _c_m8r.sf_filesize

def sf_leftsize(*args):
  return _c_m8r.sf_leftsize(*args)
sf_leftsize = _c_m8r.sf_leftsize

def sf_cp(*args):
  return _c_m8r.sf_cp(*args)
sf_cp = _c_m8r.sf_cp

def sf_rm(*args):
  return _c_m8r.sf_rm(*args)
sf_rm = _c_m8r.sf_rm

def rsf_array(*args):
  return _c_m8r.rsf_array(*args)
rsf_array = _c_m8r.rsf_array
# This file is compatible with both classic and new-style classes.


