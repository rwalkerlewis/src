# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_c_vplot', [dirname(__file__)])
        except ImportError:
            import _c_vplot
            return _c_vplot
        if fp is not None:
            try:
                _mod = imp.load_module('_c_vplot', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _c_vplot = swig_import_helper()
    del swig_import_helper
else:
    import _c_vplot
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def new_floatp(*args):
  return _c_vplot.new_floatp(*args)
new_floatp = _c_vplot.new_floatp

def delete_floatp(*args):
  return _c_vplot.delete_floatp(*args)
delete_floatp = _c_vplot.delete_floatp

def floatp_getitem(*args):
  return _c_vplot.floatp_getitem(*args)
floatp_getitem = _c_vplot.floatp_getitem

def floatp_setitem(*args):
  return _c_vplot.floatp_setitem(*args)
floatp_setitem = _c_vplot.floatp_setitem

def vp_init():
  return _c_vplot.vp_init()
vp_init = _c_vplot.vp_init

def vp_orig(*args):
  return _c_vplot.vp_orig(*args)
vp_orig = _c_vplot.vp_orig

def vp_uorig(*args):
  return _c_vplot.vp_uorig(*args)
vp_uorig = _c_vplot.vp_uorig

def vp_uclip(*args):
  return _c_vplot.vp_uclip(*args)
vp_uclip = _c_vplot.vp_uclip

def vp_umove(*args):
  return _c_vplot.vp_umove(*args)
vp_umove = _c_vplot.vp_umove

def vp_udraw(*args):
  return _c_vplot.vp_udraw(*args)
vp_udraw = _c_vplot.vp_udraw

def vp_move(*args):
  return _c_vplot.vp_move(*args)
vp_move = _c_vplot.vp_move

def vp_draw(*args):
  return _c_vplot.vp_draw(*args)
vp_draw = _c_vplot.vp_draw

def vp_fat(*args):
  return _c_vplot.vp_fat(*args)
vp_fat = _c_vplot.vp_fat

def vp_color(*args):
  return _c_vplot.vp_color(*args)
vp_color = _c_vplot.vp_color

def vp_penup():
  return _c_vplot.vp_penup()
vp_penup = _c_vplot.vp_penup

def vp_pendn(*args):
  return _c_vplot.vp_pendn(*args)
vp_pendn = _c_vplot.vp_pendn

def vp_text(*args):
  return _c_vplot.vp_text(*args)
vp_text = _c_vplot.vp_text

def vp_utext(*args):
  return _c_vplot.vp_utext(*args)
vp_utext = _c_vplot.vp_utext

def vp_scale(*args):
  return _c_vplot.vp_scale(*args)
vp_scale = _c_vplot.vp_scale

def vp_uarrow(*args):
  return _c_vplot.vp_uarrow(*args)
vp_uarrow = _c_vplot.vp_uarrow

def vp_tjust(*args):
  return _c_vplot.vp_tjust(*args)
vp_tjust = _c_vplot.vp_tjust

def vp_clip(*args):
  return _c_vplot.vp_clip(*args)
vp_clip = _c_vplot.vp_clip

def vp_dash(*args):
  return _c_vplot.vp_dash(*args)
vp_dash = _c_vplot.vp_dash

def vp_upline(*args):
  return _c_vplot.vp_upline(*args)
vp_upline = _c_vplot.vp_upline

def vp_upendn(*args):
  return _c_vplot.vp_upendn(*args)
vp_upendn = _c_vplot.vp_upendn
# This file is compatible with both classic and new-style classes.


