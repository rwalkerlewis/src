.TH sfgpurtm 1  "APRIL 2019" Madagascar "Madagascar Manuals"
.SH NAME
sfgpurtm \- 2D prestack GPU-based RTM using effective boundary saving.
.SH SYNOPSIS
.B sfgpurtm < vmodl.rsf > imag1.rsf imag2=imag2.rsf fm= dt= nt= ns= ng= jsx= jsz=0 jgx=1 jgz=0 sxbeg= szbeg= gxbeg= gzbeg= order=6 phost=0 csdgather=y vmute=1500 tdmute=2.0/(fm*dt)
.SH COMMENTS

Some basic descriptions of this code are in order.
1) Coordinate configuration of seismic data:

o--------------> x (2nd dim: *.y)
|
|
|
|
|
z (1st dim: *.x)
1st dim: i1=threadIdx.x+blockDim.x*blockIdx.x;
2nd dim: i2=threadIdx.y+blockDim.y*blockIdx.y;
(i1, i2)=i1+i2*nnz;

2) stability condition:	
min(dx, dz)>sqrt(2)*dt*max(v) (NJ=2)
numerical dispersion condition:	
max(dx, dz)<min(v)/(10*fmax)  (NJ=2)
max(dx, dz)<min(v)/(5*fmax)   (NJ=4)

3) This code doesn't save the history of forward time steps. We 
just save the least boundaries (referred to as effective boundary 
in our work) of every time step and the two final steps of the 
wavefield. Using this information, we can easily reconstruct 
the exact wavefield in the reverse time steps. It is noteworthy
that to implement large scale seismic imaging, pinned memory is 
employed to save the boundaries of each step so that all the saved
data can be computed on the device directly.

4) In our implementation, we employ staggered grid based 
convolutional PML (CPML) boundary condition. Using 20 points for 
CPML is enough to obtain perfect absorbing effect (while commonly 
used sponge ABC may need 30 or more). However, we use 32 points on
each side due to the grid alignment reasons. (To make your code 
fast, you should consider that the GPU codes implementation unit 
is half-warp (16 threads). The thickness of the boundary should be 
times of 16. 

5) The final images can be two kinds: result of correlation imaging 
condition and the normalized one. The normalized correlation imaging
result is preferred due to compensated illumination. Some filters 
are popular and effective to remove the low frequency artifacts of 
the imaging: the Laplacian filtering, derivative filtering and 
the bandpass filtering. In this code, we use laplacian filtering.

.SH PARAMETERS
.PD 0
.TP
.I bool   
.B csdgather
.B =y
.R  [y/n]	default, common shot-gather; if n, record at every point
.TP
.I float  
.B dt
.B =
.R  	time interval
.TP
.I float  
.B fm
.B =
.R  	dominant freq of ricker
.TP
.I int    
.B gxbeg
.B =
.R  	x-begining index of receivers, starting from 0
.TP
.I int    
.B gzbeg
.B =
.R  	z-begining index of receivers, starting from 0
.TP
.I file   
.B imag2
.B =
.R  	auxiliary output file name
.TP
.I int    
.B jgx
.B =1
.R  	receiver x-axis jump interval
.TP
.I int    
.B jgz
.B =0
.R  	receiver z-axis jump interval
.TP
.I int    
.B jsx
.B =
.R  	source x-axis  jump interval
.TP
.I int    
.B jsz
.B =0
.R  	source z-axis jump interval
.TP
.I int    
.B ng
.B =
.R  	total receivers in each shot
.TP
.I int    
.B ns
.B =
.R  	total shots
.TP
.I int    
.B nt
.B =
.R  	total modeling time steps
.TP
.I int    
.B order
.B =6
.R  	order of finite difference, order=2,4,6,8,10
.TP
.I float  
.B phost
.B =0
.R  	phost% points on host with zero-copy pinned memory, the rest on device
.TP
.I int    
.B sxbeg
.B =
.R  	x-begining index of sources, starting from 0
.TP
.I int    
.B szbeg
.B =
.R  	z-begining index of sources, starting from 0
.TP
.I int    
.B tdmute
.B =2.0/(fm*dt)
.R  	number of deleyed time samples to mute
.TP
.I float  
.B vmute
.B =1500
.R  	muting velocity to remove the low-freq artifacts, unit=m/s
.SH USED IN
.TP
.I xjtu/gpurtm/marmousi
.TP
.I xjtu/gpurtm/sigsbee
.TP
.I xjtu/primer/marmousi
.TP
.I xjtu/primer/sigsbee
.SH SOURCE
.I user/pyang/Mgpurtm.cu
.SH VERSION
2.1-git
