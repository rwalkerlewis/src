.TH sfanovcv 1  "APRIL 2019" Madagascar "Madagascar Manuals"
.SH NAME
sfanovcv \- Oriented anisotropy continuation: shifted hyperbola travel-time approximation. 
.SH SYNOPSIS
.B sfanovcv < in.rsf > out.rsf velocity=vel.rsf kappa1=kappa1file.rsf kappa2=kappa2file.rsf kappa3=kappa3file.rsf rootin=rootin.rsf eps=0.1 clip=0.5 windowtime=t0 + (nt-1.0)*dt nv=1 lagrange=n plus=y debug=y isotr=n testwarp=n full=n v0= v0= ns=1 ds= s0= smax= epsr=0.001 s0=
.SH COMMENTS

Axis order: t, p, x

.SH PARAMETERS
.PD 0
.TP
.I float  
.B clip
.B =0.5
.R  	maximum stretch
.TP
.I bool   
.B debug
.B =y
.R  [y/n]	Implement debugger: add it later
.TP
.I float  
.B ds
.B =
.R  	s step size
.TP
.I float  
.B eps
.B =0.1
.R  	stretch regularization
.TP
.I float  
.B epsr
.B =0.001
.R  	damper for root
.TP
.I bool   
.B full
.B =n
.R  [y/n]	full accuracy flag - considers all (s-1) terms in any power
.TP
.I bool   
.B isotr
.B =n
.R  [y/n]	Implement debugger: add it later
.TP
.I string 
.B kappa1
.B =
.R  	auxiliary output file name
.TP
.I string 
.B kappa2
.B =
.R  	auxiliary output file name
.TP
.I string 
.B kappa3
.B =
.R  	auxiliary output file name
.TP
.I bool   
.B lagrange
.B =n
.R  [y/n]	Use Lagrangian method
.TP
.I int    
.B ns
.B =1
.R  	s steps
.TP
.I int    
.B nv
.B =1
.R  	number of velocity steps
.TP
.I bool   
.B plus
.B =y
.R  [y/n]	Plus or minus in coefficients: I have two versions
.TP
.I string 
.B rootin
.B =
.R  	auxiliary output file name
.TP
.I float  
.B s0
.B =
.R  	start
.TP
.I float  
.B smax
.B =
.R  
.TP
.I bool   
.B testwarp
.B =n
.R  [y/n]	Implement debugger: add it later
.TP
.I float  
.B v0
.B =
.R  	constant velocity (if no velocity=)
.TP
.I string 
.B velocity
.B =
.R  	velocity file (auxiliary input file name)
.TP
.I float  
.B windowtime
.B =t0 + (nt-1.0)*dt
.R  	maximum time 2 consider
.SH SOURCE
.I user/dmerzlikin/Manovcv.c
.SH VERSION
2.1-git
