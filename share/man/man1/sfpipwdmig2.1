.TH sfpipwdmig2 1  "APRIL 2019" Madagascar "Madagascar Manuals"
.SH NAME
sfpipwdmig2 \- Chain of Path Integral, Plane-Wave Destruction and Kirchhoff migration (based on sfmig2)
.SH SYNOPSIS
.B sfpipwdmig2 < inp.rsf > out.rsf vel=fvel.rsf dip=dip.rsf adj=n sm=y domod=y pi=y verb=n doomp=y apt=nx angle=90.0 hd=y ps=y dd=y half=y rho=1.-1./nt v_1= v_2= v_3= v_4= passthr=0.001 eps=0.001 epst2=0.001 pad=nt order=1 nj1=1 antialias=
.SH COMMENTS

works only for zero offset

make sure nh = 1 dh = 1.0 h0 = 0.0 offset file is not used

there are flags to disable PWD (Plane-Wave Destruction), P (Path-Integral Filter) and L (Kirchhoff modelling/migration)

no regularization

can be expressed for forward as: data = P PWD L ( reflections + diffractions ) or as a matrix

.                     | reflections  |
| P PWD L   P PWD L | |              | = | data |           
.                     | diffractions |           

can be expressed for adjoint as:

adjoint reflections = L^T PWD^T P^T data

adjoint diffractions = L^T PWD^T P^T data or as a matrix

| reflections  |   | L^T PWD^T P^T |
|              | = |               | | data |
| diffractions |   | L^T PWD^T P^T |


.SH PARAMETERS
.PD 0
.TP
.I bool   
.B adj
.B =n
.R  [y/n]	adjoint flag
.TP
.I float  
.B angle
.B =90.0
.R  	angle aperture
.TP
.I string 
.B antialias
.B =
.R  	antialiasing type [triangle,flat,steep,none]
.TP
.I int    
.B apt
.B =nx
.R  	integral aperture
.TP
.I bool   
.B dd
.B =y
.R  [y/n]	differentiation in the data domain
.TP
.I file   
.B dip
.B =
.R  	auxiliary input file name
.TP
.I bool   
.B domod
.B =y
.R  [y/n]	if perform modeling via Kirchhoff (if disabled -> chain = P PWD)
.TP
.I bool   
.B doomp
.B =y
.R  [y/n]	OMP flag - currently hard-coded to y
.TP
.I float  
.B eps
.B =0.001
.R  	damper for pi
.TP
.I float  
.B epst2
.B =0.001
.R  	damper for t2warp
.TP
.I bool   
.B half
.B =y
.R  [y/n]	if y, the third axis is half-offset instead of full offset
.TP
.I bool   
.B hd
.B =y
.R  [y/n]	half derivative
.TP
.I int    
.B nj1
.B =1
.R  	antialiasing
.TP
.I int    
.B order
.B =1
.R  [1,2,3]	accuracy order
.TP
.I int    
.B pad
.B =nt
.R  	output time samples
.TP
.I float  
.B passthr
.B =0.001
.R  	threshold for tail elimination
.TP
.I bool   
.B pi
.B =y
.R  [y/n]	if perform Path-Integral filtering (if disabled -> chain = PWD L)
.TP
.I bool   
.B ps
.B =y
.R  [y/n]	amplitude correction
.TP
.I float  
.B rho
.B =1.-1./nt
.R  	leaky integration constant
.TP
.I bool   
.B sm
.B =y
.R  [y/n]	if perform Plane-Wave destruction (if disabled -> chain = P L)
.TP
.I float  
.B v_1
.B =
.R  	no pass velocity
.TP
.I float  
.B v_2
.B =
.R  	first pass velocity
.TP
.I float  
.B v_3
.B =
.R  	second pass velocity
.TP
.I float  
.B v_4
.B =
.R  	no pass velocity
.TP
.I file   
.B vel
.B =
.R  	auxiliary input file name
.TP
.I bool   
.B verb
.B =n
.R  [y/n]	verbose flag
.SH SOURCE
.I user/dmerzlikin/Mpipwdmig2.c
.SH VERSION
2.1-git
