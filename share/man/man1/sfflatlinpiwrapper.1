.TH sfflatlinpiwrapper 1  "APRIL 2019" Madagascar "Madagascar Manuals"
.SH NAME
sfflatlinpiwrapper \- pi operator building wrapping test function flat gaussian weighting smoothing after pi
.SH SYNOPSIS
.B sfflatlinpiwrapper < inp.rsf > out.rsf pifk=pifk.rsf velocity=vel.rsf hd=y domod=y sw=0 adj=n sm=y v_1= v_2= v_3= v_4= passthr=0.001 eps=0.001 epst2=0.001 pad=nt repeat=1 v0= rect#=(1,1,...) diff#=(n,n,...)
.SH PARAMETERS
.PD 0
.TP
.I bool   
.B adj
.B =n
.R  [y/n]	if perform derivative filtering
.TP
.I bool   
.B diff#
.B =(n,n,...)
.R  [y/n]	differentiation on #-th axis
.TP
.I bool   
.B domod
.B =y
.R  [y/n]	if y, apply half-derivative filter
.TP
.I float  
.B eps
.B =0.001
.R  
.TP
.I float  
.B epst2
.B =0.001
.R  
.TP
.I bool   
.B hd
.B =y
.R  [y/n]
.TP
.I int    
.B pad
.B =nt
.R  	output time samples
.TP
.I float  
.B passthr
.B =0.001
.R  
.TP
.I string 
.B pifk
.B =
.R  	auxiliary output file name
.TP
.I int    
.B rect#
.B =(1,1,...)
.R  	smoothing radius on #-th axis
.TP
.I int    
.B repeat
.B =1
.R  	repeat filtering several times
.TP
.I bool   
.B sm
.B =y
.R  [y/n]	if y, do adjoint integration
.TP
.I int    
.B sw
.B =0
.R  	if > 0, select a branch of the antialiasing operation
.TP
.I float  
.B v0
.B =
.R  	constant velocity (if no velocity=)
.TP
.I float  
.B v_1
.B =
.R  
.TP
.I float  
.B v_2
.B =
.R  
.TP
.I float  
.B v_3
.B =
.R  
.TP
.I float  
.B v_4
.B =
.R  
.TP
.I string 
.B velocity
.B =
.R  	velocity file (auxiliary input file name)
.SH SOURCE
.I user/dmerzlikin/Mflatlinpiwrapper.c
.SH VERSION
2.1-git
