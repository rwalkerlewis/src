Program sfanovcv | Oriented anisotropy continuation: shifted hyperbola travel-time approximation. 
[SYNOPSIS]
sfanovcv < in.rsf > out.rsf velocity=vel.rsf kappa1=kappa1file.rsf kappa2=kappa2file.rsf kappa3=kappa3file.rsf rootin=rootin.rsf eps=0.1 clip=0.5 windowtime=t0 + (nt-1.0)*dt nv=1 lagrange=n plus=y debug=y isotr=n testwarp=n full=n v0= v0= ns=1 ds= s0= smax= epsr=0.001 s0=
[COMMENTS]

Axis order: t, p, x

[PARAMETERS]
float   | clip | =0.5 |   | 	maximum stretch 
bool    | debug | =y |  [y/n] | 	Implement debugger: add it later 
float   | ds | = |   | 	s step size 
float   | eps | =0.1 |   | 	stretch regularization 
float   | epsr | =0.001 |   | 	damper for root 
bool    | full | =n |  [y/n] | 	full accuracy flag - considers all (s-1) terms in any power 
bool    | isotr | =n |  [y/n] | 	Implement debugger: add it later 
string  | kappa1 | = |   | 	auxiliary output file name
string  | kappa2 | = |   | 	auxiliary output file name
string  | kappa3 | = |   | 	auxiliary output file name
bool    | lagrange | =n |  [y/n] | 	Use Lagrangian method 
int     | ns | =1 |   | 	s steps 
int     | nv | =1 |   | 	number of velocity steps 
bool    | plus | =y |  [y/n] | 	Plus or minus in coefficients: I have two versions 
string  | rootin | = |   | 	auxiliary output file name
float   | s0 | = |   | 	start 
float   | smax | = |   | 	
bool    | testwarp | =n |  [y/n] | 	Implement debugger: add it later 
float   | v0 | = |   | 	constant velocity (if no velocity=) 
string  | velocity | = |   | 	velocity file (auxiliary input file name)
float   | windowtime | =t0 + (nt-1.0)*dt |   | 	maximum time 2 consider 
[DIRECTORY]
user/dmerzlikin
